{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/raw/chatbot.py","path":"raw/chatbot.py","modified":0,"renderable":0},{"_id":"source/raw/db.sqlite3","path":"raw/db.sqlite3","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/src/code/LogisticRegression/data.csv","path":"src/code/LogisticRegression/data.csv","modified":0,"renderable":0},{"_id":"source/src/code/LogisticRegression/logistic_regression.ipynb","path":"src/code/LogisticRegression/logistic_regression.ipynb","modified":0,"renderable":0},{"_id":"source/raw/code/matplotlib/example.txt","path":"raw/code/matplotlib/example.txt","modified":0,"renderable":0},{"_id":"source/src/imgs/1704/0407_sunday_setp1.png","path":"src/imgs/1704/0407_sunday_setp1.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1704/0407_sunday_setp2.png","path":"src/imgs/1704/0407_sunday_setp2.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1704/0407_sunday_setp3.png","path":"src/imgs/1704/0407_sunday_setp3.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1803/0313_rr.jpg","path":"src/imgs/1803/0313_rr.jpg","modified":0,"renderable":0},{"_id":"source/src/imgs/1803/0313_ll.jpg","path":"src/imgs/1803/0313_ll.jpg","modified":0,"renderable":0},{"_id":"source/src/imgs/1704/0419_print_subarray.png","path":"src/imgs/1704/0419_print_subarray.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1805/0503_child.png","path":"src/imgs/1805/0503_child.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1805/0503_label.png","path":"src/imgs/1805/0503_label.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1805/0503_pie.png","path":"src/imgs/1805/0503_pie.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1805/0503_read_file_data.png","path":"src/imgs/1805/0503_read_file_data.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1805/0503_sandian.png","path":"src/imgs/1805/0503_sandian.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1805/0503_simple.png","path":"src/imgs/1805/0503_simple.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1805/0503_zhifang.png","path":"src/imgs/1805/0503_zhifang.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1805/0503_style.png","path":"src/imgs/1805/0503_style.png","modified":0,"renderable":0},{"_id":"source/src/imgs/1805/0506_numpy_logspace.png","path":"src/imgs/1805/0506_numpy_logspace.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"source/src/imgs/1805/0503_color_sandian.png","path":"src/imgs/1805/0503_color_sandian.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"source/raw/code/matplotlib/matplotlibdemo.ipynb","path":"raw/code/matplotlib/matplotlibdemo.ipynb","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1519449881196},{"_id":"source/.DS_Store","hash":"4834f8282d7042d4b035b2f465958c62ab8fa245","modified":1525433465249},{"_id":"source/CNAME","hash":"643fc73d7f789a44f4eac629778d51cde132396f","modified":1519449881188},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1519449881196},{"_id":"themes/icarus/README.md","hash":"acd2d5d12820b065345d68f88bfc3a739f8d8ae2","modified":1519449881196},{"_id":"themes/icarus/.DS_Store","hash":"f777ed1e174e7f1a28958e71719df8cb070457a0","modified":1525767741813},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1519449881212},{"_id":"source/_posts/1970-01-01-01.md","hash":"b91743c68f5034f1fe487c5e3b69628cf4a08386","modified":1519449881189},{"_id":"source/_posts/2016-08-11-LeetCodeRansomNote.md","hash":"1e4a7ad8f423f3491086547402a234a0f55b7cae","modified":1521007960668},{"_id":"source/_posts/2016-08-10-LeetCodeLinkedListRandomNode.md","hash":"d3f7a26f30bf4dcc4afefbd74386b19895f11a39","modified":1521007960667},{"_id":"source/_posts/2016-08-12-LeetCodeShuffleArray.md","hash":"b339f4d51fb299f26581a36bdf9c203b553978fb","modified":1521007960668},{"_id":"source/_posts/2016-08-12-LeetCodeInsertDeleteGetRandom.md","hash":"4b4168694c6bd76c8a88d3e8da9053ad7a262357","modified":1521007960668},{"_id":"source/_posts/2016-08-13-LeetCodeKthSmallest.md","hash":"5e556fdc7c464262cbce15e63be72a75ae0b4a69","modified":1521007960669},{"_id":"source/_posts/2016-08-18-LeetCodeMinParser.md","hash":"8a380330ba1713d1f02adc26d09aa1f45fd2cf87","modified":1521007960669},{"_id":"source/_posts/2016-08-20-LeetCodeCombinationSumIV.md","hash":"9ed7ae1be5c5349fd753f40004a57573483bcbfa","modified":1521007960669},{"_id":"source/_posts/2016-08-21-LeetCodeClimbingStairs.md","hash":"8436d2c5a277813d83f1719f251b321a6b749d2b","modified":1521007960670},{"_id":"source/_posts/2017-03-05-MachineLearningFAQ.md","hash":"7f9532b663911059c834f9e2764b1c4a93dc74b0","modified":1525250356343},{"_id":"source/_posts/2017-04-17-AlogrithmSunday.md","hash":"7a445802d2f2ad97454b1b0f819e4319ea82fee2","modified":1521007960670},{"_id":"source/_posts/2017-09-27-1.md","hash":"62ac3e6b01ff846b767d4c45ee473baf9b9ee531","modified":1519449881189},{"_id":"source/_posts/2017-04-19-AlogrithmPrintSubarray .md","hash":"f845afacdf53d1039deb42de16ba368b1e824df0","modified":1521007960671},{"_id":"source/_posts/2017-09-28-2.md","hash":"385d2957eddb1156f76afb9abab33d575b125f90","modified":1519449881189},{"_id":"source/_posts/2017-09-30-4.md","hash":"eda7d2a65914c8f6a36c88c6d9e882093b6a4ce9","modified":1519449881192},{"_id":"source/_posts/2017-12-24.md","hash":"ff74a1c3a5906c8ab3a6333e83b860900303b1ca","modified":1519449881192},{"_id":"source/_posts/2017-11-22-DynamicProgrammingMaxDiff.md","hash":"9a91bc75ca11b02aac11cadf2dd94709d82fbb34","modified":1521007960671},{"_id":"source/_posts/2017-09-29-3.md","hash":"41cda41dcf443c023336a42f4a328ae6146f4e31","modified":1519449881189},{"_id":"source/_posts/2017-12-25.md","hash":"538a635c98eade2bb3d6ee6ffe0df791ec538f64","modified":1519449881193},{"_id":"source/_posts/2018-02-19_perceptron.md","hash":"d2d5ebf0363cd1f2edbf1578f5f7779750bf0114","modified":1519449950003},{"_id":"source/_posts/2018-02-24_chatbot.md","hash":"f4beb35133c893fbb21cc0c7f8628ea0c5d86ba4","modified":1521007960671},{"_id":"source/_posts/2018-02-25_nltk.md","hash":"85e9cfeb3b3bfea50840ee773538fe366e75a770","modified":1521007960671},{"_id":"source/_posts/2018-03-13_AVL.md","hash":"13bf93edd4c684abda3e4a27694ea3ef45c3194d","modified":1521007960672},{"_id":"source/_posts/2018-03-17_Bayes.md","hash":"f791450dcb6d5cd73d0e85bac5a1bb2968b14ec9","modified":1525858535193},{"_id":"source/_posts/2018-05-02_BaseConcept.md","hash":"50cd6c9a53d020740b9e6f6d63b25bfb9b1e6e83","modified":1525337505014},{"_id":"source/_posts/2018-02-23_knn.md","hash":"812bff2833a0cf2affc2637b7ee2e9272483a19d","modified":1522136453856},{"_id":"source/_posts/2018-05-03_Matplotlib.md","hash":"344eb38e2c51b34722b5620620168e2d6f857a96","modified":1525662487917},{"_id":"source/_posts/2018-05-03_Numpy.md","hash":"cb084af874d7acf16c6670263d958936ba5bffbd","modified":1525662487917},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1519449881195},{"_id":"source/raw/.DS_Store","hash":"b969e1bed0ac4bbbd2bfcbcec753417d688c2468","modified":1525433465248},{"_id":"source/raw/chatbot.py","hash":"33e2440d396fba040d79571c1a32c1b2376c392c","modified":1521007960672},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1519449881195},{"_id":"source/raw/db.sqlite3","hash":"0d87fe39ef58128868ba4af8d55ce15e3c7145ab","modified":1521007960673},{"_id":"themes/icarus/_source/.DS_Store","hash":"6beb2fd97984c59da82c022c23798bd9cb875f28","modified":1525764020366},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1519449881197},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1519449881197},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1519449881197},{"_id":"themes/icarus/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1519449881198},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1519449881198},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1519449881199},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1519449881199},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1519449881199},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1519449881199},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1519449881200},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1519449881200},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1519449881200},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1519449881200},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1519449881201},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1519449881207},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1519449881207},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1519449881207},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1519449881208},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1519449881210},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1519449881210},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1519449881212},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1519449881213},{"_id":"themes/icarus/source/.DS_Store","hash":"26e8544f7204b1632546f4a5b82b998673960adc","modified":1525767735521},{"_id":"source/raw/code/.DS_Store","hash":"8f102a8ed15046e05ecf46cbc2d61edc0eecf599","modified":1525343836818},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1519449881196},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1519449881197},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1519449881197},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"b4bd2e641af59e06becaa8f2dc97867f023b8dcf","modified":1519449881201},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1519449881202},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"57c194d0fa268ce2f3e9c755b3154b8a0709f613","modified":1519449881201},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1519449881202},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1519449881202},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1519449881202},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"f6549e3113562548ed128181878a8146509cdc7b","modified":1519449881202},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1519449881203},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"792e4f0e93b2bdc5abd85d447d804a5c608a9c5c","modified":1519449881203},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"4b5251ba5594e5d53f87b6603fadda400ba46544","modified":1519449881203},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1519449881203},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1519449881203},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9c260a551596f71e93177f2289b5cb1c4bc7d96c","modified":1519449881204},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1519449881204},{"_id":"themes/icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1519449881204},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1519449881204},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1519449881206},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1519449881206},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"1ee2384f98c8ccaa7a5b00f14ad2a9a67022c143","modified":1519449881206},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1519449881206},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1519449881207},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1519449881207},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1519449881208},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"e22f99652a220d926103801a3cad55ea9c450e05","modified":1519449881208},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1519449881208},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1519449881208},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1519449881209},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1519449881209},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1519449881209},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1519449881209},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1519449881209},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1519449881210},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1519449881210},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1519449881210},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1519449881211},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1519449881211},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1519449881211},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1519449881212},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1519449881212},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1519449881212},{"_id":"themes/icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1519449881213},{"_id":"themes/icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1519449881230},{"_id":"themes/icarus/source/css/style.styl","hash":"1716b199dba80b26086f325d69c36fa682465106","modified":1519449881231},{"_id":"themes/icarus/source/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1519449881232},{"_id":"themes/icarus/source/js/main.js","hash":"c29e741c5a6ed3920ff01a000b7eff1bd31098e5","modified":1519449881232},{"_id":"source/src/code/LogisticRegression/data.csv","hash":"02b13b81ae086dc09e0e0bf6ce3bc45e6376bdbe","modified":1522750584175},{"_id":"source/src/code/LogisticRegression/logistic_regression.ipynb","hash":"8b870ecade993c945b26f59ffcfa513b87460f62","modified":1522751593733},{"_id":"source/raw/code/matplotlib/example.txt","hash":"8af0f84f6899611e8a85400e6ae55e97f62ea779","modified":1525342185795},{"_id":"source/src/imgs/1704/0407_sunday_setp1.png","hash":"2826cc4c279c56efbfaf97a4479fc8b86ca4a181","modified":1521007960673},{"_id":"source/src/imgs/1704/0407_sunday_setp2.png","hash":"a24cae8153b87f29c3635764212f9edd428a04ac","modified":1521007960674},{"_id":"source/src/imgs/1704/0407_sunday_setp3.png","hash":"caefe463e32c08f365cbb5ed8b51877fb6a95125","modified":1521007960674},{"_id":"source/src/imgs/1803/0313_rr.jpg","hash":"08f5184a4b12c8a3fa4ac2dd116b27d6f0460511","modified":1521007960676},{"_id":"source/src/imgs/1803/0313_ll.jpg","hash":"d6468473e41640f5d4b09449cd804cc64c452022","modified":1521007960675},{"_id":"source/src/imgs/1704/0419_print_subarray.png","hash":"466b5314228ea54a61f5035dd24530ec2a8c37fe","modified":1521007960674},{"_id":"source/src/imgs/1805/0503_child.png","hash":"f442325c9433e4ca0e5cdcccee8094de603de7b7","modified":1525342857985},{"_id":"source/src/imgs/1805/0503_label.png","hash":"9ec8b96f11749c40cd07f94975fd0762f049a322","modified":1525343144768},{"_id":"source/src/imgs/1805/0503_pie.png","hash":"e2e9f6f6925735b9d55c7f2301aba491d41b1fc0","modified":1525343184348},{"_id":"source/src/imgs/1805/0503_read_file_data.png","hash":"ed329ad9d3a53294739625b89f7b2f87d49b82eb","modified":1525342439780},{"_id":"source/src/imgs/1805/0503_sandian.png","hash":"141db47992927b1a71a16f9bdd11cb996ecbf578","modified":1525342980096},{"_id":"source/src/imgs/1805/0503_simple.png","hash":"9bab4963686755011609cf68d6bea2fd31eeb7a9","modified":1525342679781},{"_id":"source/src/imgs/1805/0503_zhifang.png","hash":"9a57fa516dd63255630f567b7d497098e6315b14","modified":1525342624470},{"_id":"source/src/imgs/1805/0503_style.png","hash":"70463dc2a5f8373dd73533b6a526752f12e7a885","modified":1525342814334},{"_id":"source/src/imgs/1805/0506_numpy_logspace.png","hash":"8777db96b251e71ac77fdaa6b8f387bee8fffc75","modified":1525662487918},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1519449881205},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1519449881205},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1519449881205},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1519449881205},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1519449881205},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1519449881205},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1519449881205},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1519449881213},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1519449881214},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1519449881214},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1519449881215},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1519449881215},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1519449881215},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1519449881215},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1519449881216},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1519449881216},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1519449881217},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1519449881217},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1519449881217},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1519449881217},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1519449881218},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1519449881218},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1519449881218},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1519449881218},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1519449881218},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1519449881218},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1519449881219},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1519449881219},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1519449881219},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1519449881219},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1519449881219},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1519449881219},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1519449881220},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1519449881220},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1519449881220},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1519449881220},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1519449881220},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1519449881221},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1519449881221},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1519449881221},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1519449881221},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1519449881221},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1519449881222},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1519449881222},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1519449881222},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1519449881222},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1519449881222},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1519449881222},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1519449881223},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1519449881223},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1519449881223},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1519449881223},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1519449881223},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1519449881224},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1519449881224},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1519449881224},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1519449881224},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1519449881224},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1519449881224},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1519449881225},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1519449881225},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1519449881225},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1519449881225},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1519449881225},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1519449881225},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1519449881226},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1519449881226},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1519449881226},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1519449881226},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1519449881226},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1519449881227},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1519449881227},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1519449881227},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1519449881227},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1519449881227},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1519449881228},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1519449881228},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1519449881228},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"512b9252e1799b93a17c4ad847b0586814a030b4","modified":1519449881228},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1519449881228},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1519449881229},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1519449881229},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1519449881229},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"fb0170075dc2a41e01dd11bbfdbccbed544c479a","modified":1519449881229},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1519449881230},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1519449881230},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1519449881230},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1519449881230},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0edddbcfc46c5c222931a8fe842ee6987d403fac","modified":1519449881231},{"_id":"themes/icarus/source/css/images/logo.png","hash":"fb560887ea8993a9a31f0b8afaa3b768a67e60c0","modified":1519449881231},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1519449881231},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1519449881240},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1519449881240},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1519449881257},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1519449881258},{"_id":"source/src/imgs/1805/0503_color_sandian.png","hash":"d2b804467b04565f5eb73a7684274cb8a30e03b3","modified":1525343028451},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/3d2ec1e484fd4f67844cb5ff18d8ba50","hash":"0aef92e003f4e055acb3cf997a2faa726d164d56","modified":1525772617406},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/IMG_1931-1525352802.JPG","hash":"e90ed7777c02d580b30803577a2a5ba10ac673e9","modified":1525772618328},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/analytics.js","hash":"1ffcf0f3b6af4c4de9eaf4842879c516ecc29a05","modified":1525772617323},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/4a083eaa8de9477d8000eedc1bd1be5f","hash":"5dd2095119f1ceb96a273c1f43768b9d620649c5","modified":1525772617379},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/cloud.jpg","hash":"f2d0c3b4a3a36d4da691aee71095b6a2d4e4b4b5","modified":1525772617363},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/noon.jpg","hash":"c13973e1e3662d72f90a094525fb1a6bd69ee902","modified":1525772617393},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/nr-1071.min.js","hash":"3c6346aea5d04121ca868e984a819c68512b697d","modified":1525772617315},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/e644b8e723","hash":"58884fb0e24a399213205ad35db27e6011bd149c","modified":1525772587120},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/path.jpg","hash":"62999fe5f7bc168329867e2cd38e29b41709e4db","modified":1525772617386},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/saved_resource.html","hash":"38c021506f1394db068ba9b5693b3cd0bae980e2","modified":1525772618359},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/winter.jpg","hash":"95138cb55900939ff4339102e63521e38b3ce7a9","modified":1525772617400},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/xbtsuf77","hash":"9eb0b42d421c3ce478be634cd9723f8caf90ff52","modified":1525772587108},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/屏幕快照_2018-05-03_下午4.56.27-1525337813.png","hash":"a4950a0d44a786713fe611c1af00aad24c8d50e7","modified":1525772618105},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/yunfei-1514276309.png","hash":"1883c519253faa2658f9e0416f786a0968a128c8","modified":1525772618115},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1519449881232},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1519449881233},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1519449881242},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1519449881242},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1519449881242},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1519449881243},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1519449881243},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1519449881243},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1519449881244},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1519449881244},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1519449881244},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1519449881245},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1519449881245},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1519449881246},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1519449881245},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1519449881246},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1519449881246},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1519449881246},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1519449881247},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1519449881247},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1519449881246},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1519449881247},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1519449881247},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1519449881248},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1519449881247},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1519449881249},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1519449881249},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1519449881250},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1519449881250},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1519449881251},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1519449881251},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1519449881251},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1519449881252},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1519449881251},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1519449881252},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1519449881253},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1519449881252},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1519449881253},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1519449881253},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1519449881253},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1519449881254},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1519449881254},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1519449881253},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1519449881254},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1519449881254},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1519449881255},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1519449881255},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1519449881255},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1519449881254},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1519449881256},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1519449881256},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1519449881256},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1519449881256},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1519449881256},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1519449881255},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1519449881257},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1519449881257},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1519449881257},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1519449881258},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1519449881258},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/邀请赚钱.png","hash":"f7c149867ba751389a8b26d6dbce919ef4819c01","modified":1525772617371},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1519449881234},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1519449881234},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1519449881238},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1519449881239},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1519449881240},{"_id":"source/raw/code/matplotlib/matplotlibdemo.ipynb","hash":"5274462d546d691082cceb8d16a79c81208ca036","modified":1525343538837},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1519449881238},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower.html","hash":"f10445d3d6ed3c2e91334b46bfa568c8f3160915","modified":1525772618369},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/saved_resource(2).html","hash":"9f2e638500f2814d7a700ec824e1416cce195db5","modified":1525772618350},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/saved_resource(1).html","hash":"3908a3b5fdf8d01c91a1c9934213d4de977d8ac9","modified":1525772618358},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1519449881236},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/application-77e5bb632cf8be24d090963f1bbc21e7d83c8204a96555444eb9a6738bfbefdf.css","hash":"e96ded8775beccdb0fd7d4a88dc1b191db507e1f","modified":1525772617337},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/application-3e9b276f290f44e86c3aec82e45fcca4719dcc75ad4ffe0e0a5d13011a727fad.js","hash":"544bca7a022fc37171866611e3ea319263850a31","modified":1525772617356},{"_id":"source/src/imgs/1805/#P0# #新增# 分享赚钱 - Tower_files/frame.673e9fae.js","hash":"814a09c8fde48c77b92077608a35def2b5a2797a","modified":1525772617432}],"Category":[{"name":"MATH","_id":"cjgywsb970002uro5mhbtbdhc"},{"name":"Alogrithm","_id":"cjgywsb9b0007uro5a2tm3y2t"},{"name":"机器学习","_id":"cjgywsb9r0010uro5qnuv1n8f"},{"name":"微分不等式","_id":"cjgywsb9u0018uro5khwg2dn4"},{"name":"中值定理","_id":"cjgywsb9x001furo54e8moxy8"},{"name":"线性代数","_id":"cjgywsba5001uuro5gtw8ukqn"},{"name":"定积分","_id":"cjgywsba90021uro5fxtld1to"}],"Data":[],"Page":[{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2018-02-24T05:24:41.195Z","updated":"2018-02-24T05:24:41.195Z","path":"categories/index.html","comments":1,"_id":"cjgywsbb90032uro574rg5s1o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2018-02-24T05:24:41.195Z","updated":"2018-02-24T05:24:41.195Z","path":"tags/index.html","comments":1,"_id":"cjgywsbbd0034uro5rv8j4k48","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"常用的Latex公式","date":"1969-12-31T16:00:00.000Z","banner":"http://ox0p9pctg.bkt.clouddn.com/19700101_latex.jpg","thumbnail":"http://ox0p9pctg.bkt.clouddn.com/19700101_latex.jpg","_content":"\n空格直接是 \\:\n\n<!--more-->\n\n#### 1. 极限\n\n$\\lim _{\\tiny{x\\rightarrow \\infty} }( b^{\\tiny{\\dfrac {1} {n}}}-1)$\n\n```\n$\\lim _{\\tiny{x\\rightarrow \\infty} }(...)$\n```\n\n#### 2. 字体大小\n\n(1) 极小的字体\n\n```\n\\tiny\n```\n\n#### 3. 角标\n\n(1) 右上角 : $b^{\\tiny{\\dfrac {1} {n}}}$\n\n```\n$b^{\\tiny{...}}$\n```\n\n(2) 右下角 : $b_{\\tiny{\\dfrac {1} {n}}}$\n\n```\n$b_{\\tiny{\\dfrac {1} {n}}}$\n```\n\n#### 4. 分数形式\n\n(1) $\\dfrac{a}{b}$\n```\n$\\dfrac{...}{...}$\n```\n\n#### 5. 希腊字母\n\n|字母|源码|\n|-|-|\n|$\\pi$    |\\pi    |\n|$\\alpha$    |\\alpha    |\n|$\\beta$    |\\beta    |\n|$\\theta$    |\\theta    |\n|$\\varepsilon$    |\\varepsilon    |\n|$\\delta$    |\\delta    |\n|$\\eta$    |\\eta    |\n|$\\lambda$    |\\lambda    |\n|$\\xi$    |\\xi    |\n|$\\tau$    |\\tau    |\n|$\\psi$    |\\psi    |\n|$\\phi$    |\\phi    |\n\n#### 6. 数学符号\n\n|符号|说明|源码|\n|-|-|-|\n|$\\leq$   | 小于等于 | `\\leq`|\n|$\\geq$   | 大于等于 | `\\geq`|\n|$\\neq$   | 不等于   | `\\neq`|\n|$\\in$    | 在区间内 | `\\in`|\n|$\\cdot$  | 点乘    | `\\cdot`|\n|$\\sum ^{n}_{i=0} {i\\cdot n}$ | 累加 | `\\sum ^{...}_{...} {...}`|\n|$\\Delta x_{i}$    | delta | `\\Delta`|\n|$\\int _{a}^{b}$   | 积分 | `\\int _{a}^{b}` |\n\n- - -\nTHE END.\n","source":"_posts/1970-01-01-01.md","raw":"---\ntitle: 常用的Latex公式\ndate: 1970-01-01\ncategories: MATH\ntags: TOOLS\nbanner: http://ox0p9pctg.bkt.clouddn.com/19700101_latex.jpg\nthumbnail: http://ox0p9pctg.bkt.clouddn.com/19700101_latex.jpg\n\n---\n\n空格直接是 \\:\n\n<!--more-->\n\n#### 1. 极限\n\n$\\lim _{\\tiny{x\\rightarrow \\infty} }( b^{\\tiny{\\dfrac {1} {n}}}-1)$\n\n```\n$\\lim _{\\tiny{x\\rightarrow \\infty} }(...)$\n```\n\n#### 2. 字体大小\n\n(1) 极小的字体\n\n```\n\\tiny\n```\n\n#### 3. 角标\n\n(1) 右上角 : $b^{\\tiny{\\dfrac {1} {n}}}$\n\n```\n$b^{\\tiny{...}}$\n```\n\n(2) 右下角 : $b_{\\tiny{\\dfrac {1} {n}}}$\n\n```\n$b_{\\tiny{\\dfrac {1} {n}}}$\n```\n\n#### 4. 分数形式\n\n(1) $\\dfrac{a}{b}$\n```\n$\\dfrac{...}{...}$\n```\n\n#### 5. 希腊字母\n\n|字母|源码|\n|-|-|\n|$\\pi$    |\\pi    |\n|$\\alpha$    |\\alpha    |\n|$\\beta$    |\\beta    |\n|$\\theta$    |\\theta    |\n|$\\varepsilon$    |\\varepsilon    |\n|$\\delta$    |\\delta    |\n|$\\eta$    |\\eta    |\n|$\\lambda$    |\\lambda    |\n|$\\xi$    |\\xi    |\n|$\\tau$    |\\tau    |\n|$\\psi$    |\\psi    |\n|$\\phi$    |\\phi    |\n\n#### 6. 数学符号\n\n|符号|说明|源码|\n|-|-|-|\n|$\\leq$   | 小于等于 | `\\leq`|\n|$\\geq$   | 大于等于 | `\\geq`|\n|$\\neq$   | 不等于   | `\\neq`|\n|$\\in$    | 在区间内 | `\\in`|\n|$\\cdot$  | 点乘    | `\\cdot`|\n|$\\sum ^{n}_{i=0} {i\\cdot n}$ | 累加 | `\\sum ^{...}_{...} {...}`|\n|$\\Delta x_{i}$    | delta | `\\Delta`|\n|$\\int _{a}^{b}$   | 积分 | `\\int _{a}^{b}` |\n\n- - -\nTHE END.\n","slug":"1970-01-01-01","published":1,"updated":"2018-02-24T05:24:41.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsb910000uro5ktui3ahi","content":"<p>空格直接是 \\:</p>\n<a id=\"more\"></a>\n<h4 id=\"1-极限\"><a href=\"#1-极限\" class=\"headerlink\" title=\"1. 极限\"></a>1. 极限</h4><p>$\\lim _{\\tiny{x\\rightarrow \\infty} }( b^{\\tiny{\\dfrac {1} {n}}}-1)$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$\\lim _&#123;\\tiny&#123;x\\rightarrow \\infty&#125; &#125;(...)$</div></pre></td></tr></table></figure>\n<h4 id=\"2-字体大小\"><a href=\"#2-字体大小\" class=\"headerlink\" title=\"2. 字体大小\"></a>2. 字体大小</h4><p>(1) 极小的字体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\tiny</div></pre></td></tr></table></figure>\n<h4 id=\"3-角标\"><a href=\"#3-角标\" class=\"headerlink\" title=\"3. 角标\"></a>3. 角标</h4><p>(1) 右上角 : $b^{\\tiny{\\dfrac {1} {n}}}$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$b^&#123;\\tiny&#123;...&#125;&#125;$</div></pre></td></tr></table></figure>\n<p>(2) 右下角 : $b_{\\tiny{\\dfrac {1} {n}}}$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$b_&#123;\\tiny&#123;\\dfrac &#123;1&#125; &#123;n&#125;&#125;&#125;$</div></pre></td></tr></table></figure>\n<h4 id=\"4-分数形式\"><a href=\"#4-分数形式\" class=\"headerlink\" title=\"4. 分数形式\"></a>4. 分数形式</h4><p>(1) $\\dfrac{a}{b}$<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$\\dfrac&#123;...&#125;&#123;...&#125;$</div></pre></td></tr></table></figure></p>\n<h4 id=\"5-希腊字母\"><a href=\"#5-希腊字母\" class=\"headerlink\" title=\"5. 希腊字母\"></a>5. 希腊字母</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>源码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$\\pi$</td>\n<td>\\pi</td>\n</tr>\n<tr>\n<td>$\\alpha$</td>\n<td>\\alpha</td>\n</tr>\n<tr>\n<td>$\\beta$</td>\n<td>\\beta</td>\n</tr>\n<tr>\n<td>$\\theta$</td>\n<td>\\theta</td>\n</tr>\n<tr>\n<td>$\\varepsilon$</td>\n<td>\\varepsilon</td>\n</tr>\n<tr>\n<td>$\\delta$</td>\n<td>\\delta</td>\n</tr>\n<tr>\n<td>$\\eta$</td>\n<td>\\eta</td>\n</tr>\n<tr>\n<td>$\\lambda$</td>\n<td>\\lambda</td>\n</tr>\n<tr>\n<td>$\\xi$</td>\n<td>\\xi</td>\n</tr>\n<tr>\n<td>$\\tau$</td>\n<td>\\tau</td>\n</tr>\n<tr>\n<td>$\\psi$</td>\n<td>\\psi</td>\n</tr>\n<tr>\n<td>$\\phi$</td>\n<td>\\phi</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"6-数学符号\"><a href=\"#6-数学符号\" class=\"headerlink\" title=\"6. 数学符号\"></a>6. 数学符号</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>说明</th>\n<th>源码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$\\leq$</td>\n<td>小于等于</td>\n<td><code>\\leq</code></td>\n</tr>\n<tr>\n<td>$\\geq$</td>\n<td>大于等于</td>\n<td><code>\\geq</code></td>\n</tr>\n<tr>\n<td>$\\neq$</td>\n<td>不等于</td>\n<td><code>\\neq</code></td>\n</tr>\n<tr>\n<td>$\\in$</td>\n<td>在区间内</td>\n<td><code>\\in</code></td>\n</tr>\n<tr>\n<td>$\\cdot$</td>\n<td>点乘</td>\n<td><code>\\cdot</code></td>\n</tr>\n<tr>\n<td>$\\sum ^{n}_{i=0} {i\\cdot n}$</td>\n<td>累加</td>\n<td><code>\\sum ^{...}_{...} {...}</code></td>\n</tr>\n<tr>\n<td>$\\Delta x_{i}$</td>\n<td>delta</td>\n<td><code>\\Delta</code></td>\n</tr>\n<tr>\n<td>$\\int _{a}^{b}$</td>\n<td>积分</td>\n<td><code>\\int _{a}^{b}</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<p>空格直接是 \\:</p>","more":"<h4 id=\"1-极限\"><a href=\"#1-极限\" class=\"headerlink\" title=\"1. 极限\"></a>1. 极限</h4><p>$\\lim _{\\tiny{x\\rightarrow \\infty} }( b^{\\tiny{\\dfrac {1} {n}}}-1)$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$\\lim _&#123;\\tiny&#123;x\\rightarrow \\infty&#125; &#125;(...)$</div></pre></td></tr></table></figure>\n<h4 id=\"2-字体大小\"><a href=\"#2-字体大小\" class=\"headerlink\" title=\"2. 字体大小\"></a>2. 字体大小</h4><p>(1) 极小的字体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\tiny</div></pre></td></tr></table></figure>\n<h4 id=\"3-角标\"><a href=\"#3-角标\" class=\"headerlink\" title=\"3. 角标\"></a>3. 角标</h4><p>(1) 右上角 : $b^{\\tiny{\\dfrac {1} {n}}}$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$b^&#123;\\tiny&#123;...&#125;&#125;$</div></pre></td></tr></table></figure>\n<p>(2) 右下角 : $b_{\\tiny{\\dfrac {1} {n}}}$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$b_&#123;\\tiny&#123;\\dfrac &#123;1&#125; &#123;n&#125;&#125;&#125;$</div></pre></td></tr></table></figure>\n<h4 id=\"4-分数形式\"><a href=\"#4-分数形式\" class=\"headerlink\" title=\"4. 分数形式\"></a>4. 分数形式</h4><p>(1) $\\dfrac{a}{b}$<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$\\dfrac&#123;...&#125;&#123;...&#125;$</div></pre></td></tr></table></figure></p>\n<h4 id=\"5-希腊字母\"><a href=\"#5-希腊字母\" class=\"headerlink\" title=\"5. 希腊字母\"></a>5. 希腊字母</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>源码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$\\pi$</td>\n<td>\\pi</td>\n</tr>\n<tr>\n<td>$\\alpha$</td>\n<td>\\alpha</td>\n</tr>\n<tr>\n<td>$\\beta$</td>\n<td>\\beta</td>\n</tr>\n<tr>\n<td>$\\theta$</td>\n<td>\\theta</td>\n</tr>\n<tr>\n<td>$\\varepsilon$</td>\n<td>\\varepsilon</td>\n</tr>\n<tr>\n<td>$\\delta$</td>\n<td>\\delta</td>\n</tr>\n<tr>\n<td>$\\eta$</td>\n<td>\\eta</td>\n</tr>\n<tr>\n<td>$\\lambda$</td>\n<td>\\lambda</td>\n</tr>\n<tr>\n<td>$\\xi$</td>\n<td>\\xi</td>\n</tr>\n<tr>\n<td>$\\tau$</td>\n<td>\\tau</td>\n</tr>\n<tr>\n<td>$\\psi$</td>\n<td>\\psi</td>\n</tr>\n<tr>\n<td>$\\phi$</td>\n<td>\\phi</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"6-数学符号\"><a href=\"#6-数学符号\" class=\"headerlink\" title=\"6. 数学符号\"></a>6. 数学符号</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>说明</th>\n<th>源码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$\\leq$</td>\n<td>小于等于</td>\n<td><code>\\leq</code></td>\n</tr>\n<tr>\n<td>$\\geq$</td>\n<td>大于等于</td>\n<td><code>\\geq</code></td>\n</tr>\n<tr>\n<td>$\\neq$</td>\n<td>不等于</td>\n<td><code>\\neq</code></td>\n</tr>\n<tr>\n<td>$\\in$</td>\n<td>在区间内</td>\n<td><code>\\in</code></td>\n</tr>\n<tr>\n<td>$\\cdot$</td>\n<td>点乘</td>\n<td><code>\\cdot</code></td>\n</tr>\n<tr>\n<td>$\\sum ^{n}_{i=0} {i\\cdot n}$</td>\n<td>累加</td>\n<td><code>\\sum ^{...}_{...} {...}</code></td>\n</tr>\n<tr>\n<td>$\\Delta x_{i}$</td>\n<td>delta</td>\n<td><code>\\Delta</code></td>\n</tr>\n<tr>\n<td>$\\int _{a}^{b}$</td>\n<td>积分</td>\n<td><code>\\int _{a}^{b}</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<p>THE END.</p>"},{"date":"2016-08-10T16:00:00.000Z","title":"LeetCode:383. Ransom Note","layout":"default","_content":"\n### [eetCode:383. Ransom Note](https://leetcode.com/problems/ransom-note/)\n\n> Given an arbitrary ransom note string and another string containing letters from all the magazines,write a function that will return true if the ransom note can be constructed from the magazines ;otherwise,it will return false.\nEach letter in the magazine string can only be used once in your ransom note.\nNote:\nYou may assume that both strings contain only lowercase letters.\n\n<!--more-->\n\n题目的意思就是给你两个字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成，第二个字符里的每个字符只能使用一次。（假设只包含小写字母）\n\n1. 那么首先想到的就是穷举法了，两层遍历即可，也就是下面的 `canConstruct` 方法了。\n\n2. 再思考一下，有个小技巧。这里只要判断两个字符串中每个字母出现的次数即可解决问题。对于某个字母来说，如果第ransom字符串中出现的次数比magazines中出现的次数要多，很显然就直接返回false了。\n\n看一下 `canConstructBetter` 方法的实现：\n\n```java\nimport java.util.List;\nimport java.util.ArrayList;\npublic class Solution {\n\n    public boolean canConstructBetter(String ransomNote, String magazine) {\n        if (ransomNote.equals(magazine) || \"\".equals(ransomNote)) {\n            return true;\n        }\n        if (\"\".equals(magazine) && !\"\".equals(ransomNote)) {\n            return false;\n        }\n\n        int[] ransomNoteCharCount = new int[26];\n        int[] magazineCharCount = new int[26];\n\n        for(int i = 0 ; i < ransomNote.length() ; i++) {\n            ransomNoteCharCount[ransomNote.charAt(i)-'a']++;\n        }\n\n        for(int i = 0 ; i < magazine.length() ; i++) {\n            magazineCharCount[magazine.charAt(i)-'a']++;\n        }\n\n        for(int i = 0 ; i < 26 ; i++) {\n            if(ransomNoteCharCount[i] > magazineCharCount[i] ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean canConstruct(String ransomNote, String magazine) {\n        if (ransomNote.equals(magazine)) {\n            return true;\n        }\n        if (\"\".equals(ransomNote)) {\n            return true;\n        }\n        List<Character> ransomNodeChars = new ArrayList<>();\n        List<Character> magazineChars = new ArrayList<>();\n        for(int i = 0 ; i < ransomNote.length() ; i++) {\n            ransomNodeChars.add(ransomNote.charAt(i));\n        }\n        this.printList(ransomNodeChars);\n        for(int j = 0 ; j < magazine.length() ; j++) {\n            magazineChars.add(magazine.charAt(j));\n        }\n        boolean flag = false;\n        Character c = null;\n        for(int m = 0 ; m < ransomNote.length() ; m++) {\n            c = ransomNodeChars.get(m);\n            flag = false;\n            for(int n = 0 ; n < magazineChars.size() ; n++) {\n                if(magazineChars.get(n) == c) {\n                    flag = true;\n                    magazineChars.remove(n);\n                    break;\n                }\n            }\n            if (flag == false) {\n                break;\n            }\n        }\n        return flag;\n    }\n}\n```\n\n- - -\nTHE END\n","source":"_posts/2016-08-11-LeetCodeRansomNote.md","raw":"---\ndate: 2016-08-11\ntitle: LeetCode:383. Ransom Note\ntags: LeetCode\ncategory: Alogrithm\nlayout: default\n---\n\n### [eetCode:383. Ransom Note](https://leetcode.com/problems/ransom-note/)\n\n> Given an arbitrary ransom note string and another string containing letters from all the magazines,write a function that will return true if the ransom note can be constructed from the magazines ;otherwise,it will return false.\nEach letter in the magazine string can only be used once in your ransom note.\nNote:\nYou may assume that both strings contain only lowercase letters.\n\n<!--more-->\n\n题目的意思就是给你两个字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成，第二个字符里的每个字符只能使用一次。（假设只包含小写字母）\n\n1. 那么首先想到的就是穷举法了，两层遍历即可，也就是下面的 `canConstruct` 方法了。\n\n2. 再思考一下，有个小技巧。这里只要判断两个字符串中每个字母出现的次数即可解决问题。对于某个字母来说，如果第ransom字符串中出现的次数比magazines中出现的次数要多，很显然就直接返回false了。\n\n看一下 `canConstructBetter` 方法的实现：\n\n```java\nimport java.util.List;\nimport java.util.ArrayList;\npublic class Solution {\n\n    public boolean canConstructBetter(String ransomNote, String magazine) {\n        if (ransomNote.equals(magazine) || \"\".equals(ransomNote)) {\n            return true;\n        }\n        if (\"\".equals(magazine) && !\"\".equals(ransomNote)) {\n            return false;\n        }\n\n        int[] ransomNoteCharCount = new int[26];\n        int[] magazineCharCount = new int[26];\n\n        for(int i = 0 ; i < ransomNote.length() ; i++) {\n            ransomNoteCharCount[ransomNote.charAt(i)-'a']++;\n        }\n\n        for(int i = 0 ; i < magazine.length() ; i++) {\n            magazineCharCount[magazine.charAt(i)-'a']++;\n        }\n\n        for(int i = 0 ; i < 26 ; i++) {\n            if(ransomNoteCharCount[i] > magazineCharCount[i] ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean canConstruct(String ransomNote, String magazine) {\n        if (ransomNote.equals(magazine)) {\n            return true;\n        }\n        if (\"\".equals(ransomNote)) {\n            return true;\n        }\n        List<Character> ransomNodeChars = new ArrayList<>();\n        List<Character> magazineChars = new ArrayList<>();\n        for(int i = 0 ; i < ransomNote.length() ; i++) {\n            ransomNodeChars.add(ransomNote.charAt(i));\n        }\n        this.printList(ransomNodeChars);\n        for(int j = 0 ; j < magazine.length() ; j++) {\n            magazineChars.add(magazine.charAt(j));\n        }\n        boolean flag = false;\n        Character c = null;\n        for(int m = 0 ; m < ransomNote.length() ; m++) {\n            c = ransomNodeChars.get(m);\n            flag = false;\n            for(int n = 0 ; n < magazineChars.size() ; n++) {\n                if(magazineChars.get(n) == c) {\n                    flag = true;\n                    magazineChars.remove(n);\n                    break;\n                }\n            }\n            if (flag == false) {\n                break;\n            }\n        }\n        return flag;\n    }\n}\n```\n\n- - -\nTHE END\n","slug":"2016-08-11-LeetCodeRansomNote","published":1,"updated":"2018-03-14T06:12:40.668Z","comments":1,"photos":[],"link":"","_id":"cjgywsb950001uro5ypire5j0","content":"<h3 id=\"eetCode-383-Ransom-Note\"><a href=\"#eetCode-383-Ransom-Note\" class=\"headerlink\" title=\"eetCode:383. Ransom Note\"></a><a href=\"https://leetcode.com/problems/ransom-note/\" target=\"_blank\" rel=\"external\">eetCode:383. Ransom Note</a></h3><blockquote>\n<p>Given an arbitrary ransom note string and another string containing letters from all the magazines,write a function that will return true if the ransom note can be constructed from the magazines ;otherwise,it will return false.<br>Each letter in the magazine string can only be used once in your ransom note.<br>Note:<br>You may assume that both strings contain only lowercase letters.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>题目的意思就是给你两个字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成，第二个字符里的每个字符只能使用一次。（假设只包含小写字母）</p>\n<ol>\n<li><p>那么首先想到的就是穷举法了，两层遍历即可，也就是下面的 <code>canConstruct</code> 方法了。</p>\n</li>\n<li><p>再思考一下，有个小技巧。这里只要判断两个字符串中每个字母出现的次数即可解决问题。对于某个字母来说，如果第ransom字符串中出现的次数比magazines中出现的次数要多，很显然就直接返回false了。</p>\n</li>\n</ol>\n<p>看一下 <code>canConstructBetter</code> 方法的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canConstructBetter</span><span class=\"params\">(String ransomNote, String magazine)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ransomNote.equals(magazine) || <span class=\"string\">\"\"</span>.equals(ransomNote)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(magazine) &amp;&amp; !<span class=\"string\">\"\"</span>.equals(ransomNote)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span>[] ransomNoteCharCount = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span>[] magazineCharCount = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; ransomNote.length() ; i++) &#123;</div><div class=\"line\">            ransomNoteCharCount[ransomNote.charAt(i)-<span class=\"string\">'a'</span>]++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; magazine.length() ; i++) &#123;</div><div class=\"line\">            magazineCharCount[magazine.charAt(i)-<span class=\"string\">'a'</span>]++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">26</span> ; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(ransomNoteCharCount[i] &gt; magazineCharCount[i] ) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canConstruct</span><span class=\"params\">(String ransomNote, String magazine)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ransomNote.equals(magazine)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(ransomNote)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        List&lt;Character&gt; ransomNodeChars = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        List&lt;Character&gt; magazineChars = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; ransomNote.length() ; i++) &#123;</div><div class=\"line\">            ransomNodeChars.add(ransomNote.charAt(i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printList(ransomNodeChars);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ; j &lt; magazine.length() ; j++) &#123;</div><div class=\"line\">            magazineChars.add(magazine.charAt(j));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        Character c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = <span class=\"number\">0</span> ; m &lt; ransomNote.length() ; m++) &#123;</div><div class=\"line\">            c = ransomNodeChars.get(m);</div><div class=\"line\">            flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = <span class=\"number\">0</span> ; n &lt; magazineChars.size() ; n++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(magazineChars.get(n) == c) &#123;</div><div class=\"line\">                    flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    magazineChars.remove(n);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (flag == <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> flag;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"eetCode-383-Ransom-Note\"><a href=\"#eetCode-383-Ransom-Note\" class=\"headerlink\" title=\"eetCode:383. Ransom Note\"></a><a href=\"https://leetcode.com/problems/ransom-note/\" target=\"_blank\" rel=\"external\">eetCode:383. Ransom Note</a></h3><blockquote>\n<p>Given an arbitrary ransom note string and another string containing letters from all the magazines,write a function that will return true if the ransom note can be constructed from the magazines ;otherwise,it will return false.<br>Each letter in the magazine string can only be used once in your ransom note.<br>Note:<br>You may assume that both strings contain only lowercase letters.</p>\n</blockquote>","more":"<p>题目的意思就是给你两个字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成，第二个字符里的每个字符只能使用一次。（假设只包含小写字母）</p>\n<ol>\n<li><p>那么首先想到的就是穷举法了，两层遍历即可，也就是下面的 <code>canConstruct</code> 方法了。</p>\n</li>\n<li><p>再思考一下，有个小技巧。这里只要判断两个字符串中每个字母出现的次数即可解决问题。对于某个字母来说，如果第ransom字符串中出现的次数比magazines中出现的次数要多，很显然就直接返回false了。</p>\n</li>\n</ol>\n<p>看一下 <code>canConstructBetter</code> 方法的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canConstructBetter</span><span class=\"params\">(String ransomNote, String magazine)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ransomNote.equals(magazine) || <span class=\"string\">\"\"</span>.equals(ransomNote)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(magazine) &amp;&amp; !<span class=\"string\">\"\"</span>.equals(ransomNote)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span>[] ransomNoteCharCount = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span>[] magazineCharCount = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; ransomNote.length() ; i++) &#123;</div><div class=\"line\">            ransomNoteCharCount[ransomNote.charAt(i)-<span class=\"string\">'a'</span>]++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; magazine.length() ; i++) &#123;</div><div class=\"line\">            magazineCharCount[magazine.charAt(i)-<span class=\"string\">'a'</span>]++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">26</span> ; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(ransomNoteCharCount[i] &gt; magazineCharCount[i] ) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canConstruct</span><span class=\"params\">(String ransomNote, String magazine)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ransomNote.equals(magazine)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(ransomNote)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        List&lt;Character&gt; ransomNodeChars = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        List&lt;Character&gt; magazineChars = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; ransomNote.length() ; i++) &#123;</div><div class=\"line\">            ransomNodeChars.add(ransomNote.charAt(i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printList(ransomNodeChars);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ; j &lt; magazine.length() ; j++) &#123;</div><div class=\"line\">            magazineChars.add(magazine.charAt(j));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        Character c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = <span class=\"number\">0</span> ; m &lt; ransomNote.length() ; m++) &#123;</div><div class=\"line\">            c = ransomNodeChars.get(m);</div><div class=\"line\">            flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = <span class=\"number\">0</span> ; n &lt; magazineChars.size() ; n++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(magazineChars.get(n) == c) &#123;</div><div class=\"line\">                    flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    magazineChars.remove(n);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (flag == <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> flag;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END</p>"},{"date":"2016-08-09T16:00:00.000Z","title":"LeetCode:382. Linked List Random Node","layout":"default","_content":"\n### [LeetCode:382. Linked List Random Node](https://leetcode.com/problems/linked-list-random-node/)\n\n> Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\nFollow up:\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\n\n<!--more-->\n\n题目的意思就是给你一个链表，要你从链表中取出一个值，并且保证取到每个元素的概率都是相等的。还要思考如果链表长度极其大，咋办。能不能不使用额外的空间就能达到目的。\n\n一开始我的想法就是直接遍历一次拿到链表的长度，再生成一个随机值，拿到这个值对应位置的元素即可。但是我觉得这种解法完全达不到Medium的难度啊。看了讨论学又到一个新词：`蓄水池抽样算法`。\n\n蓄水池抽样算法的结论就是：在N（N不确定）个元素中取出K个元素的概率就是 K/N。这里我们令K等于1，就可以用来解上面的这道题目了。Java代码实现：\n\n```java\nimport java.util.Random;\npublic class Solution {\n\n    private Random mRandom;\n    private ListNode head;\n    public Solution(ListNode head) {\n        this.head=head;\n    }\n\n    /**\n     *蓄水池抽样算法\n     */\n    public int getRandom() {\n        mRandom=new Random();\n        int pos = 1;\n        ListNode node = head;\n        ListNode res = head;\n         while(node != null) {\n            //一直取最末尾的一个数\n            if (mRandom.nextInt(pos) == (pos-1)) {\n                res = node;//此处不可直接return。取第一个值的时候概率是百分之百，直接返回。\n            }\n            pos = pos+1;\n            node = node.next;\n        }\n\n        return res == null ? head.val : res.val;\n    }\n\n    /**\n     *先获取长度再取随机值的方法\n     */\n    public int getRandomXX() {\n        int randomVaule = mRandom.nextInt(this.getLength());\n        int pos = 0;\n        ListNode res = head;\n        while(res != null) {\n            if(pos == randomVaule) {\n                return res.val;\n            }\n             res = res.next;\n            pos++;\n        }\n        return res.val;\n    }\n\n    public int getLength() {\n        int len = 0;\n        ListNode node = head;\n        while(node != null) {\n            len++;\n            node = node.next;\n        }\n        return len;\n    }\n\n}\n```\n\n那么为什么蓄水池抽样算法会保证每个元素被取到的概率是一样的呢？让我们一步一步来验证一下。\n\n我们这里来考察选择最后一个元素的概率。\n\n1. 首先如果只有一个元素的时候，概率是1；\n\n2. 如果有两个元素，取到第二个元素的概率是1/2；\n\n3. 如果有三个元素，要保证每个元素取到的概率都是一样，有两种情况，第一种就是取第三个元素，取到的概率是1/3。但是如果不是取到第三个元素，而是取到第二个呢？那就是下面这种情况 ： 取不到第三个元素的概率 x 取到第二个元素的概率 = (2/3) x (1/2) = 1/3\n\n可以用数学归纳法来证明一下：\n\n假设已经读取n个数，现在保留的数是An，取到An的概率为(1/n)。\n\n```\n对于第n+1个数An+1，以1/(n+1)的概率取An+1，否则仍然取An。依次类推，可以保证取到数据的随机性。\n\n数学归纳法证明如下：\n\n    当n=1时，显然，取A1。取A1的概率为1/1。\n\n    假设当n=Max时，取到的数据AMax。取AMax的概率为1/Max。\n\n    当n=Max+1时，以1/(Max+1)的概率取AMax+1，否则仍然取AMax。\n\n　　　　(1)如果取AMax+1，则概率为1/(Max+1)；\n\n　　　　(2)如果不取AMax+1而仍然取AMax，则概率为(1/Max)*(Max/(Max+1))=1/(Max+1)\n\n所以，对于之后的第n+1个数An+1，以1/(n+1)的概率取An+1，否则仍然取An。依次类推，可以保证取到数据的随机性。\n```\n\n- - -\nTHE END.\n","source":"_posts/2016-08-10-LeetCodeLinkedListRandomNode.md","raw":"---\ndate: 2016-08-10\ntitle: LeetCode:382. Linked List Random Node\ntags: LeetCode\ncategory: Alogrithm\nlayout: default\n---\n\n### [LeetCode:382. Linked List Random Node](https://leetcode.com/problems/linked-list-random-node/)\n\n> Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\nFollow up:\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\n\n<!--more-->\n\n题目的意思就是给你一个链表，要你从链表中取出一个值，并且保证取到每个元素的概率都是相等的。还要思考如果链表长度极其大，咋办。能不能不使用额外的空间就能达到目的。\n\n一开始我的想法就是直接遍历一次拿到链表的长度，再生成一个随机值，拿到这个值对应位置的元素即可。但是我觉得这种解法完全达不到Medium的难度啊。看了讨论学又到一个新词：`蓄水池抽样算法`。\n\n蓄水池抽样算法的结论就是：在N（N不确定）个元素中取出K个元素的概率就是 K/N。这里我们令K等于1，就可以用来解上面的这道题目了。Java代码实现：\n\n```java\nimport java.util.Random;\npublic class Solution {\n\n    private Random mRandom;\n    private ListNode head;\n    public Solution(ListNode head) {\n        this.head=head;\n    }\n\n    /**\n     *蓄水池抽样算法\n     */\n    public int getRandom() {\n        mRandom=new Random();\n        int pos = 1;\n        ListNode node = head;\n        ListNode res = head;\n         while(node != null) {\n            //一直取最末尾的一个数\n            if (mRandom.nextInt(pos) == (pos-1)) {\n                res = node;//此处不可直接return。取第一个值的时候概率是百分之百，直接返回。\n            }\n            pos = pos+1;\n            node = node.next;\n        }\n\n        return res == null ? head.val : res.val;\n    }\n\n    /**\n     *先获取长度再取随机值的方法\n     */\n    public int getRandomXX() {\n        int randomVaule = mRandom.nextInt(this.getLength());\n        int pos = 0;\n        ListNode res = head;\n        while(res != null) {\n            if(pos == randomVaule) {\n                return res.val;\n            }\n             res = res.next;\n            pos++;\n        }\n        return res.val;\n    }\n\n    public int getLength() {\n        int len = 0;\n        ListNode node = head;\n        while(node != null) {\n            len++;\n            node = node.next;\n        }\n        return len;\n    }\n\n}\n```\n\n那么为什么蓄水池抽样算法会保证每个元素被取到的概率是一样的呢？让我们一步一步来验证一下。\n\n我们这里来考察选择最后一个元素的概率。\n\n1. 首先如果只有一个元素的时候，概率是1；\n\n2. 如果有两个元素，取到第二个元素的概率是1/2；\n\n3. 如果有三个元素，要保证每个元素取到的概率都是一样，有两种情况，第一种就是取第三个元素，取到的概率是1/3。但是如果不是取到第三个元素，而是取到第二个呢？那就是下面这种情况 ： 取不到第三个元素的概率 x 取到第二个元素的概率 = (2/3) x (1/2) = 1/3\n\n可以用数学归纳法来证明一下：\n\n假设已经读取n个数，现在保留的数是An，取到An的概率为(1/n)。\n\n```\n对于第n+1个数An+1，以1/(n+1)的概率取An+1，否则仍然取An。依次类推，可以保证取到数据的随机性。\n\n数学归纳法证明如下：\n\n    当n=1时，显然，取A1。取A1的概率为1/1。\n\n    假设当n=Max时，取到的数据AMax。取AMax的概率为1/Max。\n\n    当n=Max+1时，以1/(Max+1)的概率取AMax+1，否则仍然取AMax。\n\n　　　　(1)如果取AMax+1，则概率为1/(Max+1)；\n\n　　　　(2)如果不取AMax+1而仍然取AMax，则概率为(1/Max)*(Max/(Max+1))=1/(Max+1)\n\n所以，对于之后的第n+1个数An+1，以1/(n+1)的概率取An+1，否则仍然取An。依次类推，可以保证取到数据的随机性。\n```\n\n- - -\nTHE END.\n","slug":"2016-08-10-LeetCodeLinkedListRandomNode","published":1,"updated":"2018-03-14T06:12:40.667Z","comments":1,"photos":[],"link":"","_id":"cjgywsb990004uro55il3ccvj","content":"<h3 id=\"LeetCode-382-Linked-List-Random-Node\"><a href=\"#LeetCode-382-Linked-List-Random-Node\" class=\"headerlink\" title=\"LeetCode:382. Linked List Random Node\"></a><a href=\"https://leetcode.com/problems/linked-list-random-node/\" target=\"_blank\" rel=\"external\">LeetCode:382. Linked List Random Node</a></h3><blockquote>\n<p>Given a singly linked list, return a random node’s value from the linked list. Each node must have the same probability of being chosen.<br>Follow up:<br>What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>题目的意思就是给你一个链表，要你从链表中取出一个值，并且保证取到每个元素的概率都是相等的。还要思考如果链表长度极其大，咋办。能不能不使用额外的空间就能达到目的。</p>\n<p>一开始我的想法就是直接遍历一次拿到链表的长度，再生成一个随机值，拿到这个值对应位置的元素即可。但是我觉得这种解法完全达不到Medium的难度啊。看了讨论学又到一个新词：<code>蓄水池抽样算法</code>。</p>\n<p>蓄水池抽样算法的结论就是：在N（N不确定）个元素中取出K个元素的概率就是 K/N。这里我们令K等于1，就可以用来解上面的这道题目了。Java代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Random mRandom;</div><div class=\"line\">    <span class=\"keyword\">private</span> ListNode head;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Solution</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.head=head;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     *蓄水池抽样算法</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandom</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mRandom=<span class=\"keyword\">new</span> Random();</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">1</span>;</div><div class=\"line\">        ListNode node = head;</div><div class=\"line\">        ListNode res = head;</div><div class=\"line\">         <span class=\"keyword\">while</span>(node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//一直取最末尾的一个数</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mRandom.nextInt(pos) == (pos-<span class=\"number\">1</span>)) &#123;</div><div class=\"line\">                res = node;<span class=\"comment\">//此处不可直接return。取第一个值的时候概率是百分之百，直接返回。</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            pos = pos+<span class=\"number\">1</span>;</div><div class=\"line\">            node = node.next;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> res == <span class=\"keyword\">null</span> ? head.val : res.val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     *先获取长度再取随机值的方法</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomXX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> randomVaule = mRandom.nextInt(<span class=\"keyword\">this</span>.getLength());</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</div><div class=\"line\">        ListNode res = head;</div><div class=\"line\">        <span class=\"keyword\">while</span>(res != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(pos == randomVaule) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> res.val;</div><div class=\"line\">            &#125;</div><div class=\"line\">             res = res.next;</div><div class=\"line\">            pos++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> res.val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">        ListNode node = head;</div><div class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            len++;</div><div class=\"line\">            node = node.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> len;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么为什么蓄水池抽样算法会保证每个元素被取到的概率是一样的呢？让我们一步一步来验证一下。</p>\n<p>我们这里来考察选择最后一个元素的概率。</p>\n<ol>\n<li><p>首先如果只有一个元素的时候，概率是1；</p>\n</li>\n<li><p>如果有两个元素，取到第二个元素的概率是1/2；</p>\n</li>\n<li><p>如果有三个元素，要保证每个元素取到的概率都是一样，有两种情况，第一种就是取第三个元素，取到的概率是1/3。但是如果不是取到第三个元素，而是取到第二个呢？那就是下面这种情况 ： 取不到第三个元素的概率 x 取到第二个元素的概率 = (2/3) x (1/2) = 1/3</p>\n</li>\n</ol>\n<p>可以用数学归纳法来证明一下：</p>\n<p>假设已经读取n个数，现在保留的数是An，取到An的概率为(1/n)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">对于第n+1个数An+1，以1/(n+1)的概率取An+1，否则仍然取An。依次类推，可以保证取到数据的随机性。</div><div class=\"line\"></div><div class=\"line\">数学归纳法证明如下：</div><div class=\"line\"></div><div class=\"line\">    当n=1时，显然，取A1。取A1的概率为1/1。</div><div class=\"line\"></div><div class=\"line\">    假设当n=Max时，取到的数据AMax。取AMax的概率为1/Max。</div><div class=\"line\"></div><div class=\"line\">    当n=Max+1时，以1/(Max+1)的概率取AMax+1，否则仍然取AMax。</div><div class=\"line\"></div><div class=\"line\">　　　　(1)如果取AMax+1，则概率为1/(Max+1)；</div><div class=\"line\"></div><div class=\"line\">　　　　(2)如果不取AMax+1而仍然取AMax，则概率为(1/Max)*(Max/(Max+1))=1/(Max+1)</div><div class=\"line\"></div><div class=\"line\">所以，对于之后的第n+1个数An+1，以1/(n+1)的概率取An+1，否则仍然取An。依次类推，可以保证取到数据的随机性。</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"LeetCode-382-Linked-List-Random-Node\"><a href=\"#LeetCode-382-Linked-List-Random-Node\" class=\"headerlink\" title=\"LeetCode:382. Linked List Random Node\"></a><a href=\"https://leetcode.com/problems/linked-list-random-node/\" target=\"_blank\" rel=\"external\">LeetCode:382. Linked List Random Node</a></h3><blockquote>\n<p>Given a singly linked list, return a random node’s value from the linked list. Each node must have the same probability of being chosen.<br>Follow up:<br>What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?</p>\n</blockquote>","more":"<p>题目的意思就是给你一个链表，要你从链表中取出一个值，并且保证取到每个元素的概率都是相等的。还要思考如果链表长度极其大，咋办。能不能不使用额外的空间就能达到目的。</p>\n<p>一开始我的想法就是直接遍历一次拿到链表的长度，再生成一个随机值，拿到这个值对应位置的元素即可。但是我觉得这种解法完全达不到Medium的难度啊。看了讨论学又到一个新词：<code>蓄水池抽样算法</code>。</p>\n<p>蓄水池抽样算法的结论就是：在N（N不确定）个元素中取出K个元素的概率就是 K/N。这里我们令K等于1，就可以用来解上面的这道题目了。Java代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Random mRandom;</div><div class=\"line\">    <span class=\"keyword\">private</span> ListNode head;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Solution</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.head=head;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     *蓄水池抽样算法</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandom</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mRandom=<span class=\"keyword\">new</span> Random();</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">1</span>;</div><div class=\"line\">        ListNode node = head;</div><div class=\"line\">        ListNode res = head;</div><div class=\"line\">         <span class=\"keyword\">while</span>(node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//一直取最末尾的一个数</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mRandom.nextInt(pos) == (pos-<span class=\"number\">1</span>)) &#123;</div><div class=\"line\">                res = node;<span class=\"comment\">//此处不可直接return。取第一个值的时候概率是百分之百，直接返回。</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            pos = pos+<span class=\"number\">1</span>;</div><div class=\"line\">            node = node.next;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> res == <span class=\"keyword\">null</span> ? head.val : res.val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     *先获取长度再取随机值的方法</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomXX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> randomVaule = mRandom.nextInt(<span class=\"keyword\">this</span>.getLength());</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</div><div class=\"line\">        ListNode res = head;</div><div class=\"line\">        <span class=\"keyword\">while</span>(res != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(pos == randomVaule) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> res.val;</div><div class=\"line\">            &#125;</div><div class=\"line\">             res = res.next;</div><div class=\"line\">            pos++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> res.val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">        ListNode node = head;</div><div class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            len++;</div><div class=\"line\">            node = node.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> len;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么为什么蓄水池抽样算法会保证每个元素被取到的概率是一样的呢？让我们一步一步来验证一下。</p>\n<p>我们这里来考察选择最后一个元素的概率。</p>\n<ol>\n<li><p>首先如果只有一个元素的时候，概率是1；</p>\n</li>\n<li><p>如果有两个元素，取到第二个元素的概率是1/2；</p>\n</li>\n<li><p>如果有三个元素，要保证每个元素取到的概率都是一样，有两种情况，第一种就是取第三个元素，取到的概率是1/3。但是如果不是取到第三个元素，而是取到第二个呢？那就是下面这种情况 ： 取不到第三个元素的概率 x 取到第二个元素的概率 = (2/3) x (1/2) = 1/3</p>\n</li>\n</ol>\n<p>可以用数学归纳法来证明一下：</p>\n<p>假设已经读取n个数，现在保留的数是An，取到An的概率为(1/n)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">对于第n+1个数An+1，以1/(n+1)的概率取An+1，否则仍然取An。依次类推，可以保证取到数据的随机性。</div><div class=\"line\"></div><div class=\"line\">数学归纳法证明如下：</div><div class=\"line\"></div><div class=\"line\">    当n=1时，显然，取A1。取A1的概率为1/1。</div><div class=\"line\"></div><div class=\"line\">    假设当n=Max时，取到的数据AMax。取AMax的概率为1/Max。</div><div class=\"line\"></div><div class=\"line\">    当n=Max+1时，以1/(Max+1)的概率取AMax+1，否则仍然取AMax。</div><div class=\"line\"></div><div class=\"line\">　　　　(1)如果取AMax+1，则概率为1/(Max+1)；</div><div class=\"line\"></div><div class=\"line\">　　　　(2)如果不取AMax+1而仍然取AMax，则概率为(1/Max)*(Max/(Max+1))=1/(Max+1)</div><div class=\"line\"></div><div class=\"line\">所以，对于之后的第n+1个数An+1，以1/(n+1)的概率取An+1，否则仍然取An。依次类推，可以保证取到数据的随机性。</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>"},{"date":"2016-08-11T16:00:00.000Z","title":"LeetCode:384. Shuffle an Array","layout":"default","_content":"\n### [LeetCode:384. Shuffle an Array](https://leetcode.com/problems/shuffle-an-array/)\n\n> Shuffle a set of numbers without duplicates.\n\n<!--more-->\n\n洗牌算法，题目的意思就是交换数组元素的位置，并且保证每种情况出现的概率是一样大。\n\n一开始的思路呢，就是生成一个随机数(0到数组长度之间)，把这个随机数对应位置元素插入到一个等长的新数组中，如果生成的随机数已经出现过，则继续生成。直到新的数组放满。\n\n后来呢，发现重复生成随机数会导致Time Limit Exceeded。值得再考虑考虑了。怎样才能保证生成的随机数即使重复了也有效呢。\n\n> 首先在数组末尾设置一个标兵。每次生成的随机数（0到标兵位置之间）,把对应位置的元素和数组的标兵元素交换，标兵再向前移动一位。\n\n这样就保证了即使随机数重复，对应位置的元素由于之前已经交换过，所以实际位置的元素并不会重复。而标兵位置之后的元素都是已经出现过的不会再出现了。看一下Java代码实现：\n\n```java\nimport java.util.Random;\npublic class Solution {\n\n    private int[] mNums;\n    public Solution(int[] nums) {\n        mNums = nums;\n    }\n\n    public int[] reset() {\n\n        return mNums;\n    }\n\n    public int[] shuffle() {\n        int len = mNums.length;\n        int pos = len-1;\n        int[] arr = new int[len];\n        for(int i = 0 ; i < len;i++) {\n            arr[i] = mNums[i];\n        }\n        Random random = new Random();\n        while(pos > 0) {\n             int ranNum =  random.nextInt(pos+1);\n             int temp = arr[pos];\n             arr[pos] = arr[ranNum];\n             arr[ranNum] = temp;\n             pos--;\n        }\n        return arr;\n    }\n}\n\n```\n- - -\nTHE END.\n","source":"_posts/2016-08-12-LeetCodeShuffleArray.md","raw":"---\ndate: 2016-08-12\ntitle: LeetCode:384. Shuffle an Array\ntags: LeetCode\ncategory: Alogrithm\nlayout: default\n---\n\n### [LeetCode:384. Shuffle an Array](https://leetcode.com/problems/shuffle-an-array/)\n\n> Shuffle a set of numbers without duplicates.\n\n<!--more-->\n\n洗牌算法，题目的意思就是交换数组元素的位置，并且保证每种情况出现的概率是一样大。\n\n一开始的思路呢，就是生成一个随机数(0到数组长度之间)，把这个随机数对应位置元素插入到一个等长的新数组中，如果生成的随机数已经出现过，则继续生成。直到新的数组放满。\n\n后来呢，发现重复生成随机数会导致Time Limit Exceeded。值得再考虑考虑了。怎样才能保证生成的随机数即使重复了也有效呢。\n\n> 首先在数组末尾设置一个标兵。每次生成的随机数（0到标兵位置之间）,把对应位置的元素和数组的标兵元素交换，标兵再向前移动一位。\n\n这样就保证了即使随机数重复，对应位置的元素由于之前已经交换过，所以实际位置的元素并不会重复。而标兵位置之后的元素都是已经出现过的不会再出现了。看一下Java代码实现：\n\n```java\nimport java.util.Random;\npublic class Solution {\n\n    private int[] mNums;\n    public Solution(int[] nums) {\n        mNums = nums;\n    }\n\n    public int[] reset() {\n\n        return mNums;\n    }\n\n    public int[] shuffle() {\n        int len = mNums.length;\n        int pos = len-1;\n        int[] arr = new int[len];\n        for(int i = 0 ; i < len;i++) {\n            arr[i] = mNums[i];\n        }\n        Random random = new Random();\n        while(pos > 0) {\n             int ranNum =  random.nextInt(pos+1);\n             int temp = arr[pos];\n             arr[pos] = arr[ranNum];\n             arr[ranNum] = temp;\n             pos--;\n        }\n        return arr;\n    }\n}\n\n```\n- - -\nTHE END.\n","slug":"2016-08-12-LeetCodeShuffleArray","published":1,"updated":"2018-03-14T06:12:40.668Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9a0005uro5fou54fig","content":"<h3 id=\"LeetCode-384-Shuffle-an-Array\"><a href=\"#LeetCode-384-Shuffle-an-Array\" class=\"headerlink\" title=\"LeetCode:384. Shuffle an Array\"></a><a href=\"https://leetcode.com/problems/shuffle-an-array/\" target=\"_blank\" rel=\"external\">LeetCode:384. Shuffle an Array</a></h3><blockquote>\n<p>Shuffle a set of numbers without duplicates.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>洗牌算法，题目的意思就是交换数组元素的位置，并且保证每种情况出现的概率是一样大。</p>\n<p>一开始的思路呢，就是生成一个随机数(0到数组长度之间)，把这个随机数对应位置元素插入到一个等长的新数组中，如果生成的随机数已经出现过，则继续生成。直到新的数组放满。</p>\n<p>后来呢，发现重复生成随机数会导致Time Limit Exceeded。值得再考虑考虑了。怎样才能保证生成的随机数即使重复了也有效呢。</p>\n<blockquote>\n<p>首先在数组末尾设置一个标兵。每次生成的随机数（0到标兵位置之间）,把对应位置的元素和数组的标兵元素交换，标兵再向前移动一位。</p>\n</blockquote>\n<p>这样就保证了即使随机数重复，对应位置的元素由于之前已经交换过，所以实际位置的元素并不会重复。而标兵位置之后的元素都是已经出现过的不会再出现了。看一下Java代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] mNums;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</div><div class=\"line\">        mNums = nums;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] reset() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> mNums;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] shuffle() &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> len = mNums.length;</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = len-<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; len;i++) &#123;</div><div class=\"line\">            arr[i] = mNums[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">        <span class=\"keyword\">while</span>(pos &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">int</span> ranNum =  random.nextInt(pos+<span class=\"number\">1</span>);</div><div class=\"line\">             <span class=\"keyword\">int</span> temp = arr[pos];</div><div class=\"line\">             arr[pos] = arr[ranNum];</div><div class=\"line\">             arr[ranNum] = temp;</div><div class=\"line\">             pos--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"LeetCode-384-Shuffle-an-Array\"><a href=\"#LeetCode-384-Shuffle-an-Array\" class=\"headerlink\" title=\"LeetCode:384. Shuffle an Array\"></a><a href=\"https://leetcode.com/problems/shuffle-an-array/\" target=\"_blank\" rel=\"external\">LeetCode:384. Shuffle an Array</a></h3><blockquote>\n<p>Shuffle a set of numbers without duplicates.</p>\n</blockquote>","more":"<p>洗牌算法，题目的意思就是交换数组元素的位置，并且保证每种情况出现的概率是一样大。</p>\n<p>一开始的思路呢，就是生成一个随机数(0到数组长度之间)，把这个随机数对应位置元素插入到一个等长的新数组中，如果生成的随机数已经出现过，则继续生成。直到新的数组放满。</p>\n<p>后来呢，发现重复生成随机数会导致Time Limit Exceeded。值得再考虑考虑了。怎样才能保证生成的随机数即使重复了也有效呢。</p>\n<blockquote>\n<p>首先在数组末尾设置一个标兵。每次生成的随机数（0到标兵位置之间）,把对应位置的元素和数组的标兵元素交换，标兵再向前移动一位。</p>\n</blockquote>\n<p>这样就保证了即使随机数重复，对应位置的元素由于之前已经交换过，所以实际位置的元素并不会重复。而标兵位置之后的元素都是已经出现过的不会再出现了。看一下Java代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] mNums;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Solution</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</div><div class=\"line\">        mNums = nums;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] reset() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> mNums;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] shuffle() &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> len = mNums.length;</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = len-<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; len;i++) &#123;</div><div class=\"line\">            arr[i] = mNums[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">        <span class=\"keyword\">while</span>(pos &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">int</span> ranNum =  random.nextInt(pos+<span class=\"number\">1</span>);</div><div class=\"line\">             <span class=\"keyword\">int</span> temp = arr[pos];</div><div class=\"line\">             arr[pos] = arr[ranNum];</div><div class=\"line\">             arr[ranNum] = temp;</div><div class=\"line\">             pos--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>"},{"date":"2016-08-11T16:00:00.000Z","title":"LeetCode:381. Insert Delete GetRandom O(1)","layout":"default","_content":"\n### [LeetCode:381. Insert Delete GetRandom O(1) - Duplicates allowed](https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/)\n\n>Design a data structure that supports all following operations in average O(1) time.\nNote: Duplicate elements are allowed.\ninsert(val): Inserts an item val to the collection.\nremove(val): Removes an item val from the collection if present.\ngetRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.\n\n<!--more-->\n\n题目的意思是要你设计一个数据结构，使得它的插入和删除时间复杂度都是O(1)，并且能够随机返回一个元素，而返回这个元素的概率也是和这个元素的个数是线性相关的。允许插入相同的元素。\n\n说实话一看到这个题目我是没有思路的。我想这总不至于让你设计一个和HashMap一样的数据结构吧。看了一下别人的解法，确实不至于。要说的是这个数据结构内部可以使用HashMap，而不必自己从0开始写一个。\n\n来说一下大概的思路吧，这个数据结构暂且就叫 `RandomizedCollection` ，它有一个 Map<Integer, List<Integer>> 类型的成员变量 `data` ，用于保存当前已经插入的元素。每次插入元素val，首先判断data里是否存在val这个key，如果不存在，则首先插入key为val，值为ArrayList对象，再将val保存到对应的ArrayList中去，这样就保证来可以插入重复的元素，并且时间复杂度为O(1)。同理，如果要删除一个元素val，则首先找到以val为key的ArrayList，再从其中移除一个val。\n\n而对于随机返回一个元素，我们可以用一个List<Integer>类型的成员变量 `list` 来保存每个val，用mSize来保存所有元素的总个数，生成一个介于0到mSize之间的随机数 random 。由于List可以保存重复的元素，所以可以直接通过list.get(random)来返回一个随机元素。看一下Java代码实现：\n\n```java\npublic class RandomizedCollection {\n    /**\n    * data用来保存实际的数据，key是插入的值，value是和key相同的值所组成的list\n    */\n    private Map<Integer, List<Integer>> data = new HashMap<Integer, List<Integer>>();\n    /**\n    * list 用来保存所有的元素，在返回随机元素时减少时间。\n    */\n    private List<Integer> list = new ArrayList<Integer>();\n    private Random mRandom = new Random();\n    private int mSize = 0;\n\n    public RandomizedCollection() {\n    }\n\n    public boolean insert(int val) {\n        if (!data.containsKey(val)) {\n            data.put(val, new ArrayList<Integer>());\n        }\n        data.get(val).add(val);\n        list.add(val);\n        mSize++;\n        return true;\n    }\n\n    public boolean remove(int val) {\n        if (data.containsKey(val)) {\n            if (data.get(val).size() > 0) {\n                data.get(val).remove(Integer.valueOf(val));\n                list.remove(Integer.valueOf(val));\n                mSize--;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public int getRandom() {\n        int random = mRandom.nextInt(mSize);\n        return list.get(random);\n    }\n}\n```\n\n- - -\nTHE END.\n","source":"_posts/2016-08-12-LeetCodeInsertDeleteGetRandom.md","raw":"---\ndate: 2016-08-12\ntitle: LeetCode:381. Insert Delete GetRandom O(1)\ntags: LeetCode\ncategory: Alogrithm\nlayout: default\n---\n\n### [LeetCode:381. Insert Delete GetRandom O(1) - Duplicates allowed](https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/)\n\n>Design a data structure that supports all following operations in average O(1) time.\nNote: Duplicate elements are allowed.\ninsert(val): Inserts an item val to the collection.\nremove(val): Removes an item val from the collection if present.\ngetRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.\n\n<!--more-->\n\n题目的意思是要你设计一个数据结构，使得它的插入和删除时间复杂度都是O(1)，并且能够随机返回一个元素，而返回这个元素的概率也是和这个元素的个数是线性相关的。允许插入相同的元素。\n\n说实话一看到这个题目我是没有思路的。我想这总不至于让你设计一个和HashMap一样的数据结构吧。看了一下别人的解法，确实不至于。要说的是这个数据结构内部可以使用HashMap，而不必自己从0开始写一个。\n\n来说一下大概的思路吧，这个数据结构暂且就叫 `RandomizedCollection` ，它有一个 Map<Integer, List<Integer>> 类型的成员变量 `data` ，用于保存当前已经插入的元素。每次插入元素val，首先判断data里是否存在val这个key，如果不存在，则首先插入key为val，值为ArrayList对象，再将val保存到对应的ArrayList中去，这样就保证来可以插入重复的元素，并且时间复杂度为O(1)。同理，如果要删除一个元素val，则首先找到以val为key的ArrayList，再从其中移除一个val。\n\n而对于随机返回一个元素，我们可以用一个List<Integer>类型的成员变量 `list` 来保存每个val，用mSize来保存所有元素的总个数，生成一个介于0到mSize之间的随机数 random 。由于List可以保存重复的元素，所以可以直接通过list.get(random)来返回一个随机元素。看一下Java代码实现：\n\n```java\npublic class RandomizedCollection {\n    /**\n    * data用来保存实际的数据，key是插入的值，value是和key相同的值所组成的list\n    */\n    private Map<Integer, List<Integer>> data = new HashMap<Integer, List<Integer>>();\n    /**\n    * list 用来保存所有的元素，在返回随机元素时减少时间。\n    */\n    private List<Integer> list = new ArrayList<Integer>();\n    private Random mRandom = new Random();\n    private int mSize = 0;\n\n    public RandomizedCollection() {\n    }\n\n    public boolean insert(int val) {\n        if (!data.containsKey(val)) {\n            data.put(val, new ArrayList<Integer>());\n        }\n        data.get(val).add(val);\n        list.add(val);\n        mSize++;\n        return true;\n    }\n\n    public boolean remove(int val) {\n        if (data.containsKey(val)) {\n            if (data.get(val).size() > 0) {\n                data.get(val).remove(Integer.valueOf(val));\n                list.remove(Integer.valueOf(val));\n                mSize--;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public int getRandom() {\n        int random = mRandom.nextInt(mSize);\n        return list.get(random);\n    }\n}\n```\n\n- - -\nTHE END.\n","slug":"2016-08-12-LeetCodeInsertDeleteGetRandom","published":1,"updated":"2018-03-14T06:12:40.668Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9b0006uro5fcxrz7hl","content":"<h3 id=\"LeetCode-381-Insert-Delete-GetRandom-O-1-Duplicates-allowed\"><a href=\"#LeetCode-381-Insert-Delete-GetRandom-O-1-Duplicates-allowed\" class=\"headerlink\" title=\"LeetCode:381. Insert Delete GetRandom O(1) - Duplicates allowed\"></a><a href=\"https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/\" target=\"_blank\" rel=\"external\">LeetCode:381. Insert Delete GetRandom O(1) - Duplicates allowed</a></h3><blockquote>\n<p>Design a data structure that supports all following operations in average O(1) time.<br>Note: Duplicate elements are allowed.<br>insert(val): Inserts an item val to the collection.<br>remove(val): Removes an item val from the collection if present.<br>getRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>题目的意思是要你设计一个数据结构，使得它的插入和删除时间复杂度都是O(1)，并且能够随机返回一个元素，而返回这个元素的概率也是和这个元素的个数是线性相关的。允许插入相同的元素。</p>\n<p>说实话一看到这个题目我是没有思路的。我想这总不至于让你设计一个和HashMap一样的数据结构吧。看了一下别人的解法，确实不至于。要说的是这个数据结构内部可以使用HashMap，而不必自己从0开始写一个。</p>\n<p>来说一下大概的思路吧，这个数据结构暂且就叫 <code>RandomizedCollection</code> ，它有一个 Map<integer, list<integer=\"\">&gt; 类型的成员变量 <code>data</code> ，用于保存当前已经插入的元素。每次插入元素val，首先判断data里是否存在val这个key，如果不存在，则首先插入key为val，值为ArrayList对象，再将val保存到对应的ArrayList中去，这样就保证来可以插入重复的元素，并且时间复杂度为O(1)。同理，如果要删除一个元素val，则首先找到以val为key的ArrayList，再从其中移除一个val。</integer,></p>\n<p>而对于随机返回一个元素，我们可以用一个List<integer>类型的成员变量 <code>list</code> 来保存每个val，用mSize来保存所有元素的总个数，生成一个介于0到mSize之间的随机数 random 。由于List可以保存重复的元素，所以可以直接通过list.get(random)来返回一个随机元素。看一下Java代码实现：</integer></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomizedCollection</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">    * data用来保存实际的数据，key是插入的值，value是和key相同的值所组成的list</span></div><div class=\"line\"><span class=\"comment\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; data = <span class=\"keyword\">new</span> HashMap&lt;Integer, List&lt;Integer&gt;&gt;();</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">    * list 用来保存所有的元素，在返回随机元素时减少时间。</span></div><div class=\"line\"><span class=\"comment\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> Random mRandom = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RandomizedCollection</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!data.containsKey(val)) &#123;</div><div class=\"line\">            data.put(val, <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;());</div><div class=\"line\">        &#125;</div><div class=\"line\">        data.get(val).add(val);</div><div class=\"line\">        list.add(val);</div><div class=\"line\">        mSize++;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (data.containsKey(val)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (data.get(val).size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                data.get(val).remove(Integer.valueOf(val));</div><div class=\"line\">                list.remove(Integer.valueOf(val));</div><div class=\"line\">                mSize--;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandom</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> random = mRandom.nextInt(mSize);</div><div class=\"line\">        <span class=\"keyword\">return</span> list.get(random);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"LeetCode-381-Insert-Delete-GetRandom-O-1-Duplicates-allowed\"><a href=\"#LeetCode-381-Insert-Delete-GetRandom-O-1-Duplicates-allowed\" class=\"headerlink\" title=\"LeetCode:381. Insert Delete GetRandom O(1) - Duplicates allowed\"></a><a href=\"https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/\" target=\"_blank\" rel=\"external\">LeetCode:381. Insert Delete GetRandom O(1) - Duplicates allowed</a></h3><blockquote>\n<p>Design a data structure that supports all following operations in average O(1) time.<br>Note: Duplicate elements are allowed.<br>insert(val): Inserts an item val to the collection.<br>remove(val): Removes an item val from the collection if present.<br>getRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.</p>\n</blockquote>","more":"<p>题目的意思是要你设计一个数据结构，使得它的插入和删除时间复杂度都是O(1)，并且能够随机返回一个元素，而返回这个元素的概率也是和这个元素的个数是线性相关的。允许插入相同的元素。</p>\n<p>说实话一看到这个题目我是没有思路的。我想这总不至于让你设计一个和HashMap一样的数据结构吧。看了一下别人的解法，确实不至于。要说的是这个数据结构内部可以使用HashMap，而不必自己从0开始写一个。</p>\n<p>来说一下大概的思路吧，这个数据结构暂且就叫 <code>RandomizedCollection</code> ，它有一个 Map<integer, list<integer=\"\">&gt; 类型的成员变量 <code>data</code> ，用于保存当前已经插入的元素。每次插入元素val，首先判断data里是否存在val这个key，如果不存在，则首先插入key为val，值为ArrayList对象，再将val保存到对应的ArrayList中去，这样就保证来可以插入重复的元素，并且时间复杂度为O(1)。同理，如果要删除一个元素val，则首先找到以val为key的ArrayList，再从其中移除一个val。</integer,></p>\n<p>而对于随机返回一个元素，我们可以用一个List<integer>类型的成员变量 <code>list</code> 来保存每个val，用mSize来保存所有元素的总个数，生成一个介于0到mSize之间的随机数 random 。由于List可以保存重复的元素，所以可以直接通过list.get(random)来返回一个随机元素。看一下Java代码实现：</integer></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomizedCollection</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">    * data用来保存实际的数据，key是插入的值，value是和key相同的值所组成的list</span></div><div class=\"line\"><span class=\"comment\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; data = <span class=\"keyword\">new</span> HashMap&lt;Integer, List&lt;Integer&gt;&gt;();</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">    * list 用来保存所有的元素，在返回随机元素时减少时间。</span></div><div class=\"line\"><span class=\"comment\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> Random mRandom = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RandomizedCollection</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!data.containsKey(val)) &#123;</div><div class=\"line\">            data.put(val, <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;());</div><div class=\"line\">        &#125;</div><div class=\"line\">        data.get(val).add(val);</div><div class=\"line\">        list.add(val);</div><div class=\"line\">        mSize++;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (data.containsKey(val)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (data.get(val).size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                data.get(val).remove(Integer.valueOf(val));</div><div class=\"line\">                list.remove(Integer.valueOf(val));</div><div class=\"line\">                mSize--;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandom</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> random = mRandom.nextInt(mSize);</div><div class=\"line\">        <span class=\"keyword\">return</span> list.get(random);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>"},{"date":"2016-08-12T16:00:00.000Z","title":"LeetCode:378. Kth Smallest Element in a Sorted Matrix","layout":"default","_content":"\n### [LeetCode:378. Kth Smallest Element in a Sorted Matrix](https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/)\n\n```\nGiven a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\n\nExample:\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\nreturn 13.\n\nNote:You may assume k is always valid, 1 ≤ k ≤ n2.\n```\n<!--more-->\n\n题目的意思呢就是给你一个n x n的矩阵，而这个矩阵的每一行以及每一列的元素大小都是递增（也可以相等）。让你找到第k小的那个元素。值得注意的是第k小的意思并不是绝对第k小。怎么讲呢，比如上面的example中的两个13，它们分别是第7小和第8小。也就是想等的元素也各自算一个k。\n\n拿到手第一个想到的动态规划，不过后来发现题目理解错了，那就快排呗，不过这也达不到hard的level啊。构造一个搜索二叉树？嗯也是可以的，不过代价还是有点大。看了讨论之后发现居然直接可以使用 `PriorityQueue` 来解决。我真是越来越不懂这套路了。\n\n1. 优先队列PriorityQueue的本质是最小堆，每次插入和删除时都会动态更新堆中元素的位置。这就给我们提供了方便的解法了。\n\n2. 后来转念一想，干嘛不直接放到List里面，然后一顿排序。岂不快哉。\n\n看一下Java代码：\n\n```java\npublic class KthSmallest {\n    public int kthSmallest(int[][] matrix, int k) {\n        Comparator<Integer> comparator = new IntegerLengthComparator();\n        PriorityQueue<Integer> queue =\n            new PriorityQueue<Integer>(10, comparator);\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix.length; j++) {\n                queue.add(matrix[i][j]);\n            }\n        }\n        int pos=0;\n        while (queue.size() > 0)\n        {\n            pos++;\n            if (pos == k) {\n                return queue.poll();\n            }\n            queue.poll();\n        }\n        return -1;\n    }\n\n    public int kthSmallestList(int[][] matrix, int k) {\n        Comparator<Integer> comparator = new IntegerLengthComparator();\n        List<Integer> queue = new ArrayList<Integer>();\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix.length; j++) {\n                queue.add(matrix[i][j]);\n            }\n        }\n        Collections.sort(queue,comparator);\n        return queue.get(k-1);\n    }\n\n    public static class IntegerLengthComparator implements Comparator<Integer>\n    {\n        @Override\n        public int compare(Integer x, Integer y)\n        {\n            if (x < y)\n            {\n                return -1;\n            }\n            if (x > y)\n            {\n                return 1;\n            }\n            return 0;\n        }\n    }\n}\n\n```\n- - -\nTHE END.\n","source":"_posts/2016-08-13-LeetCodeKthSmallest.md","raw":"---\ndate: 2016-08-13\ntitle: LeetCode:378. Kth Smallest Element in a Sorted Matrix\ntags: LeetCode\ncategory: Alogrithm\nlayout: default\n---\n\n### [LeetCode:378. Kth Smallest Element in a Sorted Matrix](https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/)\n\n```\nGiven a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\n\nExample:\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\nreturn 13.\n\nNote:You may assume k is always valid, 1 ≤ k ≤ n2.\n```\n<!--more-->\n\n题目的意思呢就是给你一个n x n的矩阵，而这个矩阵的每一行以及每一列的元素大小都是递增（也可以相等）。让你找到第k小的那个元素。值得注意的是第k小的意思并不是绝对第k小。怎么讲呢，比如上面的example中的两个13，它们分别是第7小和第8小。也就是想等的元素也各自算一个k。\n\n拿到手第一个想到的动态规划，不过后来发现题目理解错了，那就快排呗，不过这也达不到hard的level啊。构造一个搜索二叉树？嗯也是可以的，不过代价还是有点大。看了讨论之后发现居然直接可以使用 `PriorityQueue` 来解决。我真是越来越不懂这套路了。\n\n1. 优先队列PriorityQueue的本质是最小堆，每次插入和删除时都会动态更新堆中元素的位置。这就给我们提供了方便的解法了。\n\n2. 后来转念一想，干嘛不直接放到List里面，然后一顿排序。岂不快哉。\n\n看一下Java代码：\n\n```java\npublic class KthSmallest {\n    public int kthSmallest(int[][] matrix, int k) {\n        Comparator<Integer> comparator = new IntegerLengthComparator();\n        PriorityQueue<Integer> queue =\n            new PriorityQueue<Integer>(10, comparator);\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix.length; j++) {\n                queue.add(matrix[i][j]);\n            }\n        }\n        int pos=0;\n        while (queue.size() > 0)\n        {\n            pos++;\n            if (pos == k) {\n                return queue.poll();\n            }\n            queue.poll();\n        }\n        return -1;\n    }\n\n    public int kthSmallestList(int[][] matrix, int k) {\n        Comparator<Integer> comparator = new IntegerLengthComparator();\n        List<Integer> queue = new ArrayList<Integer>();\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix.length; j++) {\n                queue.add(matrix[i][j]);\n            }\n        }\n        Collections.sort(queue,comparator);\n        return queue.get(k-1);\n    }\n\n    public static class IntegerLengthComparator implements Comparator<Integer>\n    {\n        @Override\n        public int compare(Integer x, Integer y)\n        {\n            if (x < y)\n            {\n                return -1;\n            }\n            if (x > y)\n            {\n                return 1;\n            }\n            return 0;\n        }\n    }\n}\n\n```\n- - -\nTHE END.\n","slug":"2016-08-13-LeetCodeKthSmallest","published":1,"updated":"2018-03-14T06:12:40.669Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9c000auro576zsmeis","content":"<h3 id=\"LeetCode-378-Kth-Smallest-Element-in-a-Sorted-Matrix\"><a href=\"#LeetCode-378-Kth-Smallest-Element-in-a-Sorted-Matrix\" class=\"headerlink\" title=\"LeetCode:378. Kth Smallest Element in a Sorted Matrix\"></a><a href=\"https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/\" target=\"_blank\" rel=\"external\">LeetCode:378. Kth Smallest Element in a Sorted Matrix</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</div><div class=\"line\">Note that it is the kth smallest element in the sorted order, not the kth distinct element.</div><div class=\"line\"></div><div class=\"line\">Example:</div><div class=\"line\">matrix = [</div><div class=\"line\">   [ 1,  5,  9],</div><div class=\"line\">   [10, 11, 13],</div><div class=\"line\">   [12, 13, 15]</div><div class=\"line\">],</div><div class=\"line\">k = 8,</div><div class=\"line\">return 13.</div><div class=\"line\"></div><div class=\"line\">Note:You may assume k is always valid, 1 ≤ k ≤ n2.</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>题目的意思呢就是给你一个n x n的矩阵，而这个矩阵的每一行以及每一列的元素大小都是递增（也可以相等）。让你找到第k小的那个元素。值得注意的是第k小的意思并不是绝对第k小。怎么讲呢，比如上面的example中的两个13，它们分别是第7小和第8小。也就是想等的元素也各自算一个k。</p>\n<p>拿到手第一个想到的动态规划，不过后来发现题目理解错了，那就快排呗，不过这也达不到hard的level啊。构造一个搜索二叉树？嗯也是可以的，不过代价还是有点大。看了讨论之后发现居然直接可以使用 <code>PriorityQueue</code> 来解决。我真是越来越不懂这套路了。</p>\n<ol>\n<li><p>优先队列PriorityQueue的本质是最小堆，每次插入和删除时都会动态更新堆中元素的位置。这就给我们提供了方便的解法了。</p>\n</li>\n<li><p>后来转念一想，干嘛不直接放到List里面，然后一顿排序。岂不快哉。</p>\n</li>\n</ol>\n<p>看一下Java代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KthSmallest</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kthSmallest</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        Comparator&lt;Integer&gt; comparator = <span class=\"keyword\">new</span> IntegerLengthComparator();</div><div class=\"line\">        PriorityQueue&lt;Integer&gt; queue =</div><div class=\"line\">            <span class=\"keyword\">new</span> PriorityQueue&lt;Integer&gt;(<span class=\"number\">10</span>, comparator);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrix.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix.length; j++) &#123;</div><div class=\"line\">                queue.add(matrix[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> pos=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (queue.size() &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            pos++;</div><div class=\"line\">            <span class=\"keyword\">if</span> (pos == k) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> queue.poll();</div><div class=\"line\">            &#125;</div><div class=\"line\">            queue.poll();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kthSmallestList</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        Comparator&lt;Integer&gt; comparator = <span class=\"keyword\">new</span> IntegerLengthComparator();</div><div class=\"line\">        List&lt;Integer&gt; queue = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrix.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix.length; j++) &#123;</div><div class=\"line\">                queue.add(matrix[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Collections.sort(queue,comparator);</div><div class=\"line\">        <span class=\"keyword\">return</span> queue.get(k-<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerLengthComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Integer</span>&gt;</span></div><div class=\"line\"><span class=\"class\">    </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer x, Integer y)</span></span></div><div class=\"line\"><span class=\"function\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (x &lt; y)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (x &gt; y)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"LeetCode-378-Kth-Smallest-Element-in-a-Sorted-Matrix\"><a href=\"#LeetCode-378-Kth-Smallest-Element-in-a-Sorted-Matrix\" class=\"headerlink\" title=\"LeetCode:378. Kth Smallest Element in a Sorted Matrix\"></a><a href=\"https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/\" target=\"_blank\" rel=\"external\">LeetCode:378. Kth Smallest Element in a Sorted Matrix</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</div><div class=\"line\">Note that it is the kth smallest element in the sorted order, not the kth distinct element.</div><div class=\"line\"></div><div class=\"line\">Example:</div><div class=\"line\">matrix = [</div><div class=\"line\">   [ 1,  5,  9],</div><div class=\"line\">   [10, 11, 13],</div><div class=\"line\">   [12, 13, 15]</div><div class=\"line\">],</div><div class=\"line\">k = 8,</div><div class=\"line\">return 13.</div><div class=\"line\"></div><div class=\"line\">Note:You may assume k is always valid, 1 ≤ k ≤ n2.</div></pre></td></tr></table></figure>","more":"<p>题目的意思呢就是给你一个n x n的矩阵，而这个矩阵的每一行以及每一列的元素大小都是递增（也可以相等）。让你找到第k小的那个元素。值得注意的是第k小的意思并不是绝对第k小。怎么讲呢，比如上面的example中的两个13，它们分别是第7小和第8小。也就是想等的元素也各自算一个k。</p>\n<p>拿到手第一个想到的动态规划，不过后来发现题目理解错了，那就快排呗，不过这也达不到hard的level啊。构造一个搜索二叉树？嗯也是可以的，不过代价还是有点大。看了讨论之后发现居然直接可以使用 <code>PriorityQueue</code> 来解决。我真是越来越不懂这套路了。</p>\n<ol>\n<li><p>优先队列PriorityQueue的本质是最小堆，每次插入和删除时都会动态更新堆中元素的位置。这就给我们提供了方便的解法了。</p>\n</li>\n<li><p>后来转念一想，干嘛不直接放到List里面，然后一顿排序。岂不快哉。</p>\n</li>\n</ol>\n<p>看一下Java代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KthSmallest</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kthSmallest</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        Comparator&lt;Integer&gt; comparator = <span class=\"keyword\">new</span> IntegerLengthComparator();</div><div class=\"line\">        PriorityQueue&lt;Integer&gt; queue =</div><div class=\"line\">            <span class=\"keyword\">new</span> PriorityQueue&lt;Integer&gt;(<span class=\"number\">10</span>, comparator);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrix.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix.length; j++) &#123;</div><div class=\"line\">                queue.add(matrix[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> pos=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (queue.size() &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            pos++;</div><div class=\"line\">            <span class=\"keyword\">if</span> (pos == k) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> queue.poll();</div><div class=\"line\">            &#125;</div><div class=\"line\">            queue.poll();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kthSmallestList</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        Comparator&lt;Integer&gt; comparator = <span class=\"keyword\">new</span> IntegerLengthComparator();</div><div class=\"line\">        List&lt;Integer&gt; queue = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrix.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix.length; j++) &#123;</div><div class=\"line\">                queue.add(matrix[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Collections.sort(queue,comparator);</div><div class=\"line\">        <span class=\"keyword\">return</span> queue.get(k-<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerLengthComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Integer</span>&gt;</span></div><div class=\"line\"><span class=\"class\">    </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer x, Integer y)</span></span></div><div class=\"line\"><span class=\"function\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (x &lt; y)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (x &gt; y)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>"},{"date":"2016-08-17T16:00:00.000Z","title":"LeetCode:385. Mini Parser","layout":"default","_content":"\n### [LeetCode:385. Mini Parser](https://leetcode.com/problems/mini-parser/)\n\n```\nGiven a nested list of integers represented as a string, implement a parser to deserialize it.\n\nEach element is either an integer, or a list -- whose elements may also be integers or other lists.\n\nNote: You may assume that the string is well-formed:\n\nString is non-empty.\nString does not contain white spaces.\nString contains only digits 0-9, [, - ,, ].\n```\n\n<!--more-->\n\n题目的意思就是给你一个由好多int值嵌套在一起的字符串。让你写一个解析器，把里面的元素解析出来。每个元素呢，要么是一个int值，要么是一个列表，而这个列表的元素又可以是int或者其他列表，如此嵌套而成。\n几个注意点：给定的字符创不为空且不含空格，只包含0-9以及[]还有,和-。\n\n#### 讲讲思路先\n\n1. 遇到'['字符肯定是要产生一个新的 `NestedInteger` 对象的。\n2. 遇到']'字符则表明上一个元素可以结束了，此时要处理这里面的整型字符串，将其解析成int值再传给当前的NestedInteger对象。并且呢，由于当前元素已经结束解析，还需要将它传给它的父NestedInteger。\n3. 遇到','字符要分情况了，如果它的前一个字符是']'则表明在步骤2种已经做了处理了，否则的话说明之前的整型字符串还没有解析。\n4. 如果遇到了0到9还有－，则暂时不作处理，将其拼接到一个StringBuilder里面。\n\n看看Java代码实现：\n\n```java\npublic class Solution {\n    public NestedInteger deserialize(String s) {\n        if (s.isEmpty())\n            return null;\n        if (s.charAt(0) != '[') // ERROR: special case\n            return new NestedInteger(Integer.valueOf(s));\n\n        //stack 用于保存上一个 NI 对象\n        Stack<NestedInteger> stack = new Stack<>();\n        //curNi用于保存当前 NI 对象\n        NestedInteger curNi = null;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0 ; i < s.length() ; i++ ) {\n            char c = s.charAt(i);\n            if(c == '[') {\n                //如果当前 curNi 不为空，则 curNi 临时push进 stack\n                if(curNi != null) {\n                   stack.push(curNi);\n                }\n                //并且遇到'['之后要实例化新的 curNi\n                curNi = new NestedInteger();\n            } else if (c == ']') {\n                //遇到']'之后，就要把之前的字符串解析成int了\n                if(sb.length() >0) {\n                    curNi.add(new NestedInteger(Integer.parseInt(sb.toString())));\n                    sb.setLength(0);\n                }\n                //如果 stack 不为空则把 curNi 添加到 stack的顶层NI 中。\n                if(!stack.empty()) {\n                    NestedInteger popNi = stack.pop();\n                    popNi.add(curNi);\n                    curNi = popNi;\n                }\n            } else if (c == ','){\n                //如果前一个元素是]，则已经处理；如果不是，则要把前面的元素解析成int\n                if(s.charAt(i-1) != ']') {\n                    curNi.add(new NestedInteger(Integer.parseInt(sb.toString())));\n                    sb.setLength(0);\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return curNi;\n    }\n}\n```\n\n#### 我们这里再来拿一个字符串来讨论看看，对于字符串\"[-1,[123],[[3]]]\"\n\n1. 首先遇到'['产生一个NestedInteger，对应着最外层的NestedInteger， 记作NI1，并赋值给curNi(NI1)；\n2. 接着向后遍历，直到遇到了第一个','，此时要为前面的整型值'-1'实例化一个NestedInteger对象，并插入到最外层的curNi(NI1)；\n3. 继续向后遍历，遇到第二个'['，先将curNi(NI1)压入stack中，再实例化一个新的NestedInteger对象，记作NI2，且令赋值给curNi(NI2)；\n4. 向后遍历，遇到第二个'['所对应的']'，为前面的整型值'123'实例化一个NestedInteger对象，add进curNI(NI2)中。再弹出stack中的NI1对象，将curNI(NI2)add到NI中，再令curNi ＝ NI1，注意此时stack中已空；\n5. 继续，遇到第二个','但是发现它的前一个字符是']'，不作处理；\n6. 继续遍历，遇到第三个'['，先将curNI(NI1)压入stack中。再实例化一个新的NestedInteger对象，记作NI3，令curNI = NI3；\n7. 继续遍历，遇到第四个'['，先将curNI(NI3)压入stack中。再实例化一个新的NestedInteger对象，记作NI4，令curNI = NI4；\n8. 继续遍历，遇到第四个'['所对应的']'，为'3'实例化一个NestedInteger对象，插入到curNI(NI4)中。从stack中弹出NI3，将curNI(NI4)插入到NI3中，且令curNI = NI3；\n9. 继续遍历，遇到第三个'['所对应的']'，前面没有未处理的整型字符串。此时stack里面还有一个NI1，弹出NI1，将curNI(NI3)add给NI1，且令curNI = NI1；\n10. 到了最后一个']'，也对应了第一个']'，此时stack为空，且没有未处理的字符串了。此时，curNI就对应了最外层的那个NestedInteger，是不是很神奇。结束。\n\n- - -\nTHE END.\n","source":"_posts/2016-08-18-LeetCodeMinParser.md","raw":"---\ndate: 2016-08-18\ntitle: LeetCode:385. Mini Parser\ntags: LeetCode\ncategory: Alogrithm\nlayout: default\n---\n\n### [LeetCode:385. Mini Parser](https://leetcode.com/problems/mini-parser/)\n\n```\nGiven a nested list of integers represented as a string, implement a parser to deserialize it.\n\nEach element is either an integer, or a list -- whose elements may also be integers or other lists.\n\nNote: You may assume that the string is well-formed:\n\nString is non-empty.\nString does not contain white spaces.\nString contains only digits 0-9, [, - ,, ].\n```\n\n<!--more-->\n\n题目的意思就是给你一个由好多int值嵌套在一起的字符串。让你写一个解析器，把里面的元素解析出来。每个元素呢，要么是一个int值，要么是一个列表，而这个列表的元素又可以是int或者其他列表，如此嵌套而成。\n几个注意点：给定的字符创不为空且不含空格，只包含0-9以及[]还有,和-。\n\n#### 讲讲思路先\n\n1. 遇到'['字符肯定是要产生一个新的 `NestedInteger` 对象的。\n2. 遇到']'字符则表明上一个元素可以结束了，此时要处理这里面的整型字符串，将其解析成int值再传给当前的NestedInteger对象。并且呢，由于当前元素已经结束解析，还需要将它传给它的父NestedInteger。\n3. 遇到','字符要分情况了，如果它的前一个字符是']'则表明在步骤2种已经做了处理了，否则的话说明之前的整型字符串还没有解析。\n4. 如果遇到了0到9还有－，则暂时不作处理，将其拼接到一个StringBuilder里面。\n\n看看Java代码实现：\n\n```java\npublic class Solution {\n    public NestedInteger deserialize(String s) {\n        if (s.isEmpty())\n            return null;\n        if (s.charAt(0) != '[') // ERROR: special case\n            return new NestedInteger(Integer.valueOf(s));\n\n        //stack 用于保存上一个 NI 对象\n        Stack<NestedInteger> stack = new Stack<>();\n        //curNi用于保存当前 NI 对象\n        NestedInteger curNi = null;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0 ; i < s.length() ; i++ ) {\n            char c = s.charAt(i);\n            if(c == '[') {\n                //如果当前 curNi 不为空，则 curNi 临时push进 stack\n                if(curNi != null) {\n                   stack.push(curNi);\n                }\n                //并且遇到'['之后要实例化新的 curNi\n                curNi = new NestedInteger();\n            } else if (c == ']') {\n                //遇到']'之后，就要把之前的字符串解析成int了\n                if(sb.length() >0) {\n                    curNi.add(new NestedInteger(Integer.parseInt(sb.toString())));\n                    sb.setLength(0);\n                }\n                //如果 stack 不为空则把 curNi 添加到 stack的顶层NI 中。\n                if(!stack.empty()) {\n                    NestedInteger popNi = stack.pop();\n                    popNi.add(curNi);\n                    curNi = popNi;\n                }\n            } else if (c == ','){\n                //如果前一个元素是]，则已经处理；如果不是，则要把前面的元素解析成int\n                if(s.charAt(i-1) != ']') {\n                    curNi.add(new NestedInteger(Integer.parseInt(sb.toString())));\n                    sb.setLength(0);\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return curNi;\n    }\n}\n```\n\n#### 我们这里再来拿一个字符串来讨论看看，对于字符串\"[-1,[123],[[3]]]\"\n\n1. 首先遇到'['产生一个NestedInteger，对应着最外层的NestedInteger， 记作NI1，并赋值给curNi(NI1)；\n2. 接着向后遍历，直到遇到了第一个','，此时要为前面的整型值'-1'实例化一个NestedInteger对象，并插入到最外层的curNi(NI1)；\n3. 继续向后遍历，遇到第二个'['，先将curNi(NI1)压入stack中，再实例化一个新的NestedInteger对象，记作NI2，且令赋值给curNi(NI2)；\n4. 向后遍历，遇到第二个'['所对应的']'，为前面的整型值'123'实例化一个NestedInteger对象，add进curNI(NI2)中。再弹出stack中的NI1对象，将curNI(NI2)add到NI中，再令curNi ＝ NI1，注意此时stack中已空；\n5. 继续，遇到第二个','但是发现它的前一个字符是']'，不作处理；\n6. 继续遍历，遇到第三个'['，先将curNI(NI1)压入stack中。再实例化一个新的NestedInteger对象，记作NI3，令curNI = NI3；\n7. 继续遍历，遇到第四个'['，先将curNI(NI3)压入stack中。再实例化一个新的NestedInteger对象，记作NI4，令curNI = NI4；\n8. 继续遍历，遇到第四个'['所对应的']'，为'3'实例化一个NestedInteger对象，插入到curNI(NI4)中。从stack中弹出NI3，将curNI(NI4)插入到NI3中，且令curNI = NI3；\n9. 继续遍历，遇到第三个'['所对应的']'，前面没有未处理的整型字符串。此时stack里面还有一个NI1，弹出NI1，将curNI(NI3)add给NI1，且令curNI = NI1；\n10. 到了最后一个']'，也对应了第一个']'，此时stack为空，且没有未处理的字符串了。此时，curNI就对应了最外层的那个NestedInteger，是不是很神奇。结束。\n\n- - -\nTHE END.\n","slug":"2016-08-18-LeetCodeMinParser","published":1,"updated":"2018-03-14T06:12:40.669Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9e000buro59plr2fnf","content":"<h3 id=\"LeetCode-385-Mini-Parser\"><a href=\"#LeetCode-385-Mini-Parser\" class=\"headerlink\" title=\"LeetCode:385. Mini Parser\"></a><a href=\"https://leetcode.com/problems/mini-parser/\" target=\"_blank\" rel=\"external\">LeetCode:385. Mini Parser</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given a nested list of integers represented as a string, implement a parser to deserialize it.</div><div class=\"line\"></div><div class=\"line\">Each element is either an integer, or a list -- whose elements may also be integers or other lists.</div><div class=\"line\"></div><div class=\"line\">Note: You may assume that the string is well-formed:</div><div class=\"line\"></div><div class=\"line\">String is non-empty.</div><div class=\"line\">String does not contain white spaces.</div><div class=\"line\">String contains only digits 0-9, [, - ,, ].</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>题目的意思就是给你一个由好多int值嵌套在一起的字符串。让你写一个解析器，把里面的元素解析出来。每个元素呢，要么是一个int值，要么是一个列表，而这个列表的元素又可以是int或者其他列表，如此嵌套而成。<br>几个注意点：给定的字符创不为空且不含空格，只包含0-9以及[]还有,和-。</p>\n<h4 id=\"讲讲思路先\"><a href=\"#讲讲思路先\" class=\"headerlink\" title=\"讲讲思路先\"></a>讲讲思路先</h4><ol>\n<li>遇到’[‘字符肯定是要产生一个新的 <code>NestedInteger</code> 对象的。</li>\n<li>遇到’]’字符则表明上一个元素可以结束了，此时要处理这里面的整型字符串，将其解析成int值再传给当前的NestedInteger对象。并且呢，由于当前元素已经结束解析，还需要将它传给它的父NestedInteger。</li>\n<li>遇到’,’字符要分情况了，如果它的前一个字符是’]’则表明在步骤2种已经做了处理了，否则的话说明之前的整型字符串还没有解析。</li>\n<li>如果遇到了0到9还有－，则暂时不作处理，将其拼接到一个StringBuilder里面。</li>\n</ol>\n<p>看看Java代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> NestedInteger <span class=\"title\">deserialize</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (s.isEmpty())</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(<span class=\"number\">0</span>) != <span class=\"string\">'['</span>) <span class=\"comment\">// ERROR: special case</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NestedInteger(Integer.valueOf(s));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//stack 用于保存上一个 NI 对象</span></div><div class=\"line\">        Stack&lt;NestedInteger&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">        <span class=\"comment\">//curNi用于保存当前 NI 对象</span></div><div class=\"line\">        NestedInteger curNi = <span class=\"keyword\">null</span>;</div><div class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; s.length() ; i++ ) &#123;</div><div class=\"line\">            <span class=\"keyword\">char</span> c = s.charAt(i);</div><div class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">'['</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//如果当前 curNi 不为空，则 curNi 临时push进 stack</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(curNi != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   stack.push(curNi);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//并且遇到'['之后要实例化新的 curNi</span></div><div class=\"line\">                curNi = <span class=\"keyword\">new</span> NestedInteger();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">']'</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//遇到']'之后，就要把之前的字符串解析成int了</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(sb.length() &gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    curNi.add(<span class=\"keyword\">new</span> NestedInteger(Integer.parseInt(sb.toString())));</div><div class=\"line\">                    sb.setLength(<span class=\"number\">0</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//如果 stack 不为空则把 curNi 添加到 stack的顶层NI 中。</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(!stack.empty()) &#123;</div><div class=\"line\">                    NestedInteger popNi = stack.pop();</div><div class=\"line\">                    popNi.add(curNi);</div><div class=\"line\">                    curNi = popNi;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">','</span>)&#123;</div><div class=\"line\">                <span class=\"comment\">//如果前一个元素是]，则已经处理；如果不是，则要把前面的元素解析成int</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(s.charAt(i-<span class=\"number\">1</span>) != <span class=\"string\">']'</span>) &#123;</div><div class=\"line\">                    curNi.add(<span class=\"keyword\">new</span> NestedInteger(Integer.parseInt(sb.toString())));</div><div class=\"line\">                    sb.setLength(<span class=\"number\">0</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                sb.append(c);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> curNi;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"我们这里再来拿一个字符串来讨论看看，对于字符串”-1-123-3-”\"><a href=\"#我们这里再来拿一个字符串来讨论看看，对于字符串”-1-123-3-”\" class=\"headerlink\" title=\"我们这里再来拿一个字符串来讨论看看，对于字符串”[-1,[123],[[3]]]”\"></a>我们这里再来拿一个字符串来讨论看看，对于字符串”[-1,[123],[[3]]]”</h4><ol>\n<li>首先遇到’[‘产生一个NestedInteger，对应着最外层的NestedInteger， 记作NI1，并赋值给curNi(NI1)；</li>\n<li>接着向后遍历，直到遇到了第一个’,’，此时要为前面的整型值’-1’实例化一个NestedInteger对象，并插入到最外层的curNi(NI1)；</li>\n<li>继续向后遍历，遇到第二个’[‘，先将curNi(NI1)压入stack中，再实例化一个新的NestedInteger对象，记作NI2，且令赋值给curNi(NI2)；</li>\n<li>向后遍历，遇到第二个’[‘所对应的’]’，为前面的整型值’123’实例化一个NestedInteger对象，add进curNI(NI2)中。再弹出stack中的NI1对象，将curNI(NI2)add到NI中，再令curNi ＝ NI1，注意此时stack中已空；</li>\n<li>继续，遇到第二个’,’但是发现它的前一个字符是’]’，不作处理；</li>\n<li>继续遍历，遇到第三个’[‘，先将curNI(NI1)压入stack中。再实例化一个新的NestedInteger对象，记作NI3，令curNI = NI3；</li>\n<li>继续遍历，遇到第四个’[‘，先将curNI(NI3)压入stack中。再实例化一个新的NestedInteger对象，记作NI4，令curNI = NI4；</li>\n<li>继续遍历，遇到第四个’[‘所对应的’]’，为’3’实例化一个NestedInteger对象，插入到curNI(NI4)中。从stack中弹出NI3，将curNI(NI4)插入到NI3中，且令curNI = NI3；</li>\n<li>继续遍历，遇到第三个’[‘所对应的’]’，前面没有未处理的整型字符串。此时stack里面还有一个NI1，弹出NI1，将curNI(NI3)add给NI1，且令curNI = NI1；</li>\n<li>到了最后一个’]’，也对应了第一个’]’，此时stack为空，且没有未处理的字符串了。此时，curNI就对应了最外层的那个NestedInteger，是不是很神奇。结束。</li>\n</ol>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"LeetCode-385-Mini-Parser\"><a href=\"#LeetCode-385-Mini-Parser\" class=\"headerlink\" title=\"LeetCode:385. Mini Parser\"></a><a href=\"https://leetcode.com/problems/mini-parser/\" target=\"_blank\" rel=\"external\">LeetCode:385. Mini Parser</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given a nested list of integers represented as a string, implement a parser to deserialize it.</div><div class=\"line\"></div><div class=\"line\">Each element is either an integer, or a list -- whose elements may also be integers or other lists.</div><div class=\"line\"></div><div class=\"line\">Note: You may assume that the string is well-formed:</div><div class=\"line\"></div><div class=\"line\">String is non-empty.</div><div class=\"line\">String does not contain white spaces.</div><div class=\"line\">String contains only digits 0-9, [, - ,, ].</div></pre></td></tr></table></figure>","more":"<p>题目的意思就是给你一个由好多int值嵌套在一起的字符串。让你写一个解析器，把里面的元素解析出来。每个元素呢，要么是一个int值，要么是一个列表，而这个列表的元素又可以是int或者其他列表，如此嵌套而成。<br>几个注意点：给定的字符创不为空且不含空格，只包含0-9以及[]还有,和-。</p>\n<h4 id=\"讲讲思路先\"><a href=\"#讲讲思路先\" class=\"headerlink\" title=\"讲讲思路先\"></a>讲讲思路先</h4><ol>\n<li>遇到’[‘字符肯定是要产生一个新的 <code>NestedInteger</code> 对象的。</li>\n<li>遇到’]’字符则表明上一个元素可以结束了，此时要处理这里面的整型字符串，将其解析成int值再传给当前的NestedInteger对象。并且呢，由于当前元素已经结束解析，还需要将它传给它的父NestedInteger。</li>\n<li>遇到’,’字符要分情况了，如果它的前一个字符是’]’则表明在步骤2种已经做了处理了，否则的话说明之前的整型字符串还没有解析。</li>\n<li>如果遇到了0到9还有－，则暂时不作处理，将其拼接到一个StringBuilder里面。</li>\n</ol>\n<p>看看Java代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> NestedInteger <span class=\"title\">deserialize</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (s.isEmpty())</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(<span class=\"number\">0</span>) != <span class=\"string\">'['</span>) <span class=\"comment\">// ERROR: special case</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NestedInteger(Integer.valueOf(s));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//stack 用于保存上一个 NI 对象</span></div><div class=\"line\">        Stack&lt;NestedInteger&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">        <span class=\"comment\">//curNi用于保存当前 NI 对象</span></div><div class=\"line\">        NestedInteger curNi = <span class=\"keyword\">null</span>;</div><div class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; s.length() ; i++ ) &#123;</div><div class=\"line\">            <span class=\"keyword\">char</span> c = s.charAt(i);</div><div class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">'['</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//如果当前 curNi 不为空，则 curNi 临时push进 stack</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(curNi != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   stack.push(curNi);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//并且遇到'['之后要实例化新的 curNi</span></div><div class=\"line\">                curNi = <span class=\"keyword\">new</span> NestedInteger();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">']'</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//遇到']'之后，就要把之前的字符串解析成int了</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(sb.length() &gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    curNi.add(<span class=\"keyword\">new</span> NestedInteger(Integer.parseInt(sb.toString())));</div><div class=\"line\">                    sb.setLength(<span class=\"number\">0</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//如果 stack 不为空则把 curNi 添加到 stack的顶层NI 中。</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(!stack.empty()) &#123;</div><div class=\"line\">                    NestedInteger popNi = stack.pop();</div><div class=\"line\">                    popNi.add(curNi);</div><div class=\"line\">                    curNi = popNi;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">','</span>)&#123;</div><div class=\"line\">                <span class=\"comment\">//如果前一个元素是]，则已经处理；如果不是，则要把前面的元素解析成int</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(s.charAt(i-<span class=\"number\">1</span>) != <span class=\"string\">']'</span>) &#123;</div><div class=\"line\">                    curNi.add(<span class=\"keyword\">new</span> NestedInteger(Integer.parseInt(sb.toString())));</div><div class=\"line\">                    sb.setLength(<span class=\"number\">0</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                sb.append(c);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> curNi;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"我们这里再来拿一个字符串来讨论看看，对于字符串”-1-123-3-”\"><a href=\"#我们这里再来拿一个字符串来讨论看看，对于字符串”-1-123-3-”\" class=\"headerlink\" title=\"我们这里再来拿一个字符串来讨论看看，对于字符串”[-1,[123],[[3]]]”\"></a>我们这里再来拿一个字符串来讨论看看，对于字符串”[-1,[123],[[3]]]”</h4><ol>\n<li>首先遇到’[‘产生一个NestedInteger，对应着最外层的NestedInteger， 记作NI1，并赋值给curNi(NI1)；</li>\n<li>接着向后遍历，直到遇到了第一个’,’，此时要为前面的整型值’-1’实例化一个NestedInteger对象，并插入到最外层的curNi(NI1)；</li>\n<li>继续向后遍历，遇到第二个’[‘，先将curNi(NI1)压入stack中，再实例化一个新的NestedInteger对象，记作NI2，且令赋值给curNi(NI2)；</li>\n<li>向后遍历，遇到第二个’[‘所对应的’]’，为前面的整型值’123’实例化一个NestedInteger对象，add进curNI(NI2)中。再弹出stack中的NI1对象，将curNI(NI2)add到NI中，再令curNi ＝ NI1，注意此时stack中已空；</li>\n<li>继续，遇到第二个’,’但是发现它的前一个字符是’]’，不作处理；</li>\n<li>继续遍历，遇到第三个’[‘，先将curNI(NI1)压入stack中。再实例化一个新的NestedInteger对象，记作NI3，令curNI = NI3；</li>\n<li>继续遍历，遇到第四个’[‘，先将curNI(NI3)压入stack中。再实例化一个新的NestedInteger对象，记作NI4，令curNI = NI4；</li>\n<li>继续遍历，遇到第四个’[‘所对应的’]’，为’3’实例化一个NestedInteger对象，插入到curNI(NI4)中。从stack中弹出NI3，将curNI(NI4)插入到NI3中，且令curNI = NI3；</li>\n<li>继续遍历，遇到第三个’[‘所对应的’]’，前面没有未处理的整型字符串。此时stack里面还有一个NI1，弹出NI1，将curNI(NI3)add给NI1，且令curNI = NI1；</li>\n<li>到了最后一个’]’，也对应了第一个’]’，此时stack为空，且没有未处理的字符串了。此时，curNI就对应了最外层的那个NestedInteger，是不是很神奇。结束。</li>\n</ol>\n<hr>\n<p>THE END.</p>"},{"date":"2016-08-19T16:00:00.000Z","title":"LeetCode:377. Combination Sum IV","layout":"default","_content":"\n### [LeetCode:377. Combination Sum IV](https://leetcode.com/problems/combination-sum-iv/)\n\n```\nGiven an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\n\nExample:\n\nnums = [1, 2, 3]\ntarget = 4\n\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\nNote that different sequences are counted as different combinations.\n\nTherefore the output is 7.\n```\n\n<!--more-->\n\n题目的意思就是给你一个正整数数组，里面的元素不重复（未排序）。再给你一个目标数值，要你用数组里面的数组合起来的和是目标数值，求出有多少种可能。\n\n这道题目有点像那个[爬梯子](https://leetcode.com/problems/climbing-stairs/)的题目。同时也可以看看这篇文章[ClimbingStairs](http://wisim.me/leetcode/2016/08/21/LeetCode_ClimbingStairs.html)。\n\n两道题目有异曲同工之妙，我们来思考一下这道题目。如果我要求和为4的所有可能性，首先要求(4-1),(4-2),(4-3)的可能性，它们的和就是4的可能性。来看一下Java代码实现：\n\n```java\npublic class Solution {\n    public int combinationSum4(int[] nums, int target) {\n        Arrays.sort(nums);\n        int[] res = new int[target+1];\n        for (int i = 1 ; i < target+1;i++) {\n            for(int num : nums) {\n                if(i == num) {\n                    res[i]+=1;\n                } else if(i > num) {\n                    res[i]+= res[i-num];\n                } else {\n                    break;\n                }\n            }\n        }\n        return res[target];\n    }\n}\n```\n- - -\nTHE END\n","source":"_posts/2016-08-20-LeetCodeCombinationSumIV.md","raw":"---\ndate: 2016-08-20\ntitle: LeetCode:377. Combination Sum IV\ntags: LeetCode\ncategory: Alogrithm\nlayout: default\n---\n\n### [LeetCode:377. Combination Sum IV](https://leetcode.com/problems/combination-sum-iv/)\n\n```\nGiven an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\n\nExample:\n\nnums = [1, 2, 3]\ntarget = 4\n\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\nNote that different sequences are counted as different combinations.\n\nTherefore the output is 7.\n```\n\n<!--more-->\n\n题目的意思就是给你一个正整数数组，里面的元素不重复（未排序）。再给你一个目标数值，要你用数组里面的数组合起来的和是目标数值，求出有多少种可能。\n\n这道题目有点像那个[爬梯子](https://leetcode.com/problems/climbing-stairs/)的题目。同时也可以看看这篇文章[ClimbingStairs](http://wisim.me/leetcode/2016/08/21/LeetCode_ClimbingStairs.html)。\n\n两道题目有异曲同工之妙，我们来思考一下这道题目。如果我要求和为4的所有可能性，首先要求(4-1),(4-2),(4-3)的可能性，它们的和就是4的可能性。来看一下Java代码实现：\n\n```java\npublic class Solution {\n    public int combinationSum4(int[] nums, int target) {\n        Arrays.sort(nums);\n        int[] res = new int[target+1];\n        for (int i = 1 ; i < target+1;i++) {\n            for(int num : nums) {\n                if(i == num) {\n                    res[i]+=1;\n                } else if(i > num) {\n                    res[i]+= res[i-num];\n                } else {\n                    break;\n                }\n            }\n        }\n        return res[target];\n    }\n}\n```\n- - -\nTHE END\n","slug":"2016-08-20-LeetCodeCombinationSumIV","published":1,"updated":"2018-03-14T06:12:40.669Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9i000guro5rcc6udd4","content":"<h3 id=\"LeetCode-377-Combination-Sum-IV\"><a href=\"#LeetCode-377-Combination-Sum-IV\" class=\"headerlink\" title=\"LeetCode:377. Combination Sum IV\"></a><a href=\"https://leetcode.com/problems/combination-sum-iv/\" target=\"_blank\" rel=\"external\">LeetCode:377. Combination Sum IV</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</div><div class=\"line\"></div><div class=\"line\">Example:</div><div class=\"line\"></div><div class=\"line\">nums = [1, 2, 3]</div><div class=\"line\">target = 4</div><div class=\"line\"></div><div class=\"line\">The possible combination ways are:</div><div class=\"line\">(1, 1, 1, 1)</div><div class=\"line\">(1, 1, 2)</div><div class=\"line\">(1, 2, 1)</div><div class=\"line\">(1, 3)</div><div class=\"line\">(2, 1, 1)</div><div class=\"line\">(2, 2)</div><div class=\"line\">(3, 1)</div><div class=\"line\"></div><div class=\"line\">Note that different sequences are counted as different combinations.</div><div class=\"line\"></div><div class=\"line\">Therefore the output is 7.</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>题目的意思就是给你一个正整数数组，里面的元素不重复（未排序）。再给你一个目标数值，要你用数组里面的数组合起来的和是目标数值，求出有多少种可能。</p>\n<p>这道题目有点像那个<a href=\"https://leetcode.com/problems/climbing-stairs/\" target=\"_blank\" rel=\"external\">爬梯子</a>的题目。同时也可以看看这篇文章<a href=\"http://wisim.me/leetcode/2016/08/21/LeetCode_ClimbingStairs.html\" target=\"_blank\" rel=\"external\">ClimbingStairs</a>。</p>\n<p>两道题目有异曲同工之妙，我们来思考一下这道题目。如果我要求和为4的所有可能性，首先要求(4-1),(4-2),(4-3)的可能性，它们的和就是4的可能性。来看一下Java代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">combinationSum4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</div><div class=\"line\">        Arrays.sort(nums);</div><div class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[target+<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; target+<span class=\"number\">1</span>;i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num : nums) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(i == num) &#123;</div><div class=\"line\">                    res[i]+=<span class=\"number\">1</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt; num) &#123;</div><div class=\"line\">                    res[i]+= res[i-num];</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> res[target];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"LeetCode-377-Combination-Sum-IV\"><a href=\"#LeetCode-377-Combination-Sum-IV\" class=\"headerlink\" title=\"LeetCode:377. Combination Sum IV\"></a><a href=\"https://leetcode.com/problems/combination-sum-iv/\" target=\"_blank\" rel=\"external\">LeetCode:377. Combination Sum IV</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</div><div class=\"line\"></div><div class=\"line\">Example:</div><div class=\"line\"></div><div class=\"line\">nums = [1, 2, 3]</div><div class=\"line\">target = 4</div><div class=\"line\"></div><div class=\"line\">The possible combination ways are:</div><div class=\"line\">(1, 1, 1, 1)</div><div class=\"line\">(1, 1, 2)</div><div class=\"line\">(1, 2, 1)</div><div class=\"line\">(1, 3)</div><div class=\"line\">(2, 1, 1)</div><div class=\"line\">(2, 2)</div><div class=\"line\">(3, 1)</div><div class=\"line\"></div><div class=\"line\">Note that different sequences are counted as different combinations.</div><div class=\"line\"></div><div class=\"line\">Therefore the output is 7.</div></pre></td></tr></table></figure>","more":"<p>题目的意思就是给你一个正整数数组，里面的元素不重复（未排序）。再给你一个目标数值，要你用数组里面的数组合起来的和是目标数值，求出有多少种可能。</p>\n<p>这道题目有点像那个<a href=\"https://leetcode.com/problems/climbing-stairs/\" target=\"_blank\" rel=\"external\">爬梯子</a>的题目。同时也可以看看这篇文章<a href=\"http://wisim.me/leetcode/2016/08/21/LeetCode_ClimbingStairs.html\" target=\"_blank\" rel=\"external\">ClimbingStairs</a>。</p>\n<p>两道题目有异曲同工之妙，我们来思考一下这道题目。如果我要求和为4的所有可能性，首先要求(4-1),(4-2),(4-3)的可能性，它们的和就是4的可能性。来看一下Java代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">combinationSum4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</div><div class=\"line\">        Arrays.sort(nums);</div><div class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[target+<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; target+<span class=\"number\">1</span>;i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num : nums) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(i == num) &#123;</div><div class=\"line\">                    res[i]+=<span class=\"number\">1</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt; num) &#123;</div><div class=\"line\">                    res[i]+= res[i-num];</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> res[target];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END</p>"},{"date":"2016-08-20T16:00:00.000Z","title":"LeetCode:70. Climbing Stairs","layout":"default","_content":"\n### [LeetCode:70. Climbing Stairs](https://leetcode.com/problems/climbing-stairs/)\n\n```\nYou are climbing a stair case. It takes n steps to reach to the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n```\n<!--more-->\n\n题目的意思就是让你爬n阶提子，但是每次只能爬一个阶梯或者两个阶梯。让你求出所有的可能性。\n\n想想看，由于只能爬1或者2，所以我们爬一个阶梯只有一种可能性，但是爬两个阶梯就有两种可能，也就是两个1或者一个2。\n\n这样举个例子，思考一下，因为只能爬1或者2个阶梯，所以爬到4只有两个可能，就是从3爬一步爬到4或者从2爬两步爬到4。因此爬到4的可能性也就确定了，也就是从0爬到3的可能性以及从0爬到2的可能性之和。再往前看，爬到3有几种可能：从1爬两步爬到3，以及从2爬一步爬到3。爬到2的可能性：从1爬一步到2或者从0爬两步到2。这样就可以算到从0爬到4的可能性了。来看一下Java代码实现 ：\n\n```java\npublic class Solution {\n    public int climbStairs(int n) {\n        //将1，2两种步伐抽象成一个数组，这样下面的代码对其他的步伐也适用\n        int[] arr = new int[]{1,2};\n        //每个阶梯的可能的情况都放在res数组对应的位置\n        int[] res = new int[n+1];\n        if(n < arr[0]) {\n            return 0;\n        }\n        for(int i = 1 ; i < n+1 ; i++) {\n            //循环每种步伐\n            for(int j = 0 ; j < arr.length;j++) {\n                if(i == arr[j]) {\n                    //如果等于步伐中的某一步，则该位置的结果增加自身这一种可能性\n                    res[i]+=1;\n                } else if(i > arr[j]){\n                    //如果大于步伐，则减去该步伐所得位置的可能性要加在当前位置的可能性里面。\n                    res[i]+=res[i-arr[j]];\n                } else {\n                    break;\n                }\n            }\n            //System.out.println(i+ \" : \" +res[i]);\n        }\n        return res[n];\n    }\n}\n```\n- - -\nTHE END.\n","source":"_posts/2016-08-21-LeetCodeClimbingStairs.md","raw":"---\ndate: 2016-08-21\ntitle: LeetCode:70. Climbing Stairs\ntags: LeetCode\ncategory: Alogrithm\nlayout: default\n---\n\n### [LeetCode:70. Climbing Stairs](https://leetcode.com/problems/climbing-stairs/)\n\n```\nYou are climbing a stair case. It takes n steps to reach to the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n```\n<!--more-->\n\n题目的意思就是让你爬n阶提子，但是每次只能爬一个阶梯或者两个阶梯。让你求出所有的可能性。\n\n想想看，由于只能爬1或者2，所以我们爬一个阶梯只有一种可能性，但是爬两个阶梯就有两种可能，也就是两个1或者一个2。\n\n这样举个例子，思考一下，因为只能爬1或者2个阶梯，所以爬到4只有两个可能，就是从3爬一步爬到4或者从2爬两步爬到4。因此爬到4的可能性也就确定了，也就是从0爬到3的可能性以及从0爬到2的可能性之和。再往前看，爬到3有几种可能：从1爬两步爬到3，以及从2爬一步爬到3。爬到2的可能性：从1爬一步到2或者从0爬两步到2。这样就可以算到从0爬到4的可能性了。来看一下Java代码实现 ：\n\n```java\npublic class Solution {\n    public int climbStairs(int n) {\n        //将1，2两种步伐抽象成一个数组，这样下面的代码对其他的步伐也适用\n        int[] arr = new int[]{1,2};\n        //每个阶梯的可能的情况都放在res数组对应的位置\n        int[] res = new int[n+1];\n        if(n < arr[0]) {\n            return 0;\n        }\n        for(int i = 1 ; i < n+1 ; i++) {\n            //循环每种步伐\n            for(int j = 0 ; j < arr.length;j++) {\n                if(i == arr[j]) {\n                    //如果等于步伐中的某一步，则该位置的结果增加自身这一种可能性\n                    res[i]+=1;\n                } else if(i > arr[j]){\n                    //如果大于步伐，则减去该步伐所得位置的可能性要加在当前位置的可能性里面。\n                    res[i]+=res[i-arr[j]];\n                } else {\n                    break;\n                }\n            }\n            //System.out.println(i+ \" : \" +res[i]);\n        }\n        return res[n];\n    }\n}\n```\n- - -\nTHE END.\n","slug":"2016-08-21-LeetCodeClimbingStairs","published":1,"updated":"2018-03-14T06:12:40.670Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9j000iuro5f8b41ty4","content":"<h3 id=\"LeetCode-70-Climbing-Stairs\"><a href=\"#LeetCode-70-Climbing-Stairs\" class=\"headerlink\" title=\"LeetCode:70. Climbing Stairs\"></a><a href=\"https://leetcode.com/problems/climbing-stairs/\" target=\"_blank\" rel=\"external\">LeetCode:70. Climbing Stairs</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">You are climbing a stair case. It takes n steps to reach to the top.</div><div class=\"line\">Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>题目的意思就是让你爬n阶提子，但是每次只能爬一个阶梯或者两个阶梯。让你求出所有的可能性。</p>\n<p>想想看，由于只能爬1或者2，所以我们爬一个阶梯只有一种可能性，但是爬两个阶梯就有两种可能，也就是两个1或者一个2。</p>\n<p>这样举个例子，思考一下，因为只能爬1或者2个阶梯，所以爬到4只有两个可能，就是从3爬一步爬到4或者从2爬两步爬到4。因此爬到4的可能性也就确定了，也就是从0爬到3的可能性以及从0爬到2的可能性之和。再往前看，爬到3有几种可能：从1爬两步爬到3，以及从2爬一步爬到3。爬到2的可能性：从1爬一步到2或者从0爬两步到2。这样就可以算到从0爬到4的可能性了。来看一下Java代码实现 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//将1，2两种步伐抽象成一个数组，这样下面的代码对其他的步伐也适用</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">        <span class=\"comment\">//每个阶梯的可能的情况都放在res数组对应的位置</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span>(n &lt; arr[<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; n+<span class=\"number\">1</span> ; i++) &#123;</div><div class=\"line\">            <span class=\"comment\">//循环每种步伐</span></div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ; j &lt; arr.length;j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(i == arr[j]) &#123;</div><div class=\"line\">                    <span class=\"comment\">//如果等于步伐中的某一步，则该位置的结果增加自身这一种可能性</span></div><div class=\"line\">                    res[i]+=<span class=\"number\">1</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt; arr[j])&#123;</div><div class=\"line\">                    <span class=\"comment\">//如果大于步伐，则减去该步伐所得位置的可能性要加在当前位置的可能性里面。</span></div><div class=\"line\">                    res[i]+=res[i-arr[j]];</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//System.out.println(i+ \" : \" +res[i]);</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> res[n];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"LeetCode-70-Climbing-Stairs\"><a href=\"#LeetCode-70-Climbing-Stairs\" class=\"headerlink\" title=\"LeetCode:70. Climbing Stairs\"></a><a href=\"https://leetcode.com/problems/climbing-stairs/\" target=\"_blank\" rel=\"external\">LeetCode:70. Climbing Stairs</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">You are climbing a stair case. It takes n steps to reach to the top.</div><div class=\"line\">Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</div></pre></td></tr></table></figure>","more":"<p>题目的意思就是让你爬n阶提子，但是每次只能爬一个阶梯或者两个阶梯。让你求出所有的可能性。</p>\n<p>想想看，由于只能爬1或者2，所以我们爬一个阶梯只有一种可能性，但是爬两个阶梯就有两种可能，也就是两个1或者一个2。</p>\n<p>这样举个例子，思考一下，因为只能爬1或者2个阶梯，所以爬到4只有两个可能，就是从3爬一步爬到4或者从2爬两步爬到4。因此爬到4的可能性也就确定了，也就是从0爬到3的可能性以及从0爬到2的可能性之和。再往前看，爬到3有几种可能：从1爬两步爬到3，以及从2爬一步爬到3。爬到2的可能性：从1爬一步到2或者从0爬两步到2。这样就可以算到从0爬到4的可能性了。来看一下Java代码实现 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//将1，2两种步伐抽象成一个数组，这样下面的代码对其他的步伐也适用</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">        <span class=\"comment\">//每个阶梯的可能的情况都放在res数组对应的位置</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span>(n &lt; arr[<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; n+<span class=\"number\">1</span> ; i++) &#123;</div><div class=\"line\">            <span class=\"comment\">//循环每种步伐</span></div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ; j &lt; arr.length;j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(i == arr[j]) &#123;</div><div class=\"line\">                    <span class=\"comment\">//如果等于步伐中的某一步，则该位置的结果增加自身这一种可能性</span></div><div class=\"line\">                    res[i]+=<span class=\"number\">1</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt; arr[j])&#123;</div><div class=\"line\">                    <span class=\"comment\">//如果大于步伐，则减去该步伐所得位置的可能性要加在当前位置的可能性里面。</span></div><div class=\"line\">                    res[i]+=res[i-arr[j]];</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//System.out.println(i+ \" : \" +res[i]);</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> res[n];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>"},{"date":"2017-03-04T16:00:00.000Z","title":"学习MachineLearning过程中的一些问题","layout":"default","_content":"\n#### 环境相关\n\n0. [python](https://app.yinxiang.com/shard/s13/nl/621958455/54409a58-c91d-4d22-b457-6e5fbb721a3c/)\n\n1. [Anaconda](https://www.continuum.io/downloads/)\n> Anaconda 本质上是一个软件发行版 ，包含了 conda、Python 等 180 多个科学包及其依赖项。\n\n2. [pydot](https://pypi.python.org/pypi/pydot)\n> pydot是用python实现的绘制graphviz的接口。\n\n3. [graphviz](http://www.graphviz.org/)\n> Graphviz的是AT&T Labs Research开发的图形绘制工具软件\n如果运行过程中报出 `Exception: \"dot\" not found in path.` 则需要安装 `graphviz`，如果已经安装了Anacoda，直接执行 `conda install graphviz`。\n\n<!--more-->\n\n#### 概念\n\n问题\n\n- 分类\n- 聚类\n- 回归\n- 异常检测\n- 关联规则\n- 强化学习\n- 结构预测\n- 特征学习\n- 在线学习\n- 半监督学习\n- 语法归纳\n\n - - -\n\n监督学习\n- 分类 ： 输出值如果是不连续的监督学习算法称为分类器（classifier）。\n- 回归 ： 输出值连续的监督学习算法称为回归函数（regression function）。\n\n- - -\n线性回归\n-  代价函数 ：\n\n> $$J(\\theta)=\\frac{1}{2m}\\sum_{i=1}^m{({h_\\theta }({x^{(i)}})-{y^{(i)}})^{2}}$$\n\n> 向量化实现 : $$J(\\theta)=\\frac{1}{2m}(X*\\theta-\\vec{y})^{T} (X*\\theta-\\vec{y})$$\n\n-  归一化 :\n\n> $$y_{i}=\\frac{x_{i}-\\overline{x}}{s(x)}$$\n\n-  梯度下降算法 :\n\n> 代价函数对  $$\\theta_j$$ 求偏导得到 :\n$$\\frac{\\partial{J(\\theta)}}{\\partial{\\theta_j}} = \\frac{1}{m}\\sum\\limits_{i = 1}^m {[({h_\\theta }({x^{(i)}})-{y^{(i)}})x_j^{(i)}]}$$\n\n> 所以对 $$\\theta$$ 的更新可以写为 : $${\\theta_j}={\\theta_j}-\\alpha\\frac{1}{m}\\sum\\limits_{i=1}^m {[({h_\\theta }({x^{(i)}})-{y^{(i)}})x_j^{(i)}]}$$\n\n> 向量化实现 : $${\\theta_j} = {\\theta_j}-{\\alpha\\frac{1}{m}(X^T(X*{\\theta- \\vec{y}}))}$$\n\n分类器\n- 人工神经网络\n- 支持向量机（support vector machine）\n- 最邻近法\n- 高斯混合模型\n- 朴素贝叶斯法\n- 决策树（decision tree）\n- 径向量函数分类\n\n解决步骤\n1. 决定训练的样本类型\n2. 搜集训练集\n3. 决定学习函数的特征表示\n4. 决定学习函数的结构以及对应的学习算法\n5. 完成设计\n6. 评价学习函数的准确性\n\n\n- - -\n\n- 决策树\n- 表征（装袋, 提升，随机森林）\n- k-NN\n- 线性回归\n- 朴素贝叶斯\n- 神经网络\n- 逻辑回归\n- 感知器\n- 支持向量机（SVM）\n- 相关向量机（RVM）\n\n聚类\n\n- BIRCH\n- 层次\n- k平均\n- 期望最大化（EM）\n\n- DBSCAN\n- OPTICS\n- 均值飘移\n\n降维\n- 因子分析\n- CCA\n- ICA\n- LDA\n- NMF\n- PCA\n- LASSO\n- t-SNE\n\n结构预测\n- 概率图模型（贝叶斯网络，CRF, HMM）\n\n异常检测\n- k-NN\n- 局部离群因子\n\n神经网络\n- 自编码\n- 深度学习\n- 多层感知机\n- RNN\n- 受限玻尔兹曼机\n- SOM\n- CNN\n\n理论\n- 偏差/方差偏置(Bias-Variance Tradeoff)：一般而言高偏差意味着欠拟合，高方差意味着过拟合\n- 计算学习理论\n- 经验风险最小化\n- PAC学习\n- 统计学习\n- VC理论\n\n\n\n\n- - -\nTHE END.\n","source":"_posts/2017-03-05-MachineLearningFAQ.md","raw":"---\ndate: 2017-03-05\ntitle: 学习MachineLearning过程中的一些问题\ntags: 机器学习\ncategory: 机器学习\nlayout: default\n---\n\n#### 环境相关\n\n0. [python](https://app.yinxiang.com/shard/s13/nl/621958455/54409a58-c91d-4d22-b457-6e5fbb721a3c/)\n\n1. [Anaconda](https://www.continuum.io/downloads/)\n> Anaconda 本质上是一个软件发行版 ，包含了 conda、Python 等 180 多个科学包及其依赖项。\n\n2. [pydot](https://pypi.python.org/pypi/pydot)\n> pydot是用python实现的绘制graphviz的接口。\n\n3. [graphviz](http://www.graphviz.org/)\n> Graphviz的是AT&T Labs Research开发的图形绘制工具软件\n如果运行过程中报出 `Exception: \"dot\" not found in path.` 则需要安装 `graphviz`，如果已经安装了Anacoda，直接执行 `conda install graphviz`。\n\n<!--more-->\n\n#### 概念\n\n问题\n\n- 分类\n- 聚类\n- 回归\n- 异常检测\n- 关联规则\n- 强化学习\n- 结构预测\n- 特征学习\n- 在线学习\n- 半监督学习\n- 语法归纳\n\n - - -\n\n监督学习\n- 分类 ： 输出值如果是不连续的监督学习算法称为分类器（classifier）。\n- 回归 ： 输出值连续的监督学习算法称为回归函数（regression function）。\n\n- - -\n线性回归\n-  代价函数 ：\n\n> $$J(\\theta)=\\frac{1}{2m}\\sum_{i=1}^m{({h_\\theta }({x^{(i)}})-{y^{(i)}})^{2}}$$\n\n> 向量化实现 : $$J(\\theta)=\\frac{1}{2m}(X*\\theta-\\vec{y})^{T} (X*\\theta-\\vec{y})$$\n\n-  归一化 :\n\n> $$y_{i}=\\frac{x_{i}-\\overline{x}}{s(x)}$$\n\n-  梯度下降算法 :\n\n> 代价函数对  $$\\theta_j$$ 求偏导得到 :\n$$\\frac{\\partial{J(\\theta)}}{\\partial{\\theta_j}} = \\frac{1}{m}\\sum\\limits_{i = 1}^m {[({h_\\theta }({x^{(i)}})-{y^{(i)}})x_j^{(i)}]}$$\n\n> 所以对 $$\\theta$$ 的更新可以写为 : $${\\theta_j}={\\theta_j}-\\alpha\\frac{1}{m}\\sum\\limits_{i=1}^m {[({h_\\theta }({x^{(i)}})-{y^{(i)}})x_j^{(i)}]}$$\n\n> 向量化实现 : $${\\theta_j} = {\\theta_j}-{\\alpha\\frac{1}{m}(X^T(X*{\\theta- \\vec{y}}))}$$\n\n分类器\n- 人工神经网络\n- 支持向量机（support vector machine）\n- 最邻近法\n- 高斯混合模型\n- 朴素贝叶斯法\n- 决策树（decision tree）\n- 径向量函数分类\n\n解决步骤\n1. 决定训练的样本类型\n2. 搜集训练集\n3. 决定学习函数的特征表示\n4. 决定学习函数的结构以及对应的学习算法\n5. 完成设计\n6. 评价学习函数的准确性\n\n\n- - -\n\n- 决策树\n- 表征（装袋, 提升，随机森林）\n- k-NN\n- 线性回归\n- 朴素贝叶斯\n- 神经网络\n- 逻辑回归\n- 感知器\n- 支持向量机（SVM）\n- 相关向量机（RVM）\n\n聚类\n\n- BIRCH\n- 层次\n- k平均\n- 期望最大化（EM）\n\n- DBSCAN\n- OPTICS\n- 均值飘移\n\n降维\n- 因子分析\n- CCA\n- ICA\n- LDA\n- NMF\n- PCA\n- LASSO\n- t-SNE\n\n结构预测\n- 概率图模型（贝叶斯网络，CRF, HMM）\n\n异常检测\n- k-NN\n- 局部离群因子\n\n神经网络\n- 自编码\n- 深度学习\n- 多层感知机\n- RNN\n- 受限玻尔兹曼机\n- SOM\n- CNN\n\n理论\n- 偏差/方差偏置(Bias-Variance Tradeoff)：一般而言高偏差意味着欠拟合，高方差意味着过拟合\n- 计算学习理论\n- 经验风险最小化\n- PAC学习\n- 统计学习\n- VC理论\n\n\n\n\n- - -\nTHE END.\n","slug":"2017-03-05-MachineLearningFAQ","published":1,"updated":"2018-05-02T08:39:16.343Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9m000nuro5x6innf6c","content":"<h4 id=\"环境相关\"><a href=\"#环境相关\" class=\"headerlink\" title=\"环境相关\"></a>环境相关</h4><ol>\n<li><p><a href=\"https://app.yinxiang.com/shard/s13/nl/621958455/54409a58-c91d-4d22-b457-6e5fbb721a3c/\" target=\"_blank\" rel=\"external\">python</a></p>\n</li>\n<li><p><a href=\"https://www.continuum.io/downloads/\" target=\"_blank\" rel=\"external\">Anaconda</a></p>\n<blockquote>\n<p>Anaconda 本质上是一个软件发行版 ，包含了 conda、Python 等 180 多个科学包及其依赖项。</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://pypi.python.org/pypi/pydot\" target=\"_blank\" rel=\"external\">pydot</a></p>\n<blockquote>\n<p>pydot是用python实现的绘制graphviz的接口。</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://www.graphviz.org/\" target=\"_blank\" rel=\"external\">graphviz</a></p>\n<blockquote>\n<p>Graphviz的是AT&amp;T Labs Research开发的图形绘制工具软件<br>如果运行过程中报出 <code>Exception: &quot;dot&quot; not found in path.</code> 则需要安装 <code>graphviz</code>，如果已经安装了Anacoda，直接执行 <code>conda install graphviz</code>。</p>\n</blockquote>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>问题</p>\n<ul>\n<li>分类</li>\n<li>聚类</li>\n<li>回归</li>\n<li>异常检测</li>\n<li>关联规则</li>\n<li>强化学习</li>\n<li>结构预测</li>\n<li>特征学习</li>\n<li>在线学习</li>\n<li>半监督学习</li>\n<li><p>语法归纳</p>\n<hr>\n</li>\n</ul>\n<p>监督学习</p>\n<ul>\n<li>分类 ： 输出值如果是不连续的监督学习算法称为分类器（classifier）。</li>\n<li>回归 ： 输出值连续的监督学习算法称为回归函数（regression function）。</li>\n</ul>\n<hr>\n<p>线性回归</p>\n<ul>\n<li>代价函数 ：</li>\n</ul>\n<blockquote>\n<script type=\"math/tex; mode=display\">J(\\theta)=\\frac{1}{2m}\\sum_{i=1}^m{({h_\\theta }({x^{(i)}})-{y^{(i)}})^{2}}</script><p>向量化实现 : <script type=\"math/tex\">J(\\theta)=\\frac{1}{2m}(X*\\theta-\\vec{y})^{T} (X*\\theta-\\vec{y})</script></p>\n</blockquote>\n<ul>\n<li>归一化 :</li>\n</ul>\n<blockquote>\n<script type=\"math/tex; mode=display\">y_{i}=\\frac{x_{i}-\\overline{x}}{s(x)}</script></blockquote>\n<ul>\n<li>梯度下降算法 :</li>\n</ul>\n<blockquote>\n<p>代价函数对  <script type=\"math/tex\">\\theta_j</script> 求偏导得到 :</p>\n<script type=\"math/tex; mode=display\">\\frac{\\partial{J(\\theta)}}{\\partial{\\theta_j}} = \\frac{1}{m}\\sum\\limits_{i = 1}^m {[({h_\\theta }({x^{(i)}})-{y^{(i)}})x_j^{(i)}]}</script><p>所以对 <script type=\"math/tex\">\\theta</script> 的更新可以写为 : <script type=\"math/tex\">{\\theta_j}={\\theta_j}-\\alpha\\frac{1}{m}\\sum\\limits_{i=1}^m {[({h_\\theta }({x^{(i)}})-{y^{(i)}})x_j^{(i)}]}</script></p>\n<p>向量化实现 : <script type=\"math/tex\">{\\theta_j} = {\\theta_j}-{\\alpha\\frac{1}{m}(X^T(X*{\\theta- \\vec{y}}))}</script></p>\n</blockquote>\n<p>分类器</p>\n<ul>\n<li>人工神经网络</li>\n<li>支持向量机（support vector machine）</li>\n<li>最邻近法</li>\n<li>高斯混合模型</li>\n<li>朴素贝叶斯法</li>\n<li>决策树（decision tree）</li>\n<li>径向量函数分类</li>\n</ul>\n<p>解决步骤</p>\n<ol>\n<li>决定训练的样本类型</li>\n<li>搜集训练集</li>\n<li>决定学习函数的特征表示</li>\n<li>决定学习函数的结构以及对应的学习算法</li>\n<li>完成设计</li>\n<li>评价学习函数的准确性</li>\n</ol>\n<hr>\n<ul>\n<li>决策树</li>\n<li>表征（装袋, 提升，随机森林）</li>\n<li>k-NN</li>\n<li>线性回归</li>\n<li>朴素贝叶斯</li>\n<li>神经网络</li>\n<li>逻辑回归</li>\n<li>感知器</li>\n<li>支持向量机（SVM）</li>\n<li>相关向量机（RVM）</li>\n</ul>\n<p>聚类</p>\n<ul>\n<li>BIRCH</li>\n<li>层次</li>\n<li>k平均</li>\n<li><p>期望最大化（EM）</p>\n</li>\n<li><p>DBSCAN</p>\n</li>\n<li>OPTICS</li>\n<li>均值飘移</li>\n</ul>\n<p>降维</p>\n<ul>\n<li>因子分析</li>\n<li>CCA</li>\n<li>ICA</li>\n<li>LDA</li>\n<li>NMF</li>\n<li>PCA</li>\n<li>LASSO</li>\n<li>t-SNE</li>\n</ul>\n<p>结构预测</p>\n<ul>\n<li>概率图模型（贝叶斯网络，CRF, HMM）</li>\n</ul>\n<p>异常检测</p>\n<ul>\n<li>k-NN</li>\n<li>局部离群因子</li>\n</ul>\n<p>神经网络</p>\n<ul>\n<li>自编码</li>\n<li>深度学习</li>\n<li>多层感知机</li>\n<li>RNN</li>\n<li>受限玻尔兹曼机</li>\n<li>SOM</li>\n<li>CNN</li>\n</ul>\n<p>理论</p>\n<ul>\n<li>偏差/方差偏置(Bias-Variance Tradeoff)：一般而言高偏差意味着欠拟合，高方差意味着过拟合</li>\n<li>计算学习理论</li>\n<li>经验风险最小化</li>\n<li>PAC学习</li>\n<li>统计学习</li>\n<li>VC理论</li>\n</ul>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"环境相关\"><a href=\"#环境相关\" class=\"headerlink\" title=\"环境相关\"></a>环境相关</h4><ol>\n<li><p><a href=\"https://app.yinxiang.com/shard/s13/nl/621958455/54409a58-c91d-4d22-b457-6e5fbb721a3c/\" target=\"_blank\" rel=\"external\">python</a></p>\n</li>\n<li><p><a href=\"https://www.continuum.io/downloads/\" target=\"_blank\" rel=\"external\">Anaconda</a></p>\n<blockquote>\n<p>Anaconda 本质上是一个软件发行版 ，包含了 conda、Python 等 180 多个科学包及其依赖项。</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://pypi.python.org/pypi/pydot\" target=\"_blank\" rel=\"external\">pydot</a></p>\n<blockquote>\n<p>pydot是用python实现的绘制graphviz的接口。</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://www.graphviz.org/\" target=\"_blank\" rel=\"external\">graphviz</a></p>\n<blockquote>\n<p>Graphviz的是AT&amp;T Labs Research开发的图形绘制工具软件<br>如果运行过程中报出 <code>Exception: &quot;dot&quot; not found in path.</code> 则需要安装 <code>graphviz</code>，如果已经安装了Anacoda，直接执行 <code>conda install graphviz</code>。</p>\n</blockquote>\n</li>\n</ol>","more":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>问题</p>\n<ul>\n<li>分类</li>\n<li>聚类</li>\n<li>回归</li>\n<li>异常检测</li>\n<li>关联规则</li>\n<li>强化学习</li>\n<li>结构预测</li>\n<li>特征学习</li>\n<li>在线学习</li>\n<li>半监督学习</li>\n<li><p>语法归纳</p>\n<hr>\n</li>\n</ul>\n<p>监督学习</p>\n<ul>\n<li>分类 ： 输出值如果是不连续的监督学习算法称为分类器（classifier）。</li>\n<li>回归 ： 输出值连续的监督学习算法称为回归函数（regression function）。</li>\n</ul>\n<hr>\n<p>线性回归</p>\n<ul>\n<li>代价函数 ：</li>\n</ul>\n<blockquote>\n<script type=\"math/tex; mode=display\">J(\\theta)=\\frac{1}{2m}\\sum_{i=1}^m{({h_\\theta }({x^{(i)}})-{y^{(i)}})^{2}}</script><p>向量化实现 : <script type=\"math/tex\">J(\\theta)=\\frac{1}{2m}(X*\\theta-\\vec{y})^{T} (X*\\theta-\\vec{y})</script></p>\n</blockquote>\n<ul>\n<li>归一化 :</li>\n</ul>\n<blockquote>\n<script type=\"math/tex; mode=display\">y_{i}=\\frac{x_{i}-\\overline{x}}{s(x)}</script></blockquote>\n<ul>\n<li>梯度下降算法 :</li>\n</ul>\n<blockquote>\n<p>代价函数对  <script type=\"math/tex\">\\theta_j</script> 求偏导得到 :</p>\n<script type=\"math/tex; mode=display\">\\frac{\\partial{J(\\theta)}}{\\partial{\\theta_j}} = \\frac{1}{m}\\sum\\limits_{i = 1}^m {[({h_\\theta }({x^{(i)}})-{y^{(i)}})x_j^{(i)}]}</script><p>所以对 <script type=\"math/tex\">\\theta</script> 的更新可以写为 : <script type=\"math/tex\">{\\theta_j}={\\theta_j}-\\alpha\\frac{1}{m}\\sum\\limits_{i=1}^m {[({h_\\theta }({x^{(i)}})-{y^{(i)}})x_j^{(i)}]}</script></p>\n<p>向量化实现 : <script type=\"math/tex\">{\\theta_j} = {\\theta_j}-{\\alpha\\frac{1}{m}(X^T(X*{\\theta- \\vec{y}}))}</script></p>\n</blockquote>\n<p>分类器</p>\n<ul>\n<li>人工神经网络</li>\n<li>支持向量机（support vector machine）</li>\n<li>最邻近法</li>\n<li>高斯混合模型</li>\n<li>朴素贝叶斯法</li>\n<li>决策树（decision tree）</li>\n<li>径向量函数分类</li>\n</ul>\n<p>解决步骤</p>\n<ol>\n<li>决定训练的样本类型</li>\n<li>搜集训练集</li>\n<li>决定学习函数的特征表示</li>\n<li>决定学习函数的结构以及对应的学习算法</li>\n<li>完成设计</li>\n<li>评价学习函数的准确性</li>\n</ol>\n<hr>\n<ul>\n<li>决策树</li>\n<li>表征（装袋, 提升，随机森林）</li>\n<li>k-NN</li>\n<li>线性回归</li>\n<li>朴素贝叶斯</li>\n<li>神经网络</li>\n<li>逻辑回归</li>\n<li>感知器</li>\n<li>支持向量机（SVM）</li>\n<li>相关向量机（RVM）</li>\n</ul>\n<p>聚类</p>\n<ul>\n<li>BIRCH</li>\n<li>层次</li>\n<li>k平均</li>\n<li><p>期望最大化（EM）</p>\n</li>\n<li><p>DBSCAN</p>\n</li>\n<li>OPTICS</li>\n<li>均值飘移</li>\n</ul>\n<p>降维</p>\n<ul>\n<li>因子分析</li>\n<li>CCA</li>\n<li>ICA</li>\n<li>LDA</li>\n<li>NMF</li>\n<li>PCA</li>\n<li>LASSO</li>\n<li>t-SNE</li>\n</ul>\n<p>结构预测</p>\n<ul>\n<li>概率图模型（贝叶斯网络，CRF, HMM）</li>\n</ul>\n<p>异常检测</p>\n<ul>\n<li>k-NN</li>\n<li>局部离群因子</li>\n</ul>\n<p>神经网络</p>\n<ul>\n<li>自编码</li>\n<li>深度学习</li>\n<li>多层感知机</li>\n<li>RNN</li>\n<li>受限玻尔兹曼机</li>\n<li>SOM</li>\n<li>CNN</li>\n</ul>\n<p>理论</p>\n<ul>\n<li>偏差/方差偏置(Bias-Variance Tradeoff)：一般而言高偏差意味着欠拟合，高方差意味着过拟合</li>\n<li>计算学习理论</li>\n<li>经验风险最小化</li>\n<li>PAC学习</li>\n<li>统计学习</li>\n<li>VC理论</li>\n</ul>\n<hr>\n<p>THE END.</p>"},{"title":"20170927.1","date":"2017-09-26T16:00:00.000Z","banner":"http://ox0p9pctg.bkt.clouddn.com/201709271.jpg","thumbnail":"http://ox0p9pctg.bkt.clouddn.com/201709271.jpg","_content":"\n#### 题 1:\n\n设 $0 < a < b$ ,证明：$\\ln \\dfrac {b} {a}>2\\dfrac {b-a} {b+a}$.\n\n<!--more-->\n\n- - -\n\n#### 证明:\n\n$\\ln \\dfrac {b} {a}>\\dfrac {\\dfrac {b} {a}-1} {\\dfrac {b} {a}+1}$ , 令 $\\dfrac {b} {a}=x$ , 即证 $\\ln x>2\\dfrac {x-1} {x+1}$。\n\n令 F(x) = (1+x)lnx-2(x-1) ，则：\n$F'\\left( x\\right) =\\dfrac {1} {x}+\\ln x-1$\n$F''\\left( x\\right) =-\\dfrac {1} {x^{2}}+\\dfrac {1} {x}=\\dfrac {1} {x}\\left( 1-\\dfrac {1} {x}\\right) > 0$\n\n因此 F'(x) > F'(1) = 0 ,故 F(x) >F(1)=0。得证。\n\n- - -\nTHE END.\n","source":"_posts/2017-09-27-1.md","raw":"---\ntitle: 20170927.1\ndate: 2017-09-27\ncategories: 微分不等式\nbanner: http://ox0p9pctg.bkt.clouddn.com/201709271.jpg\nthumbnail: http://ox0p9pctg.bkt.clouddn.com/201709271.jpg\n---\n\n#### 题 1:\n\n设 $0 < a < b$ ,证明：$\\ln \\dfrac {b} {a}>2\\dfrac {b-a} {b+a}$.\n\n<!--more-->\n\n- - -\n\n#### 证明:\n\n$\\ln \\dfrac {b} {a}>\\dfrac {\\dfrac {b} {a}-1} {\\dfrac {b} {a}+1}$ , 令 $\\dfrac {b} {a}=x$ , 即证 $\\ln x>2\\dfrac {x-1} {x+1}$。\n\n令 F(x) = (1+x)lnx-2(x-1) ，则：\n$F'\\left( x\\right) =\\dfrac {1} {x}+\\ln x-1$\n$F''\\left( x\\right) =-\\dfrac {1} {x^{2}}+\\dfrac {1} {x}=\\dfrac {1} {x}\\left( 1-\\dfrac {1} {x}\\right) > 0$\n\n因此 F'(x) > F'(1) = 0 ,故 F(x) >F(1)=0。得证。\n\n- - -\nTHE END.\n","slug":"2017-09-27-1","published":1,"updated":"2018-02-24T05:24:41.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsb9n000quro5wnhpfbb6","content":"<h4 id=\"题-1\"><a href=\"#题-1\" class=\"headerlink\" title=\"题 1:\"></a>题 1:</h4><p>设 $0 &lt; a &lt; b$ ,证明：$\\ln \\dfrac {b} {a}&gt;2\\dfrac {b-a} {b+a}$.</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明:\"></a>证明:</h4><p>$\\ln \\dfrac {b} {a}&gt;\\dfrac {\\dfrac {b} {a}-1} {\\dfrac {b} {a}+1}$ , 令 $\\dfrac {b} {a}=x$ , 即证 $\\ln x&gt;2\\dfrac {x-1} {x+1}$。</p>\n<p>令 F(x) = (1+x)lnx-2(x-1) ，则：<br>$F’\\left( x\\right) =\\dfrac {1} {x}+\\ln x-1$<br>$F’’\\left( x\\right) =-\\dfrac {1} {x^{2}}+\\dfrac {1} {x}=\\dfrac {1} {x}\\left( 1-\\dfrac {1} {x}\\right) &gt; 0$</p>\n<p>因此 F’(x) &gt; F’(1) = 0 ,故 F(x) &gt;F(1)=0。得证。</p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"题-1\"><a href=\"#题-1\" class=\"headerlink\" title=\"题 1:\"></a>题 1:</h4><p>设 $0 &lt; a &lt; b$ ,证明：$\\ln \\dfrac {b} {a}&gt;2\\dfrac {b-a} {b+a}$.</p>","more":"<hr>\n<h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明:\"></a>证明:</h4><p>$\\ln \\dfrac {b} {a}&gt;\\dfrac {\\dfrac {b} {a}-1} {\\dfrac {b} {a}+1}$ , 令 $\\dfrac {b} {a}=x$ , 即证 $\\ln x&gt;2\\dfrac {x-1} {x+1}$。</p>\n<p>令 F(x) = (1+x)lnx-2(x-1) ，则：<br>$F’\\left( x\\right) =\\dfrac {1} {x}+\\ln x-1$<br>$F’’\\left( x\\right) =-\\dfrac {1} {x^{2}}+\\dfrac {1} {x}=\\dfrac {1} {x}\\left( 1-\\dfrac {1} {x}\\right) &gt; 0$</p>\n<p>因此 F’(x) &gt; F’(1) = 0 ,故 F(x) &gt;F(1)=0。得证。</p>\n<hr>\n<p>THE END.</p>"},{"title":"Sunday 算法","date":"2017-04-16T16:00:00.000Z","layout":"default","_content":"\n[KMP](https://app.yinxiang.com/shard/s13/nl/2429525/637318f2-3d6a-4c51-833e-350c51081347)算法和[BM](https://app.yinxiang.com/shard/s13/nl/2429525/377ef8db-d58d-435f-bb4c-89b8a01321f1)算法，这两个算法在最坏情况下均具有线性的查找时间。但实际上，KMP算法并不比最简单的c库函数strstr()快多少，而BM算法虽然通常比KMP算法快，但BM算法也还不是现有字符串查找算法中最快的算法，有一种比BM算法更快的查找算法即Sunday算法。\n\n<!--more-->\n\n> Sunday算法由Daniel M.Sunday在1990年提出，它的思想跟BM算法很相似：\n\n只不过Sunday算法是从前往后匹配，在匹配失败时关注的是文本串中参加匹配的最末位字符的下一位字符。\n\n1. 如果该字符没有在模式串中出现则直接跳过，即移动位数 = 匹配串长度 + 1；\n2. 否则，其移动位数 = 模式串中最右端的该字符到末尾的距离+1。\n\n下面举个例子说明下Sunday算法。假定现在要在文本串\"substring searching algorithm\"中查找模式串\"search\"。\n\n1.刚开始时，把模式串与文本串左边对齐：\n\n![setp1](/src/imgs/1704/0407_sunday_setp1.png)\n\n2.结果发现在第2个字符处发现不匹配，不匹配时关注文本串中参加匹配的最末位字符的下一位字符，即标粗的字符 i，因为模式串search中并不存在i，所以模式串直接跳过一大片，向右移动位数 = 匹配串长度 + 1 = 6 + 1 = 7，从 i 之后的那个字符（即字符n）开始下一步的匹配，如下图：\n\n![setp2](/src/imgs/1704/0407_sunday_setp2.png)\n\n3.结果第一个字符就不匹配，再看文本串中参加匹配的最末位字符的下一位字符，是'r'，它出现在模式串中的倒数第3位，于是把模式串向右移动3位（r 到模式串末尾的距离 + 1 = 2 + 1 =3），使两个'r'对齐，如下：\n\n![setp3](/src/imgs/1704/0407_sunday_setp3.png)\n\n4.匹配成功。\n\n回顾整个过程，我们只移动了两次模式串就找到了匹配位置，缘于Sunday算法每一步的移动量都比较大，效率很高。\n\n- - -\nTHE END.\n","source":"_posts/2017-04-17-AlogrithmSunday.md","raw":"---\ntitle: Sunday 算法\ndate: 2017-04-17\nlayout: default\ncategory: Alogrithm\ntags: 字符串匹配\n---\n\n[KMP](https://app.yinxiang.com/shard/s13/nl/2429525/637318f2-3d6a-4c51-833e-350c51081347)算法和[BM](https://app.yinxiang.com/shard/s13/nl/2429525/377ef8db-d58d-435f-bb4c-89b8a01321f1)算法，这两个算法在最坏情况下均具有线性的查找时间。但实际上，KMP算法并不比最简单的c库函数strstr()快多少，而BM算法虽然通常比KMP算法快，但BM算法也还不是现有字符串查找算法中最快的算法，有一种比BM算法更快的查找算法即Sunday算法。\n\n<!--more-->\n\n> Sunday算法由Daniel M.Sunday在1990年提出，它的思想跟BM算法很相似：\n\n只不过Sunday算法是从前往后匹配，在匹配失败时关注的是文本串中参加匹配的最末位字符的下一位字符。\n\n1. 如果该字符没有在模式串中出现则直接跳过，即移动位数 = 匹配串长度 + 1；\n2. 否则，其移动位数 = 模式串中最右端的该字符到末尾的距离+1。\n\n下面举个例子说明下Sunday算法。假定现在要在文本串\"substring searching algorithm\"中查找模式串\"search\"。\n\n1.刚开始时，把模式串与文本串左边对齐：\n\n![setp1](/src/imgs/1704/0407_sunday_setp1.png)\n\n2.结果发现在第2个字符处发现不匹配，不匹配时关注文本串中参加匹配的最末位字符的下一位字符，即标粗的字符 i，因为模式串search中并不存在i，所以模式串直接跳过一大片，向右移动位数 = 匹配串长度 + 1 = 6 + 1 = 7，从 i 之后的那个字符（即字符n）开始下一步的匹配，如下图：\n\n![setp2](/src/imgs/1704/0407_sunday_setp2.png)\n\n3.结果第一个字符就不匹配，再看文本串中参加匹配的最末位字符的下一位字符，是'r'，它出现在模式串中的倒数第3位，于是把模式串向右移动3位（r 到模式串末尾的距离 + 1 = 2 + 1 =3），使两个'r'对齐，如下：\n\n![setp3](/src/imgs/1704/0407_sunday_setp3.png)\n\n4.匹配成功。\n\n回顾整个过程，我们只移动了两次模式串就找到了匹配位置，缘于Sunday算法每一步的移动量都比较大，效率很高。\n\n- - -\nTHE END.\n","slug":"2017-04-17-AlogrithmSunday","published":1,"updated":"2018-03-14T06:12:40.670Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9p000vuro5i1i3knjx","content":"<p><a href=\"https://app.yinxiang.com/shard/s13/nl/2429525/637318f2-3d6a-4c51-833e-350c51081347\" target=\"_blank\" rel=\"external\">KMP</a>算法和<a href=\"https://app.yinxiang.com/shard/s13/nl/2429525/377ef8db-d58d-435f-bb4c-89b8a01321f1\" target=\"_blank\" rel=\"external\">BM</a>算法，这两个算法在最坏情况下均具有线性的查找时间。但实际上，KMP算法并不比最简单的c库函数strstr()快多少，而BM算法虽然通常比KMP算法快，但BM算法也还不是现有字符串查找算法中最快的算法，有一种比BM算法更快的查找算法即Sunday算法。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>Sunday算法由Daniel M.Sunday在1990年提出，它的思想跟BM算法很相似：</p>\n</blockquote>\n<p>只不过Sunday算法是从前往后匹配，在匹配失败时关注的是文本串中参加匹配的最末位字符的下一位字符。</p>\n<ol>\n<li>如果该字符没有在模式串中出现则直接跳过，即移动位数 = 匹配串长度 + 1；</li>\n<li>否则，其移动位数 = 模式串中最右端的该字符到末尾的距离+1。</li>\n</ol>\n<p>下面举个例子说明下Sunday算法。假定现在要在文本串”substring searching algorithm”中查找模式串”search”。</p>\n<p>1.刚开始时，把模式串与文本串左边对齐：</p>\n<p><img src=\"/src/imgs/1704/0407_sunday_setp1.png\" alt=\"setp1\"></p>\n<p>2.结果发现在第2个字符处发现不匹配，不匹配时关注文本串中参加匹配的最末位字符的下一位字符，即标粗的字符 i，因为模式串search中并不存在i，所以模式串直接跳过一大片，向右移动位数 = 匹配串长度 + 1 = 6 + 1 = 7，从 i 之后的那个字符（即字符n）开始下一步的匹配，如下图：</p>\n<p><img src=\"/src/imgs/1704/0407_sunday_setp2.png\" alt=\"setp2\"></p>\n<p>3.结果第一个字符就不匹配，再看文本串中参加匹配的最末位字符的下一位字符，是’r’，它出现在模式串中的倒数第3位，于是把模式串向右移动3位（r 到模式串末尾的距离 + 1 = 2 + 1 =3），使两个’r’对齐，如下：</p>\n<p><img src=\"/src/imgs/1704/0407_sunday_setp3.png\" alt=\"setp3\"></p>\n<p>4.匹配成功。</p>\n<p>回顾整个过程，我们只移动了两次模式串就找到了匹配位置，缘于Sunday算法每一步的移动量都比较大，效率很高。</p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://app.yinxiang.com/shard/s13/nl/2429525/637318f2-3d6a-4c51-833e-350c51081347\" target=\"_blank\" rel=\"external\">KMP</a>算法和<a href=\"https://app.yinxiang.com/shard/s13/nl/2429525/377ef8db-d58d-435f-bb4c-89b8a01321f1\" target=\"_blank\" rel=\"external\">BM</a>算法，这两个算法在最坏情况下均具有线性的查找时间。但实际上，KMP算法并不比最简单的c库函数strstr()快多少，而BM算法虽然通常比KMP算法快，但BM算法也还不是现有字符串查找算法中最快的算法，有一种比BM算法更快的查找算法即Sunday算法。</p>","more":"<blockquote>\n<p>Sunday算法由Daniel M.Sunday在1990年提出，它的思想跟BM算法很相似：</p>\n</blockquote>\n<p>只不过Sunday算法是从前往后匹配，在匹配失败时关注的是文本串中参加匹配的最末位字符的下一位字符。</p>\n<ol>\n<li>如果该字符没有在模式串中出现则直接跳过，即移动位数 = 匹配串长度 + 1；</li>\n<li>否则，其移动位数 = 模式串中最右端的该字符到末尾的距离+1。</li>\n</ol>\n<p>下面举个例子说明下Sunday算法。假定现在要在文本串”substring searching algorithm”中查找模式串”search”。</p>\n<p>1.刚开始时，把模式串与文本串左边对齐：</p>\n<p><img src=\"/src/imgs/1704/0407_sunday_setp1.png\" alt=\"setp1\"></p>\n<p>2.结果发现在第2个字符处发现不匹配，不匹配时关注文本串中参加匹配的最末位字符的下一位字符，即标粗的字符 i，因为模式串search中并不存在i，所以模式串直接跳过一大片，向右移动位数 = 匹配串长度 + 1 = 6 + 1 = 7，从 i 之后的那个字符（即字符n）开始下一步的匹配，如下图：</p>\n<p><img src=\"/src/imgs/1704/0407_sunday_setp2.png\" alt=\"setp2\"></p>\n<p>3.结果第一个字符就不匹配，再看文本串中参加匹配的最末位字符的下一位字符，是’r’，它出现在模式串中的倒数第3位，于是把模式串向右移动3位（r 到模式串末尾的距离 + 1 = 2 + 1 =3），使两个’r’对齐，如下：</p>\n<p><img src=\"/src/imgs/1704/0407_sunday_setp3.png\" alt=\"setp3\"></p>\n<p>4.匹配成功。</p>\n<p>回顾整个过程，我们只移动了两次模式串就找到了匹配位置，缘于Sunday算法每一步的移动量都比较大，效率很高。</p>\n<hr>\n<p>THE END.</p>"},{"title":"Print all sub-array with 0 sum","date":"2017-04-16T16:00:00.000Z","layout":"default","_content":"\n```\nGiven an array of integers, print all subarrays having 0 sum.\n\nFor example,\n\nInput:  { 4, 2, -3, -1, 0, 4 }\nSub-arrays with 0 sum are\n{ -3, -1, 0, 4 }\n{ 0 }\n\nInput:  { 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }\nSub-arrays with 0 sum are\n{ 3, 4, -7 }\n{ 4, -7, 3 }\n{ -7, 3, 1, 3 }\n{ 3, 1, -4 }\n{ 3, 1, 3, 1, -4, -2, -2 }\n{ 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }\n```\n\n<!--more-->\n\n意思就是给定一个数组，找到所有和为0的子数组。\n\n#### 解法1：暴力求解\n\n双重循环，从当前数组开始往后遍历，找到和为0的子数组。时间复杂度是O(n^3)，其中O(n^2)用于遍历出子数组，O(n)用于计算和。\n\n#### 解法2：使用HashMap来解决\n\n构造一个 `Map<Integer, ArrayList> hashMap` 用来存放\n遍历数组，以当前位置（包含当前位置）之前的所有元素之和sum为key，如果hashMap中不存在这个key，则将这个key插入到hashMap中，并将这个元素所在位置插入到对应的ArrayList中。如果hashMap中已经存在这个key，则遍历key对应的ArrayList，以ArrayList中(每个元素所在位置+1)为起始值，当前元素所在位置为结束值，这之间的子数组的和就是0，接着还是要把当前位置插入到已经存在的key所对应的ArrayList中。\n\n##### 举个例子：数组{ 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }\n\n我们来一步一步的分析：\n\n```\n(1)首先初始化的时候插入key为0，对应的ArrayList中插入-1，这样以后如果找到子数组就是从位置0开始了。插入之后hashMap的内容是：\n{0,[-1]}\n\n(2)位置0的元素为3，hashMap中不含(0+3=3)。插入之后hashMap的内容是：\n{0,[-1]},\n{3,[0]}\n\n(3)位置1的元素是4,hashMap中不含(3+4=7)，插入之后hashMap的内容是：\n{0,[-1]},\n{3,[0]},\n{7,[1]}\n\n(4)位置2的元素是-7,hashMap包含(-7+7=0)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0]},\n{7,[1]}\n并且此时有一个满足条件的子数组，对应的位置序列：\n[0,1,2]\n\n(5)位置3的元素是3,hashMap包含(0+3=3)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1]}\n并且此时有一个满足条件的子数组，对应的位置序列：\n[1,2,3]\n\n(6)位置4的元素是1,hashMap不含(1+3=4)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1]},\n{4,[4]}\n\n(7)位置5的元素是3,hashMap包含(4+3=7)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4]}\n并且此时有一个满足条件的子数组，对应的位置序列：\n[2,3,4,5]\n\n(8)位置6的元素是1,hashMap不含(7+1=8)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4]},\n{8,[6]}\n\n(9)位置7的元素是-4,hashMap包含(-4+8=4)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4,7]},\n{8,[6]}\n并且此时有一个满足条件的子数组，对应的位置序列：\n[5,6,7]\n\n(10)位置8的元素是-2,hashMap包含(-2+4=2)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4,7]},\n{8,[6]},\n{2,[8]}\n\n(11)位置9的元素是-2,hashMap包含(-2+2=0)，插入之后hashMap的内容是：\n{0,[-1,2,9]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4,7]},\n{8,[6]},\n{2,[8]}\n并且此时有两个满足条件的子数组，对应的位置序列：\n[0,1,2,3,4,5,6,7,8,9]\n[3,4,5,6,7,8,9]\n\n\n```\n\n> 来总结一下这种解法的:这种解法的时间复杂度是O(n)。\n初始化的时候向hashMap中插入了key为0的一个元素，这一步很重要。之后从数组中遍历出的元素累加，每次累加得到的结果肯定会发生变化。如果发现某一次累加之后的值之前已经出现过一次，说明什么，说明在第一次出现这个值之后中间的累加操作一定会使得第一次之后（不包含第一次）到第二次（包含第二次）的和的值为0。\n\n￼￼结合下面这张折线图来看一下：\n![rint_subarray](/src/imgs/1704/0419_print_subarray.png)\n\n从-1位置开始，初始sum为0，经过了0，1，2三个位置的元素累加之后，sum又重新变为0。这期间发生了什么呢，依次发生了+3，+4，-7的操作，所以一旦发现两次的累加的和相等的话，表明这之间一定经过了和为0的加减操作。同理，其他几个位置的变化也是如此。\n\n#### 我们再用数学公式抽象一下：\n\n设从 0 到 i 位置的累加和为 Si且i位置的元素为e[i]，从 0 到 n 位置的累加和为 Sn且n位置的元素为e[n]，Si = Sn。\n\n从累加的定义我们知道：\n\n$$S_{i} + e[i+1] = S_{i+1} $$\n\n于是可以得到：\n\n$$S_i + e[i+1] + e[i+2] + ... + e[n] = S_n$$\n\n又有：$$S_i = S_n$$\n\n所以 `e[i+1] + e[i+2] + ... + e[n]  = 0` 。\n也就是从 i+1 开始到 n 的子数组之和为0\n\n- - -\nLink : [find-sub-array-with-0-sum](http://www.techiedelight.com/find-sub-array-with-0-sum/)\n- - -\nTHE END.\n","source":"_posts/2017-04-19-AlogrithmPrintSubarray .md","raw":"---\ntitle: Print all sub-array with 0 sum\ndate: 2017-04-17\nlayout: default\ncategory: Alogrithm\ntags: DP\n---\n\n```\nGiven an array of integers, print all subarrays having 0 sum.\n\nFor example,\n\nInput:  { 4, 2, -3, -1, 0, 4 }\nSub-arrays with 0 sum are\n{ -3, -1, 0, 4 }\n{ 0 }\n\nInput:  { 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }\nSub-arrays with 0 sum are\n{ 3, 4, -7 }\n{ 4, -7, 3 }\n{ -7, 3, 1, 3 }\n{ 3, 1, -4 }\n{ 3, 1, 3, 1, -4, -2, -2 }\n{ 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }\n```\n\n<!--more-->\n\n意思就是给定一个数组，找到所有和为0的子数组。\n\n#### 解法1：暴力求解\n\n双重循环，从当前数组开始往后遍历，找到和为0的子数组。时间复杂度是O(n^3)，其中O(n^2)用于遍历出子数组，O(n)用于计算和。\n\n#### 解法2：使用HashMap来解决\n\n构造一个 `Map<Integer, ArrayList> hashMap` 用来存放\n遍历数组，以当前位置（包含当前位置）之前的所有元素之和sum为key，如果hashMap中不存在这个key，则将这个key插入到hashMap中，并将这个元素所在位置插入到对应的ArrayList中。如果hashMap中已经存在这个key，则遍历key对应的ArrayList，以ArrayList中(每个元素所在位置+1)为起始值，当前元素所在位置为结束值，这之间的子数组的和就是0，接着还是要把当前位置插入到已经存在的key所对应的ArrayList中。\n\n##### 举个例子：数组{ 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }\n\n我们来一步一步的分析：\n\n```\n(1)首先初始化的时候插入key为0，对应的ArrayList中插入-1，这样以后如果找到子数组就是从位置0开始了。插入之后hashMap的内容是：\n{0,[-1]}\n\n(2)位置0的元素为3，hashMap中不含(0+3=3)。插入之后hashMap的内容是：\n{0,[-1]},\n{3,[0]}\n\n(3)位置1的元素是4,hashMap中不含(3+4=7)，插入之后hashMap的内容是：\n{0,[-1]},\n{3,[0]},\n{7,[1]}\n\n(4)位置2的元素是-7,hashMap包含(-7+7=0)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0]},\n{7,[1]}\n并且此时有一个满足条件的子数组，对应的位置序列：\n[0,1,2]\n\n(5)位置3的元素是3,hashMap包含(0+3=3)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1]}\n并且此时有一个满足条件的子数组，对应的位置序列：\n[1,2,3]\n\n(6)位置4的元素是1,hashMap不含(1+3=4)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1]},\n{4,[4]}\n\n(7)位置5的元素是3,hashMap包含(4+3=7)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4]}\n并且此时有一个满足条件的子数组，对应的位置序列：\n[2,3,4,5]\n\n(8)位置6的元素是1,hashMap不含(7+1=8)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4]},\n{8,[6]}\n\n(9)位置7的元素是-4,hashMap包含(-4+8=4)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4,7]},\n{8,[6]}\n并且此时有一个满足条件的子数组，对应的位置序列：\n[5,6,7]\n\n(10)位置8的元素是-2,hashMap包含(-2+4=2)，插入之后hashMap的内容是：\n{0,[-1,2]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4,7]},\n{8,[6]},\n{2,[8]}\n\n(11)位置9的元素是-2,hashMap包含(-2+2=0)，插入之后hashMap的内容是：\n{0,[-1,2,9]},\n{3,[0,3]},\n{7,[1,5]},\n{4,[4,7]},\n{8,[6]},\n{2,[8]}\n并且此时有两个满足条件的子数组，对应的位置序列：\n[0,1,2,3,4,5,6,7,8,9]\n[3,4,5,6,7,8,9]\n\n\n```\n\n> 来总结一下这种解法的:这种解法的时间复杂度是O(n)。\n初始化的时候向hashMap中插入了key为0的一个元素，这一步很重要。之后从数组中遍历出的元素累加，每次累加得到的结果肯定会发生变化。如果发现某一次累加之后的值之前已经出现过一次，说明什么，说明在第一次出现这个值之后中间的累加操作一定会使得第一次之后（不包含第一次）到第二次（包含第二次）的和的值为0。\n\n￼￼结合下面这张折线图来看一下：\n![rint_subarray](/src/imgs/1704/0419_print_subarray.png)\n\n从-1位置开始，初始sum为0，经过了0，1，2三个位置的元素累加之后，sum又重新变为0。这期间发生了什么呢，依次发生了+3，+4，-7的操作，所以一旦发现两次的累加的和相等的话，表明这之间一定经过了和为0的加减操作。同理，其他几个位置的变化也是如此。\n\n#### 我们再用数学公式抽象一下：\n\n设从 0 到 i 位置的累加和为 Si且i位置的元素为e[i]，从 0 到 n 位置的累加和为 Sn且n位置的元素为e[n]，Si = Sn。\n\n从累加的定义我们知道：\n\n$$S_{i} + e[i+1] = S_{i+1} $$\n\n于是可以得到：\n\n$$S_i + e[i+1] + e[i+2] + ... + e[n] = S_n$$\n\n又有：$$S_i = S_n$$\n\n所以 `e[i+1] + e[i+2] + ... + e[n]  = 0` 。\n也就是从 i+1 开始到 n 的子数组之和为0\n\n- - -\nLink : [find-sub-array-with-0-sum](http://www.techiedelight.com/find-sub-array-with-0-sum/)\n- - -\nTHE END.\n","slug":"2017-04-19-AlogrithmPrintSubarray ","published":1,"updated":"2018-03-14T06:12:40.671Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9q000yuro5hf5x4qu8","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given an array of integers, print all subarrays having 0 sum.</div><div class=\"line\"></div><div class=\"line\">For example,</div><div class=\"line\"></div><div class=\"line\">Input:  &#123; 4, 2, -3, -1, 0, 4 &#125;</div><div class=\"line\">Sub-arrays with 0 sum are</div><div class=\"line\">&#123; -3, -1, 0, 4 &#125;</div><div class=\"line\">&#123; 0 &#125;</div><div class=\"line\"></div><div class=\"line\">Input:  &#123; 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 &#125;</div><div class=\"line\">Sub-arrays with 0 sum are</div><div class=\"line\">&#123; 3, 4, -7 &#125;</div><div class=\"line\">&#123; 4, -7, 3 &#125;</div><div class=\"line\">&#123; -7, 3, 1, 3 &#125;</div><div class=\"line\">&#123; 3, 1, -4 &#125;</div><div class=\"line\">&#123; 3, 1, 3, 1, -4, -2, -2 &#125;</div><div class=\"line\">&#123; 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 &#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>意思就是给定一个数组，找到所有和为0的子数组。</p>\n<h4 id=\"解法1：暴力求解\"><a href=\"#解法1：暴力求解\" class=\"headerlink\" title=\"解法1：暴力求解\"></a>解法1：暴力求解</h4><p>双重循环，从当前数组开始往后遍历，找到和为0的子数组。时间复杂度是O(n^3)，其中O(n^2)用于遍历出子数组，O(n)用于计算和。</p>\n<h4 id=\"解法2：使用HashMap来解决\"><a href=\"#解法2：使用HashMap来解决\" class=\"headerlink\" title=\"解法2：使用HashMap来解决\"></a>解法2：使用HashMap来解决</h4><p>构造一个 <code>Map&lt;Integer, ArrayList&gt; hashMap</code> 用来存放<br>遍历数组，以当前位置（包含当前位置）之前的所有元素之和sum为key，如果hashMap中不存在这个key，则将这个key插入到hashMap中，并将这个元素所在位置插入到对应的ArrayList中。如果hashMap中已经存在这个key，则遍历key对应的ArrayList，以ArrayList中(每个元素所在位置+1)为起始值，当前元素所在位置为结束值，这之间的子数组的和就是0，接着还是要把当前位置插入到已经存在的key所对应的ArrayList中。</p>\n<h5 id=\"举个例子：数组-3-4-7-3-1-3-1-4-2-2\"><a href=\"#举个例子：数组-3-4-7-3-1-3-1-4-2-2\" class=\"headerlink\" title=\"举个例子：数组{ 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }\"></a>举个例子：数组{ 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }</h5><p>我们来一步一步的分析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\">(1)首先初始化的时候插入key为0，对应的ArrayList中插入-1，这样以后如果找到子数组就是从位置0开始了。插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1]&#125;</div><div class=\"line\"></div><div class=\"line\">(2)位置0的元素为3，hashMap中不含(0+3=3)。插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1]&#125;,</div><div class=\"line\">&#123;3,[0]&#125;</div><div class=\"line\"></div><div class=\"line\">(3)位置1的元素是4,hashMap中不含(3+4=7)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1]&#125;,</div><div class=\"line\">&#123;3,[0]&#125;,</div><div class=\"line\">&#123;7,[1]&#125;</div><div class=\"line\"></div><div class=\"line\">(4)位置2的元素是-7,hashMap包含(-7+7=0)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0]&#125;,</div><div class=\"line\">&#123;7,[1]&#125;</div><div class=\"line\">并且此时有一个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[0,1,2]</div><div class=\"line\"></div><div class=\"line\">(5)位置3的元素是3,hashMap包含(0+3=3)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1]&#125;</div><div class=\"line\">并且此时有一个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[1,2,3]</div><div class=\"line\"></div><div class=\"line\">(6)位置4的元素是1,hashMap不含(1+3=4)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1]&#125;,</div><div class=\"line\">&#123;4,[4]&#125;</div><div class=\"line\"></div><div class=\"line\">(7)位置5的元素是3,hashMap包含(4+3=7)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4]&#125;</div><div class=\"line\">并且此时有一个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[2,3,4,5]</div><div class=\"line\"></div><div class=\"line\">(8)位置6的元素是1,hashMap不含(7+1=8)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4]&#125;,</div><div class=\"line\">&#123;8,[6]&#125;</div><div class=\"line\"></div><div class=\"line\">(9)位置7的元素是-4,hashMap包含(-4+8=4)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4,7]&#125;,</div><div class=\"line\">&#123;8,[6]&#125;</div><div class=\"line\">并且此时有一个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[5,6,7]</div><div class=\"line\"></div><div class=\"line\">(10)位置8的元素是-2,hashMap包含(-2+4=2)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4,7]&#125;,</div><div class=\"line\">&#123;8,[6]&#125;,</div><div class=\"line\">&#123;2,[8]&#125;</div><div class=\"line\"></div><div class=\"line\">(11)位置9的元素是-2,hashMap包含(-2+2=0)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2,9]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4,7]&#125;,</div><div class=\"line\">&#123;8,[6]&#125;,</div><div class=\"line\">&#123;2,[8]&#125;</div><div class=\"line\">并且此时有两个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[0,1,2,3,4,5,6,7,8,9]</div><div class=\"line\">[3,4,5,6,7,8,9]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>来总结一下这种解法的:这种解法的时间复杂度是O(n)。<br>初始化的时候向hashMap中插入了key为0的一个元素，这一步很重要。之后从数组中遍历出的元素累加，每次累加得到的结果肯定会发生变化。如果发现某一次累加之后的值之前已经出现过一次，说明什么，说明在第一次出现这个值之后中间的累加操作一定会使得第一次之后（不包含第一次）到第二次（包含第二次）的和的值为0。</p>\n</blockquote>\n<p>￼￼结合下面这张折线图来看一下：<br><img src=\"/src/imgs/1704/0419_print_subarray.png\" alt=\"rint_subarray\"></p>\n<p>从-1位置开始，初始sum为0，经过了0，1，2三个位置的元素累加之后，sum又重新变为0。这期间发生了什么呢，依次发生了+3，+4，-7的操作，所以一旦发现两次的累加的和相等的话，表明这之间一定经过了和为0的加减操作。同理，其他几个位置的变化也是如此。</p>\n<h4 id=\"我们再用数学公式抽象一下：\"><a href=\"#我们再用数学公式抽象一下：\" class=\"headerlink\" title=\"我们再用数学公式抽象一下：\"></a>我们再用数学公式抽象一下：</h4><p>设从 0 到 i 位置的累加和为 Si且i位置的元素为e[i]，从 0 到 n 位置的累加和为 Sn且n位置的元素为e[n]，Si = Sn。</p>\n<p>从累加的定义我们知道：</p>\n<script type=\"math/tex; mode=display\">S_{i} + e[i+1] = S_{i+1}</script><p>于是可以得到：</p>\n<script type=\"math/tex; mode=display\">S_i + e[i+1] + e[i+2] + ... + e[n] = S_n</script><p>又有：<script type=\"math/tex\">S_i = S_n</script></p>\n<p>所以 <code>e[i+1] + e[i+2] + ... + e[n]  = 0</code> 。<br>也就是从 i+1 开始到 n 的子数组之和为0</p>\n<hr>\n<p>Link : <a href=\"http://www.techiedelight.com/find-sub-array-with-0-sum/\" target=\"_blank\" rel=\"external\">find-sub-array-with-0-sum</a></p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given an array of integers, print all subarrays having 0 sum.</div><div class=\"line\"></div><div class=\"line\">For example,</div><div class=\"line\"></div><div class=\"line\">Input:  &#123; 4, 2, -3, -1, 0, 4 &#125;</div><div class=\"line\">Sub-arrays with 0 sum are</div><div class=\"line\">&#123; -3, -1, 0, 4 &#125;</div><div class=\"line\">&#123; 0 &#125;</div><div class=\"line\"></div><div class=\"line\">Input:  &#123; 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 &#125;</div><div class=\"line\">Sub-arrays with 0 sum are</div><div class=\"line\">&#123; 3, 4, -7 &#125;</div><div class=\"line\">&#123; 4, -7, 3 &#125;</div><div class=\"line\">&#123; -7, 3, 1, 3 &#125;</div><div class=\"line\">&#123; 3, 1, -4 &#125;</div><div class=\"line\">&#123; 3, 1, 3, 1, -4, -2, -2 &#125;</div><div class=\"line\">&#123; 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 &#125;</div></pre></td></tr></table></figure>","more":"<p>意思就是给定一个数组，找到所有和为0的子数组。</p>\n<h4 id=\"解法1：暴力求解\"><a href=\"#解法1：暴力求解\" class=\"headerlink\" title=\"解法1：暴力求解\"></a>解法1：暴力求解</h4><p>双重循环，从当前数组开始往后遍历，找到和为0的子数组。时间复杂度是O(n^3)，其中O(n^2)用于遍历出子数组，O(n)用于计算和。</p>\n<h4 id=\"解法2：使用HashMap来解决\"><a href=\"#解法2：使用HashMap来解决\" class=\"headerlink\" title=\"解法2：使用HashMap来解决\"></a>解法2：使用HashMap来解决</h4><p>构造一个 <code>Map&lt;Integer, ArrayList&gt; hashMap</code> 用来存放<br>遍历数组，以当前位置（包含当前位置）之前的所有元素之和sum为key，如果hashMap中不存在这个key，则将这个key插入到hashMap中，并将这个元素所在位置插入到对应的ArrayList中。如果hashMap中已经存在这个key，则遍历key对应的ArrayList，以ArrayList中(每个元素所在位置+1)为起始值，当前元素所在位置为结束值，这之间的子数组的和就是0，接着还是要把当前位置插入到已经存在的key所对应的ArrayList中。</p>\n<h5 id=\"举个例子：数组-3-4-7-3-1-3-1-4-2-2\"><a href=\"#举个例子：数组-3-4-7-3-1-3-1-4-2-2\" class=\"headerlink\" title=\"举个例子：数组{ 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }\"></a>举个例子：数组{ 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 }</h5><p>我们来一步一步的分析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\">(1)首先初始化的时候插入key为0，对应的ArrayList中插入-1，这样以后如果找到子数组就是从位置0开始了。插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1]&#125;</div><div class=\"line\"></div><div class=\"line\">(2)位置0的元素为3，hashMap中不含(0+3=3)。插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1]&#125;,</div><div class=\"line\">&#123;3,[0]&#125;</div><div class=\"line\"></div><div class=\"line\">(3)位置1的元素是4,hashMap中不含(3+4=7)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1]&#125;,</div><div class=\"line\">&#123;3,[0]&#125;,</div><div class=\"line\">&#123;7,[1]&#125;</div><div class=\"line\"></div><div class=\"line\">(4)位置2的元素是-7,hashMap包含(-7+7=0)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0]&#125;,</div><div class=\"line\">&#123;7,[1]&#125;</div><div class=\"line\">并且此时有一个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[0,1,2]</div><div class=\"line\"></div><div class=\"line\">(5)位置3的元素是3,hashMap包含(0+3=3)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1]&#125;</div><div class=\"line\">并且此时有一个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[1,2,3]</div><div class=\"line\"></div><div class=\"line\">(6)位置4的元素是1,hashMap不含(1+3=4)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1]&#125;,</div><div class=\"line\">&#123;4,[4]&#125;</div><div class=\"line\"></div><div class=\"line\">(7)位置5的元素是3,hashMap包含(4+3=7)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4]&#125;</div><div class=\"line\">并且此时有一个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[2,3,4,5]</div><div class=\"line\"></div><div class=\"line\">(8)位置6的元素是1,hashMap不含(7+1=8)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4]&#125;,</div><div class=\"line\">&#123;8,[6]&#125;</div><div class=\"line\"></div><div class=\"line\">(9)位置7的元素是-4,hashMap包含(-4+8=4)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4,7]&#125;,</div><div class=\"line\">&#123;8,[6]&#125;</div><div class=\"line\">并且此时有一个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[5,6,7]</div><div class=\"line\"></div><div class=\"line\">(10)位置8的元素是-2,hashMap包含(-2+4=2)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4,7]&#125;,</div><div class=\"line\">&#123;8,[6]&#125;,</div><div class=\"line\">&#123;2,[8]&#125;</div><div class=\"line\"></div><div class=\"line\">(11)位置9的元素是-2,hashMap包含(-2+2=0)，插入之后hashMap的内容是：</div><div class=\"line\">&#123;0,[-1,2,9]&#125;,</div><div class=\"line\">&#123;3,[0,3]&#125;,</div><div class=\"line\">&#123;7,[1,5]&#125;,</div><div class=\"line\">&#123;4,[4,7]&#125;,</div><div class=\"line\">&#123;8,[6]&#125;,</div><div class=\"line\">&#123;2,[8]&#125;</div><div class=\"line\">并且此时有两个满足条件的子数组，对应的位置序列：</div><div class=\"line\">[0,1,2,3,4,5,6,7,8,9]</div><div class=\"line\">[3,4,5,6,7,8,9]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>来总结一下这种解法的:这种解法的时间复杂度是O(n)。<br>初始化的时候向hashMap中插入了key为0的一个元素，这一步很重要。之后从数组中遍历出的元素累加，每次累加得到的结果肯定会发生变化。如果发现某一次累加之后的值之前已经出现过一次，说明什么，说明在第一次出现这个值之后中间的累加操作一定会使得第一次之后（不包含第一次）到第二次（包含第二次）的和的值为0。</p>\n</blockquote>\n<p>￼￼结合下面这张折线图来看一下：<br><img src=\"/src/imgs/1704/0419_print_subarray.png\" alt=\"rint_subarray\"></p>\n<p>从-1位置开始，初始sum为0，经过了0，1，2三个位置的元素累加之后，sum又重新变为0。这期间发生了什么呢，依次发生了+3，+4，-7的操作，所以一旦发现两次的累加的和相等的话，表明这之间一定经过了和为0的加减操作。同理，其他几个位置的变化也是如此。</p>\n<h4 id=\"我们再用数学公式抽象一下：\"><a href=\"#我们再用数学公式抽象一下：\" class=\"headerlink\" title=\"我们再用数学公式抽象一下：\"></a>我们再用数学公式抽象一下：</h4><p>设从 0 到 i 位置的累加和为 Si且i位置的元素为e[i]，从 0 到 n 位置的累加和为 Sn且n位置的元素为e[n]，Si = Sn。</p>\n<p>从累加的定义我们知道：</p>\n<script type=\"math/tex; mode=display\">S_{i} + e[i+1] = S_{i+1}</script><p>于是可以得到：</p>\n<script type=\"math/tex; mode=display\">S_i + e[i+1] + e[i+2] + ... + e[n] = S_n</script><p>又有：<script type=\"math/tex\">S_i = S_n</script></p>\n<p>所以 <code>e[i+1] + e[i+2] + ... + e[n]  = 0</code> 。<br>也就是从 i+1 开始到 n 的子数组之和为0</p>\n<hr>\n<p>Link : <a href=\"http://www.techiedelight.com/find-sub-array-with-0-sum/\" target=\"_blank\" rel=\"external\">find-sub-array-with-0-sum</a></p>\n<hr>\n<p>THE END.</p>"},{"title":"20170928.2","banner":"http://ox0p9pctg.bkt.clouddn.com/201709282.jpg","thumbnail":"http://ox0p9pctg.bkt.clouddn.com/201709282.jpg","_content":"\n#### 题 2:\n\n设 y=f(x) 在(-1,1)内有二阶连续导数，且f''(x)≠0. 证明\n- (1) 对于任意非零x∈(-1,1),存在唯一 θ(x)∈(0,1), 使得 f(x)=f(0)+xf'[ θ(x),x] 成立；\n- (2) $\\lim _{x\\rightarrow 0^{+}}\\theta \\left( x\\right) =\\dfrac {1} {2}$.\n\n\n<!--more-->\n\n- - -\n\n#### 证明:\n\n(1) 对于f(x)在[0,1]上使用拉格朗日定理，得:f(x)-f(0)=xf'[0+θ(x)*(x-0)],\n\nf(x)=f(0)+xf'(θ(x)*x).\n\n又f''(x)≠在[0,1]内连续且f''(x)≠0,故保号，于是不妨设f''(x)>0.所以f'(x)严格单调，所以θ(x)唯一.\n\n(2) 由泰勒公式有 $f\\left( x\\right) =f\\left( 0\\right) +f'\\left( 0\\right)x +\\dfrac {1} {2}f''(\\varepsilon )x ^{2}$\n\n又由(1)中的拉格朗日定理可知：f(x)=f(0)+xf'[θ(x)].\n\n所以:\n\n$f(0)+xf'[θ(x)*x] =f\\left( 0\\right) +f'\\left( 0\\right)x +\\dfrac {1} {2}f''(\\varepsilon )x ^{2}$ =>\n\n$xf'[θ(x)*x] =f'\\left( 0\\right)x +\\dfrac {1} {2}f''(\\varepsilon )x ^{2}$ =>\n\n$\\dfrac {f'[θ(x)*x]-f'(0)}{x} =\\dfrac {1} {2}f''(\\varepsilon )$ =>\n\n$\\lim _{x\\rightarrow 0^{+}} \\dfrac {f'[0+θ(x)*x]-f'(0)} {θ(x)x} θ(x)$\n\n$=\\lim _{x\\rightarrow 0^{+}}f''(0)*θ(x)$\n\n$=\\lim _{x\\rightarrow 0^{+}}\\dfrac {1} {2}f''(\\varepsilon ) =\\dfrac {1} {2}f''(0)$ =>\n\n$\\lim _{x\\rightarrow 0^{+}}f''(0)*θ(x)=\\dfrac {1} {2}f''(0)$\n\n因此 $\\lim _{x\\rightarrow 0^{+}}θ(x)=\\dfrac {1} {2}$\n\n- - -\nTHE END.\n","source":"_posts/2017-09-28-2.md","raw":"---\ntitle: 20170928.2\ncategories: 中值定理\ntags: [拉格朗日定理,泰勒公式]\nbanner: http://ox0p9pctg.bkt.clouddn.com/201709282.jpg\nthumbnail: http://ox0p9pctg.bkt.clouddn.com/201709282.jpg\n---\n\n#### 题 2:\n\n设 y=f(x) 在(-1,1)内有二阶连续导数，且f''(x)≠0. 证明\n- (1) 对于任意非零x∈(-1,1),存在唯一 θ(x)∈(0,1), 使得 f(x)=f(0)+xf'[ θ(x),x] 成立；\n- (2) $\\lim _{x\\rightarrow 0^{+}}\\theta \\left( x\\right) =\\dfrac {1} {2}$.\n\n\n<!--more-->\n\n- - -\n\n#### 证明:\n\n(1) 对于f(x)在[0,1]上使用拉格朗日定理，得:f(x)-f(0)=xf'[0+θ(x)*(x-0)],\n\nf(x)=f(0)+xf'(θ(x)*x).\n\n又f''(x)≠在[0,1]内连续且f''(x)≠0,故保号，于是不妨设f''(x)>0.所以f'(x)严格单调，所以θ(x)唯一.\n\n(2) 由泰勒公式有 $f\\left( x\\right) =f\\left( 0\\right) +f'\\left( 0\\right)x +\\dfrac {1} {2}f''(\\varepsilon )x ^{2}$\n\n又由(1)中的拉格朗日定理可知：f(x)=f(0)+xf'[θ(x)].\n\n所以:\n\n$f(0)+xf'[θ(x)*x] =f\\left( 0\\right) +f'\\left( 0\\right)x +\\dfrac {1} {2}f''(\\varepsilon )x ^{2}$ =>\n\n$xf'[θ(x)*x] =f'\\left( 0\\right)x +\\dfrac {1} {2}f''(\\varepsilon )x ^{2}$ =>\n\n$\\dfrac {f'[θ(x)*x]-f'(0)}{x} =\\dfrac {1} {2}f''(\\varepsilon )$ =>\n\n$\\lim _{x\\rightarrow 0^{+}} \\dfrac {f'[0+θ(x)*x]-f'(0)} {θ(x)x} θ(x)$\n\n$=\\lim _{x\\rightarrow 0^{+}}f''(0)*θ(x)$\n\n$=\\lim _{x\\rightarrow 0^{+}}\\dfrac {1} {2}f''(\\varepsilon ) =\\dfrac {1} {2}f''(0)$ =>\n\n$\\lim _{x\\rightarrow 0^{+}}f''(0)*θ(x)=\\dfrac {1} {2}f''(0)$\n\n因此 $\\lim _{x\\rightarrow 0^{+}}θ(x)=\\dfrac {1} {2}$\n\n- - -\nTHE END.\n","slug":"2017-09-28-2","published":1,"date":"2018-02-24T05:24:41.189Z","updated":"2018-02-24T05:24:41.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsb9s0013uro5pczlajye","content":"<h4 id=\"题-2\"><a href=\"#题-2\" class=\"headerlink\" title=\"题 2:\"></a>题 2:</h4><p>设 y=f(x) 在(-1,1)内有二阶连续导数，且f’’(x)≠0. 证明</p>\n<ul>\n<li>(1) 对于任意非零x∈(-1,1),存在唯一 θ(x)∈(0,1), 使得 f(x)=f(0)+xf’[ θ(x),x] 成立；</li>\n<li>(2) $\\lim _{x\\rightarrow 0^{+}}\\theta \\left( x\\right) =\\dfrac {1} {2}$.</li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明:\"></a>证明:</h4><p>(1) 对于f(x)在[0,1]上使用拉格朗日定理，得:f(x)-f(0)=xf’[0+θ(x)*(x-0)],</p>\n<p>f(x)=f(0)+xf’(θ(x)*x).</p>\n<p>又f’’(x)≠在[0,1]内连续且f’’(x)≠0,故保号，于是不妨设f’’(x)&gt;0.所以f’(x)严格单调，所以θ(x)唯一.</p>\n<p>(2) 由泰勒公式有 $f\\left( x\\right) =f\\left( 0\\right) +f’\\left( 0\\right)x +\\dfrac {1} {2}f’’(\\varepsilon )x ^{2}$</p>\n<p>又由(1)中的拉格朗日定理可知：f(x)=f(0)+xf’[θ(x)].</p>\n<p>所以:</p>\n<p>$f(0)+xf’[θ(x)*x] =f\\left( 0\\right) +f’\\left( 0\\right)x +\\dfrac {1} {2}f’’(\\varepsilon )x ^{2}$ =&gt;</p>\n<p>$xf’[θ(x)*x] =f’\\left( 0\\right)x +\\dfrac {1} {2}f’’(\\varepsilon )x ^{2}$ =&gt;</p>\n<p>$\\dfrac {f’[θ(x)*x]-f’(0)}{x} =\\dfrac {1} {2}f’’(\\varepsilon )$ =&gt;</p>\n<p>$\\lim _{x\\rightarrow 0^{+}} \\dfrac {f’[0+θ(x)*x]-f’(0)} {θ(x)x} θ(x)$</p>\n<p>$=\\lim _{x\\rightarrow 0^{+}}f’’(0)*θ(x)$</p>\n<p>$=\\lim _{x\\rightarrow 0^{+}}\\dfrac {1} {2}f’’(\\varepsilon ) =\\dfrac {1} {2}f’’(0)$ =&gt;</p>\n<p>$\\lim _{x\\rightarrow 0^{+}}f’’(0)*θ(x)=\\dfrac {1} {2}f’’(0)$</p>\n<p>因此 $\\lim _{x\\rightarrow 0^{+}}θ(x)=\\dfrac {1} {2}$</p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"题-2\"><a href=\"#题-2\" class=\"headerlink\" title=\"题 2:\"></a>题 2:</h4><p>设 y=f(x) 在(-1,1)内有二阶连续导数，且f’’(x)≠0. 证明</p>\n<ul>\n<li>(1) 对于任意非零x∈(-1,1),存在唯一 θ(x)∈(0,1), 使得 f(x)=f(0)+xf’[ θ(x),x] 成立；</li>\n<li>(2) $\\lim _{x\\rightarrow 0^{+}}\\theta \\left( x\\right) =\\dfrac {1} {2}$.</li>\n</ul>","more":"<hr>\n<h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明:\"></a>证明:</h4><p>(1) 对于f(x)在[0,1]上使用拉格朗日定理，得:f(x)-f(0)=xf’[0+θ(x)*(x-0)],</p>\n<p>f(x)=f(0)+xf’(θ(x)*x).</p>\n<p>又f’’(x)≠在[0,1]内连续且f’’(x)≠0,故保号，于是不妨设f’’(x)&gt;0.所以f’(x)严格单调，所以θ(x)唯一.</p>\n<p>(2) 由泰勒公式有 $f\\left( x\\right) =f\\left( 0\\right) +f’\\left( 0\\right)x +\\dfrac {1} {2}f’’(\\varepsilon )x ^{2}$</p>\n<p>又由(1)中的拉格朗日定理可知：f(x)=f(0)+xf’[θ(x)].</p>\n<p>所以:</p>\n<p>$f(0)+xf’[θ(x)*x] =f\\left( 0\\right) +f’\\left( 0\\right)x +\\dfrac {1} {2}f’’(\\varepsilon )x ^{2}$ =&gt;</p>\n<p>$xf’[θ(x)*x] =f’\\left( 0\\right)x +\\dfrac {1} {2}f’’(\\varepsilon )x ^{2}$ =&gt;</p>\n<p>$\\dfrac {f’[θ(x)*x]-f’(0)}{x} =\\dfrac {1} {2}f’’(\\varepsilon )$ =&gt;</p>\n<p>$\\lim _{x\\rightarrow 0^{+}} \\dfrac {f’[0+θ(x)*x]-f’(0)} {θ(x)x} θ(x)$</p>\n<p>$=\\lim _{x\\rightarrow 0^{+}}f’’(0)*θ(x)$</p>\n<p>$=\\lim _{x\\rightarrow 0^{+}}\\dfrac {1} {2}f’’(\\varepsilon ) =\\dfrac {1} {2}f’’(0)$ =&gt;</p>\n<p>$\\lim _{x\\rightarrow 0^{+}}f’’(0)*θ(x)=\\dfrac {1} {2}f’’(0)$</p>\n<p>因此 $\\lim _{x\\rightarrow 0^{+}}θ(x)=\\dfrac {1} {2}$</p>\n<hr>\n<p>THE END.</p>"},{"title":"201709304","date":"2017-09-29T16:00:00.000Z","banner":"http://ox0p9pctg.bkt.clouddn.com/201709304.jpeg","thumbnail":"http://ox0p9pctg.bkt.clouddn.com/201709304.jpeg","_content":"\n#### 题 4:\n\n设 f(x) 在[0,1] 上有二阶导数，f(0)=f(1)=f'(0)=f'(1)=0，证明存在 𝛏∈(0,1)，使得f''(𝛏)=f(𝛏).\n\n<!--more-->\n\n- - -\n\n#### 证明\n\n构造辅助函数 $F(x)=[f(x)+f'(x)]e^{-x}$.\n\n由题设可知F(x)在[0,1]上连续，在(0,1)可导，且F(0)=F(1).由罗尔定理可知至少存在一点 𝛏∈(0,1)，使得F'(𝛏)=0.\n\n又 $F'(x)=[f'(x)+f''(x)]e^{-x}-[f(x)+f'(x)]e^{-x}=[f''(x)-f(x)]e^{-x}$.由于 $e^{-x}\\neq0，可知有f''(𝛏)-f(𝛏)=0，即f''(𝛏)=f(𝛏).$\n\n- - -\nTHE END.\n","source":"_posts/2017-09-30-4.md","raw":"---\ntitle: 201709304\ndate: 2017-09-30\ncategories: 中值定理\ntags: [罗尔定理]\nbanner: http://ox0p9pctg.bkt.clouddn.com/201709304.jpeg\nthumbnail: http://ox0p9pctg.bkt.clouddn.com/201709304.jpeg\n---\n\n#### 题 4:\n\n设 f(x) 在[0,1] 上有二阶导数，f(0)=f(1)=f'(0)=f'(1)=0，证明存在 𝛏∈(0,1)，使得f''(𝛏)=f(𝛏).\n\n<!--more-->\n\n- - -\n\n#### 证明\n\n构造辅助函数 $F(x)=[f(x)+f'(x)]e^{-x}$.\n\n由题设可知F(x)在[0,1]上连续，在(0,1)可导，且F(0)=F(1).由罗尔定理可知至少存在一点 𝛏∈(0,1)，使得F'(𝛏)=0.\n\n又 $F'(x)=[f'(x)+f''(x)]e^{-x}-[f(x)+f'(x)]e^{-x}=[f''(x)-f(x)]e^{-x}$.由于 $e^{-x}\\neq0，可知有f''(𝛏)-f(𝛏)=0，即f''(𝛏)=f(𝛏).$\n\n- - -\nTHE END.\n","slug":"2017-09-30-4","published":1,"updated":"2018-02-24T05:24:41.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsb9t0016uro5ulurwz4o","content":"<h4 id=\"题-4\"><a href=\"#题-4\" class=\"headerlink\" title=\"题 4:\"></a>题 4:</h4><p>设 f(x) 在[0,1] 上有二阶导数，f(0)=f(1)=f’(0)=f’(1)=0，证明存在 𝛏∈(0,1)，使得f’’(𝛏)=f(𝛏).</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h4><p>构造辅助函数 $F(x)=[f(x)+f’(x)]e^{-x}$.</p>\n<p>由题设可知F(x)在[0,1]上连续，在(0,1)可导，且F(0)=F(1).由罗尔定理可知至少存在一点 𝛏∈(0,1)，使得F’(𝛏)=0.</p>\n<p>又 $F’(x)=[f’(x)+f’’(x)]e^{-x}-[f(x)+f’(x)]e^{-x}=[f’’(x)-f(x)]e^{-x}$.由于 $e^{-x}\\neq0，可知有f’’(𝛏)-f(𝛏)=0，即f’’(𝛏)=f(𝛏).$</p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"题-4\"><a href=\"#题-4\" class=\"headerlink\" title=\"题 4:\"></a>题 4:</h4><p>设 f(x) 在[0,1] 上有二阶导数，f(0)=f(1)=f’(0)=f’(1)=0，证明存在 𝛏∈(0,1)，使得f’’(𝛏)=f(𝛏).</p>","more":"<hr>\n<h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h4><p>构造辅助函数 $F(x)=[f(x)+f’(x)]e^{-x}$.</p>\n<p>由题设可知F(x)在[0,1]上连续，在(0,1)可导，且F(0)=F(1).由罗尔定理可知至少存在一点 𝛏∈(0,1)，使得F’(𝛏)=0.</p>\n<p>又 $F’(x)=[f’(x)+f’’(x)]e^{-x}-[f(x)+f’(x)]e^{-x}=[f’’(x)-f(x)]e^{-x}$.由于 $e^{-x}\\neq0，可知有f’’(𝛏)-f(𝛏)=0，即f’’(𝛏)=f(𝛏).$</p>\n<hr>\n<p>THE END.</p>"},{"title":"线性代数难点题型","date":"2017-12-23T16:00:00.000Z","_content":"\n#### 1. 关于矩阵的n阶的题型\n\n**(1) 如果$A=αβ^{T}$,其中α和β是n维非零列向量，则$A^{n}=l^{n-1}A$,其中$l=β^{T}α=tr(A)$**\n\n(2) 如果$A=\\begin{pmatrix}\n0 & a & c \\\\\n0 & 0 & b \\\\\n0 & 0 & 0\n\\end{pmatrix}$,则$A^{2}=\\begin{pmatrix}\n0 & 0 & ab \\\\\n0 & 0 & 0 \\\\\n0 & 0 & 0\n\\end{pmatrix}$,$A^{3}=0$,$A^{4}=0$...\n\n(3) 如果$A \\sim B$,则$A^{n} \\sim B^{n}$,于是$A^{n} \\sim P^{-1}B^{n}P$,其中B是对角矩阵。\n\n(4) 用归纳法：先求 $A^{2},A^{3}$ 等,看出规律，再求 $A^{n}$\n\n<!--more-->\n\n#### 2. 证明可逆的方法主要有：\n\nn阶矩阵A可逆\n\n<=> $|A|\\neq0$\n\n<=> r(A)=n\n\n<=> A的列（行）向量组线性无关\n\n<=> Ax=0只有0解\n\n<=> 0不是矩阵A的特征值\n\n#### 3. 关于两个矩阵的和的公式只有：\n\n$(A+B)^T=A^T+B^T$\n\n#### 4. 满足交换律的一些特殊矩阵：\n\n(1) $AA^2=A^2A=A^3$\n\n(2) $AA^{\\ast}=A^{\\ast}A=|A|E$\n\n(3) $AE=EA=A$\n\n(4) $AA^{-1}=A^{-1}A=E$\n\n(5) $AB=aA+bB(ab\\neq0)$\n\n(6) $A^2-kAB=E(k\\neq0)$\n\n注：一般矩阵不满足交换律。\n\n- - -\nTHE END.\n","source":"_posts/2017-12-24.md","raw":"---\ntitle: 线性代数难点题型\ndate: 2017-12-24\ncategories: 线性代数\ntags: 线性代数\n---\n\n#### 1. 关于矩阵的n阶的题型\n\n**(1) 如果$A=αβ^{T}$,其中α和β是n维非零列向量，则$A^{n}=l^{n-1}A$,其中$l=β^{T}α=tr(A)$**\n\n(2) 如果$A=\\begin{pmatrix}\n0 & a & c \\\\\n0 & 0 & b \\\\\n0 & 0 & 0\n\\end{pmatrix}$,则$A^{2}=\\begin{pmatrix}\n0 & 0 & ab \\\\\n0 & 0 & 0 \\\\\n0 & 0 & 0\n\\end{pmatrix}$,$A^{3}=0$,$A^{4}=0$...\n\n(3) 如果$A \\sim B$,则$A^{n} \\sim B^{n}$,于是$A^{n} \\sim P^{-1}B^{n}P$,其中B是对角矩阵。\n\n(4) 用归纳法：先求 $A^{2},A^{3}$ 等,看出规律，再求 $A^{n}$\n\n<!--more-->\n\n#### 2. 证明可逆的方法主要有：\n\nn阶矩阵A可逆\n\n<=> $|A|\\neq0$\n\n<=> r(A)=n\n\n<=> A的列（行）向量组线性无关\n\n<=> Ax=0只有0解\n\n<=> 0不是矩阵A的特征值\n\n#### 3. 关于两个矩阵的和的公式只有：\n\n$(A+B)^T=A^T+B^T$\n\n#### 4. 满足交换律的一些特殊矩阵：\n\n(1) $AA^2=A^2A=A^3$\n\n(2) $AA^{\\ast}=A^{\\ast}A=|A|E$\n\n(3) $AE=EA=A$\n\n(4) $AA^{-1}=A^{-1}A=E$\n\n(5) $AB=aA+bB(ab\\neq0)$\n\n(6) $A^2-kAB=E(k\\neq0)$\n\n注：一般矩阵不满足交换律。\n\n- - -\nTHE END.\n","slug":"2017-12-24","published":1,"updated":"2018-02-24T05:24:41.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsb9v001auro5ut7f53y5","content":"<h4 id=\"1-关于矩阵的n阶的题型\"><a href=\"#1-关于矩阵的n阶的题型\" class=\"headerlink\" title=\"1. 关于矩阵的n阶的题型\"></a>1. 关于矩阵的n阶的题型</h4><p><strong>(1) 如果$A=αβ^{T}$,其中α和β是n维非零列向量，则$A^{n}=l^{n-1}A$,其中$l=β^{T}α=tr(A)$</strong></p>\n<p>(2) 如果$A=\\begin{pmatrix}<br>0 &amp; a &amp; c \\\\<br>0 &amp; 0 &amp; b \\\\<br>0 &amp; 0 &amp; 0<br>\\end{pmatrix}$,则$A^{2}=\\begin{pmatrix}<br>0 &amp; 0 &amp; ab \\\\<br>0 &amp; 0 &amp; 0 \\\\<br>0 &amp; 0 &amp; 0<br>\\end{pmatrix}$,$A^{3}=0$,$A^{4}=0$…</p>\n<p>(3) 如果$A \\sim B$,则$A^{n} \\sim B^{n}$,于是$A^{n} \\sim P^{-1}B^{n}P$,其中B是对角矩阵。</p>\n<p>(4) 用归纳法：先求 $A^{2},A^{3}$ 等,看出规律，再求 $A^{n}$</p>\n<a id=\"more\"></a>\n<h4 id=\"2-证明可逆的方法主要有：\"><a href=\"#2-证明可逆的方法主要有：\" class=\"headerlink\" title=\"2. 证明可逆的方法主要有：\"></a>2. 证明可逆的方法主要有：</h4><p>n阶矩阵A可逆</p>\n<p>&lt;=&gt; $|A|\\neq0$</p>\n<p>&lt;=&gt; r(A)=n</p>\n<p>&lt;=&gt; A的列（行）向量组线性无关</p>\n<p>&lt;=&gt; Ax=0只有0解</p>\n<p>&lt;=&gt; 0不是矩阵A的特征值</p>\n<h4 id=\"3-关于两个矩阵的和的公式只有：\"><a href=\"#3-关于两个矩阵的和的公式只有：\" class=\"headerlink\" title=\"3. 关于两个矩阵的和的公式只有：\"></a>3. 关于两个矩阵的和的公式只有：</h4><p>$(A+B)^T=A^T+B^T$</p>\n<h4 id=\"4-满足交换律的一些特殊矩阵：\"><a href=\"#4-满足交换律的一些特殊矩阵：\" class=\"headerlink\" title=\"4. 满足交换律的一些特殊矩阵：\"></a>4. 满足交换律的一些特殊矩阵：</h4><p>(1) $AA^2=A^2A=A^3$</p>\n<p>(2) $AA^{\\ast}=A^{\\ast}A=|A|E$</p>\n<p>(3) $AE=EA=A$</p>\n<p>(4) $AA^{-1}=A^{-1}A=E$</p>\n<p>(5) $AB=aA+bB(ab\\neq0)$</p>\n<p>(6) $A^2-kAB=E(k\\neq0)$</p>\n<p>注：一般矩阵不满足交换律。</p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-关于矩阵的n阶的题型\"><a href=\"#1-关于矩阵的n阶的题型\" class=\"headerlink\" title=\"1. 关于矩阵的n阶的题型\"></a>1. 关于矩阵的n阶的题型</h4><p><strong>(1) 如果$A=αβ^{T}$,其中α和β是n维非零列向量，则$A^{n}=l^{n-1}A$,其中$l=β^{T}α=tr(A)$</strong></p>\n<p>(2) 如果$A=\\begin{pmatrix}<br>0 &amp; a &amp; c \\\\<br>0 &amp; 0 &amp; b \\\\<br>0 &amp; 0 &amp; 0<br>\\end{pmatrix}$,则$A^{2}=\\begin{pmatrix}<br>0 &amp; 0 &amp; ab \\\\<br>0 &amp; 0 &amp; 0 \\\\<br>0 &amp; 0 &amp; 0<br>\\end{pmatrix}$,$A^{3}=0$,$A^{4}=0$…</p>\n<p>(3) 如果$A \\sim B$,则$A^{n} \\sim B^{n}$,于是$A^{n} \\sim P^{-1}B^{n}P$,其中B是对角矩阵。</p>\n<p>(4) 用归纳法：先求 $A^{2},A^{3}$ 等,看出规律，再求 $A^{n}$</p>","more":"<h4 id=\"2-证明可逆的方法主要有：\"><a href=\"#2-证明可逆的方法主要有：\" class=\"headerlink\" title=\"2. 证明可逆的方法主要有：\"></a>2. 证明可逆的方法主要有：</h4><p>n阶矩阵A可逆</p>\n<p>&lt;=&gt; $|A|\\neq0$</p>\n<p>&lt;=&gt; r(A)=n</p>\n<p>&lt;=&gt; A的列（行）向量组线性无关</p>\n<p>&lt;=&gt; Ax=0只有0解</p>\n<p>&lt;=&gt; 0不是矩阵A的特征值</p>\n<h4 id=\"3-关于两个矩阵的和的公式只有：\"><a href=\"#3-关于两个矩阵的和的公式只有：\" class=\"headerlink\" title=\"3. 关于两个矩阵的和的公式只有：\"></a>3. 关于两个矩阵的和的公式只有：</h4><p>$(A+B)^T=A^T+B^T$</p>\n<h4 id=\"4-满足交换律的一些特殊矩阵：\"><a href=\"#4-满足交换律的一些特殊矩阵：\" class=\"headerlink\" title=\"4. 满足交换律的一些特殊矩阵：\"></a>4. 满足交换律的一些特殊矩阵：</h4><p>(1) $AA^2=A^2A=A^3$</p>\n<p>(2) $AA^{\\ast}=A^{\\ast}A=|A|E$</p>\n<p>(3) $AE=EA=A$</p>\n<p>(4) $AA^{-1}=A^{-1}A=E$</p>\n<p>(5) $AB=aA+bB(ab\\neq0)$</p>\n<p>(6) $A^2-kAB=E(k\\neq0)$</p>\n<p>注：一般矩阵不满足交换律。</p>\n<hr>\n<p>THE END.</p>"},{"date":"2017-11-21T16:00:00.000Z","layout":"default","title":"动态规划-数对之差最大值","_content":"\n### 题目描述\n\n> 在数组中，某个数字减去它右边的数字得到一个数对之差。求所有数对之差的最大值。例如，在数组{2,4,1,16,7,5,11,9}中，数对之差的最大值是11，是16减去5的结果。\n\n<!--more-->\n\n### 分析\n\n> 定义D[i]是以数组中第i个数字为减数的所有数对之差的最大值。根据题意，用N[i]表示数组的第i个元素，就是说对于任意h<i，D[i]>=N[h]-N[i]。所以D[i]的最大值就是整个数组的最大的数对之差。来手写求一下最大数对之差的过程。\n\n\n```\nM[0] = 2;\nD[1] = M[0] - N[1] = 2 - 4 = -2;\nmaxDiff = 2;\n\nM[1] = max{M[0],N[1]} = max{2,4} = 4;\nD[2] = M[1] - N[2] = 4 - 1 = 3;\nmaxDiff = max{maxDiff,D[2]} = 3;\n\nM[2] = max{M[1],N[2]} = max{4,1} = 4;\nD[3] = M[2] - N[3] = -12;\nmaxDiff = max{maxDiff,D[3]} = 3;\n\nM[3] =16;\nD[4] = 9;\nmaxDiff = 9;\n\nM[4] = 16;\nD[5] = 11;\nmaxDiff = 11;\n\nM[5] = 16;\nD[6] = 5;\nmaxDiff = 11;\n\nM[6] = 16;\nD[7] = 7;\nmaxDiff = 11;\n```\n\n\n> 这里的 M[i-1] 表示的是当前第i个元素之前的i-1个元素中的最大值。而maxDiff则是i之前包括位置i在内的最大数对之差的值。\n\n### C代码实现\n\n```\nint MaxDiff(int numbers[], int length) {\n    if(numbers == NULL || length < 2)\n        return 0;\n    int max = numbers[0];\n    int maxDiff = max - numbers[1];\n    for(int i=2;i<length;++i) {\n        if(numbers[i] < max) {\n            max = numbers[i];\n        }\n        int curDiff = max - numbers[i];\n        if(curDiff > maxDiff) {\n            maxDiff = curDiff;\n        }\n    }\n    return maxDiff;\n}\n```\n\n- - -\nTHE END.\n","source":"_posts/2017-11-22-DynamicProgrammingMaxDiff.md","raw":"---\ndate: 2017-11-22\nlayout: default\ncategory: Alogrithm\ntags: DP\ntitle: 动态规划-数对之差最大值\n---\n\n### 题目描述\n\n> 在数组中，某个数字减去它右边的数字得到一个数对之差。求所有数对之差的最大值。例如，在数组{2,4,1,16,7,5,11,9}中，数对之差的最大值是11，是16减去5的结果。\n\n<!--more-->\n\n### 分析\n\n> 定义D[i]是以数组中第i个数字为减数的所有数对之差的最大值。根据题意，用N[i]表示数组的第i个元素，就是说对于任意h<i，D[i]>=N[h]-N[i]。所以D[i]的最大值就是整个数组的最大的数对之差。来手写求一下最大数对之差的过程。\n\n\n```\nM[0] = 2;\nD[1] = M[0] - N[1] = 2 - 4 = -2;\nmaxDiff = 2;\n\nM[1] = max{M[0],N[1]} = max{2,4} = 4;\nD[2] = M[1] - N[2] = 4 - 1 = 3;\nmaxDiff = max{maxDiff,D[2]} = 3;\n\nM[2] = max{M[1],N[2]} = max{4,1} = 4;\nD[3] = M[2] - N[3] = -12;\nmaxDiff = max{maxDiff,D[3]} = 3;\n\nM[3] =16;\nD[4] = 9;\nmaxDiff = 9;\n\nM[4] = 16;\nD[5] = 11;\nmaxDiff = 11;\n\nM[5] = 16;\nD[6] = 5;\nmaxDiff = 11;\n\nM[6] = 16;\nD[7] = 7;\nmaxDiff = 11;\n```\n\n\n> 这里的 M[i-1] 表示的是当前第i个元素之前的i-1个元素中的最大值。而maxDiff则是i之前包括位置i在内的最大数对之差的值。\n\n### C代码实现\n\n```\nint MaxDiff(int numbers[], int length) {\n    if(numbers == NULL || length < 2)\n        return 0;\n    int max = numbers[0];\n    int maxDiff = max - numbers[1];\n    for(int i=2;i<length;++i) {\n        if(numbers[i] < max) {\n            max = numbers[i];\n        }\n        int curDiff = max - numbers[i];\n        if(curDiff > maxDiff) {\n            maxDiff = curDiff;\n        }\n    }\n    return maxDiff;\n}\n```\n\n- - -\nTHE END.\n","slug":"2017-11-22-DynamicProgrammingMaxDiff","published":1,"updated":"2018-03-14T06:12:40.671Z","comments":1,"photos":[],"link":"","_id":"cjgywsb9w001duro5jmsqdpag","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><blockquote>\n<p>在数组中，某个数字减去它右边的数字得到一个数对之差。求所有数对之差的最大值。例如，在数组{2,4,1,16,7,5,11,9}中，数对之差的最大值是11，是16减去5的结果。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><blockquote>\n<p>定义D[i]是以数组中第i个数字为减数的所有数对之差的最大值。根据题意，用N[i]表示数组的第i个元素，就是说对于任意h<i，d[i]>=N[h]-N[i]。所以D[i]的最大值就是整个数组的最大的数对之差。来手写求一下最大数对之差的过程。</i，d[i]></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">M[0] = 2;</div><div class=\"line\">D[1] = M[0] - N[1] = 2 - 4 = -2;</div><div class=\"line\">maxDiff = 2;</div><div class=\"line\"></div><div class=\"line\">M[1] = max&#123;M[0],N[1]&#125; = max&#123;2,4&#125; = 4;</div><div class=\"line\">D[2] = M[1] - N[2] = 4 - 1 = 3;</div><div class=\"line\">maxDiff = max&#123;maxDiff,D[2]&#125; = 3;</div><div class=\"line\"></div><div class=\"line\">M[2] = max&#123;M[1],N[2]&#125; = max&#123;4,1&#125; = 4;</div><div class=\"line\">D[3] = M[2] - N[3] = -12;</div><div class=\"line\">maxDiff = max&#123;maxDiff,D[3]&#125; = 3;</div><div class=\"line\"></div><div class=\"line\">M[3] =16;</div><div class=\"line\">D[4] = 9;</div><div class=\"line\">maxDiff = 9;</div><div class=\"line\"></div><div class=\"line\">M[4] = 16;</div><div class=\"line\">D[5] = 11;</div><div class=\"line\">maxDiff = 11;</div><div class=\"line\"></div><div class=\"line\">M[5] = 16;</div><div class=\"line\">D[6] = 5;</div><div class=\"line\">maxDiff = 11;</div><div class=\"line\"></div><div class=\"line\">M[6] = 16;</div><div class=\"line\">D[7] = 7;</div><div class=\"line\">maxDiff = 11;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的 M[i-1] 表示的是当前第i个元素之前的i-1个元素中的最大值。而maxDiff则是i之前包括位置i在内的最大数对之差的值。</p>\n</blockquote>\n<h3 id=\"C代码实现\"><a href=\"#C代码实现\" class=\"headerlink\" title=\"C代码实现\"></a>C代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">int MaxDiff(int numbers[], int length) &#123;</div><div class=\"line\">    if(numbers == NULL || length &lt; 2)</div><div class=\"line\">        return 0;</div><div class=\"line\">    int max = numbers[0];</div><div class=\"line\">    int maxDiff = max - numbers[1];</div><div class=\"line\">    for(int i=2;i&lt;length;++i) &#123;</div><div class=\"line\">        if(numbers[i] &lt; max) &#123;</div><div class=\"line\">            max = numbers[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        int curDiff = max - numbers[i];</div><div class=\"line\">        if(curDiff &gt; maxDiff) &#123;</div><div class=\"line\">            maxDiff = curDiff;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return maxDiff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><blockquote>\n<p>在数组中，某个数字减去它右边的数字得到一个数对之差。求所有数对之差的最大值。例如，在数组{2,4,1,16,7,5,11,9}中，数对之差的最大值是11，是16减去5的结果。</p>\n</blockquote>","more":"<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><blockquote>\n<p>定义D[i]是以数组中第i个数字为减数的所有数对之差的最大值。根据题意，用N[i]表示数组的第i个元素，就是说对于任意h<i，d[i]>=N[h]-N[i]。所以D[i]的最大值就是整个数组的最大的数对之差。来手写求一下最大数对之差的过程。</i，d[i]></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">M[0] = 2;</div><div class=\"line\">D[1] = M[0] - N[1] = 2 - 4 = -2;</div><div class=\"line\">maxDiff = 2;</div><div class=\"line\"></div><div class=\"line\">M[1] = max&#123;M[0],N[1]&#125; = max&#123;2,4&#125; = 4;</div><div class=\"line\">D[2] = M[1] - N[2] = 4 - 1 = 3;</div><div class=\"line\">maxDiff = max&#123;maxDiff,D[2]&#125; = 3;</div><div class=\"line\"></div><div class=\"line\">M[2] = max&#123;M[1],N[2]&#125; = max&#123;4,1&#125; = 4;</div><div class=\"line\">D[3] = M[2] - N[3] = -12;</div><div class=\"line\">maxDiff = max&#123;maxDiff,D[3]&#125; = 3;</div><div class=\"line\"></div><div class=\"line\">M[3] =16;</div><div class=\"line\">D[4] = 9;</div><div class=\"line\">maxDiff = 9;</div><div class=\"line\"></div><div class=\"line\">M[4] = 16;</div><div class=\"line\">D[5] = 11;</div><div class=\"line\">maxDiff = 11;</div><div class=\"line\"></div><div class=\"line\">M[5] = 16;</div><div class=\"line\">D[6] = 5;</div><div class=\"line\">maxDiff = 11;</div><div class=\"line\"></div><div class=\"line\">M[6] = 16;</div><div class=\"line\">D[7] = 7;</div><div class=\"line\">maxDiff = 11;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的 M[i-1] 表示的是当前第i个元素之前的i-1个元素中的最大值。而maxDiff则是i之前包括位置i在内的最大数对之差的值。</p>\n</blockquote>\n<h3 id=\"C代码实现\"><a href=\"#C代码实现\" class=\"headerlink\" title=\"C代码实现\"></a>C代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">int MaxDiff(int numbers[], int length) &#123;</div><div class=\"line\">    if(numbers == NULL || length &lt; 2)</div><div class=\"line\">        return 0;</div><div class=\"line\">    int max = numbers[0];</div><div class=\"line\">    int maxDiff = max - numbers[1];</div><div class=\"line\">    for(int i=2;i&lt;length;++i) &#123;</div><div class=\"line\">        if(numbers[i] &lt; max) &#123;</div><div class=\"line\">            max = numbers[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        int curDiff = max - numbers[i];</div><div class=\"line\">        if(curDiff &gt; maxDiff) &#123;</div><div class=\"line\">            maxDiff = curDiff;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return maxDiff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>"},{"title":"20170929.3","date":"2017-09-28T16:00:00.000Z","banner":"http://ox0p9pctg.bkt.clouddn.com/201709293.jpeg","thumbnail":"http://ox0p9pctg.bkt.clouddn.com/201709293.jpeg","_content":"\n#### 题 3:\n\n求极限 $\\lim _{\\tiny{x\\rightarrow\\infty}} {(b^{\\tiny{\\dfrac{1}{n}}}-1)}\\sum_{j=0}^{n-1}  {b^{\\tiny{\\dfrac{i}{n}}} \\: sin\\: b^{\\tiny{\\dfrac{2i+1}{2n}}}(b>1).}$\n\n<!--more-->\n\n- - -\n\n#### 证明:\n\n原式 = $\\lim _{\\tiny{x\\rightarrow\\infty}}(b^{\\tiny{\\dfrac {i+1} {n}}}-b^{\\tiny{\\dfrac{i}{n}}})\\sum _{i=0}^{n-1}{sin\\: b^{\\tiny{\\dfrac{2i+1}{2n}}}}$ ,这里的和式可以看作sin x 在[1,b]上划分所做的积分和,区间划分如下:\n\n$1=b^{\\tiny\\dfrac{0}{n}}<b^{\\tiny\\dfrac{1}{n}}<b^{\\tiny\\dfrac{2}{n}}<...<b^{\\tiny\\dfrac{n}{n}}=b$\n\n其中 $\\Delta x_{i}=b^{\\tiny{\\dfrac {i+1} {n}}}-b^{\\tiny{\\dfrac{1}{n}}}$ 是区间 $[b^{\\tiny{\\dfrac{i}{n}}},b^{\\tiny{\\dfrac{i+1}{n}}}]$ 的长度，最大的长度:\n\n$\\lambda=max_{\\tiny{0\\leq i \\leq n-1}}\\Delta x_i\\leq b(b^{\\tiny\\dfrac{1}{n}}-1)\\rightarrow0$,\n\n$\\xi_i=b^{\\tiny\\dfrac{2i+1}{2n}}\\in[b^{\\tiny{\\dfrac{i}{n}}},b^{\\tiny{\\dfrac{i+1}{n}}}]$ 是小区间两端点的比例中项.\n\n因此原极限= $\\int _{1}^{b}sin\\: xdx=cos\\:1-cos\\:b$.\n- - -\nTHE END.\n","source":"_posts/2017-09-29-3.md","raw":"---\ntitle: 20170929.3\ndate: 2017-09-29\ncategories: 定积分\ntags: [定积分的精确定义]\nbanner: http://ox0p9pctg.bkt.clouddn.com/201709293.jpeg\nthumbnail: http://ox0p9pctg.bkt.clouddn.com/201709293.jpeg\n---\n\n#### 题 3:\n\n求极限 $\\lim _{\\tiny{x\\rightarrow\\infty}} {(b^{\\tiny{\\dfrac{1}{n}}}-1)}\\sum_{j=0}^{n-1}  {b^{\\tiny{\\dfrac{i}{n}}} \\: sin\\: b^{\\tiny{\\dfrac{2i+1}{2n}}}(b>1).}$\n\n<!--more-->\n\n- - -\n\n#### 证明:\n\n原式 = $\\lim _{\\tiny{x\\rightarrow\\infty}}(b^{\\tiny{\\dfrac {i+1} {n}}}-b^{\\tiny{\\dfrac{i}{n}}})\\sum _{i=0}^{n-1}{sin\\: b^{\\tiny{\\dfrac{2i+1}{2n}}}}$ ,这里的和式可以看作sin x 在[1,b]上划分所做的积分和,区间划分如下:\n\n$1=b^{\\tiny\\dfrac{0}{n}}<b^{\\tiny\\dfrac{1}{n}}<b^{\\tiny\\dfrac{2}{n}}<...<b^{\\tiny\\dfrac{n}{n}}=b$\n\n其中 $\\Delta x_{i}=b^{\\tiny{\\dfrac {i+1} {n}}}-b^{\\tiny{\\dfrac{1}{n}}}$ 是区间 $[b^{\\tiny{\\dfrac{i}{n}}},b^{\\tiny{\\dfrac{i+1}{n}}}]$ 的长度，最大的长度:\n\n$\\lambda=max_{\\tiny{0\\leq i \\leq n-1}}\\Delta x_i\\leq b(b^{\\tiny\\dfrac{1}{n}}-1)\\rightarrow0$,\n\n$\\xi_i=b^{\\tiny\\dfrac{2i+1}{2n}}\\in[b^{\\tiny{\\dfrac{i}{n}}},b^{\\tiny{\\dfrac{i+1}{n}}}]$ 是小区间两端点的比例中项.\n\n因此原极限= $\\int _{1}^{b}sin\\: xdx=cos\\:1-cos\\:b$.\n- - -\nTHE END.\n","slug":"2017-09-29-3","published":1,"updated":"2018-02-24T05:24:41.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsb9x001huro5x26blzax","content":"<h4 id=\"题-3\"><a href=\"#题-3\" class=\"headerlink\" title=\"题 3:\"></a>题 3:</h4><p>求极限 $\\lim _{\\tiny{x\\rightarrow\\infty}} {(b^{\\tiny{\\dfrac{1}{n}}}-1)}\\sum_{j=0}^{n-1}  {b^{\\tiny{\\dfrac{i}{n}}} \\: sin\\: b^{\\tiny{\\dfrac{2i+1}{2n}}}(b&gt;1).}$</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明:\"></a>证明:</h4><p>原式 = $\\lim _{\\tiny{x\\rightarrow\\infty}}(b^{\\tiny{\\dfrac {i+1} {n}}}-b^{\\tiny{\\dfrac{i}{n}}})\\sum _{i=0}^{n-1}{sin\\: b^{\\tiny{\\dfrac{2i+1}{2n}}}}$ ,这里的和式可以看作sin x 在[1,b]上划分所做的积分和,区间划分如下:</p>\n<p>$1=b^{\\tiny\\dfrac{0}{n}}&lt;b^{\\tiny\\dfrac{1}{n}}&lt;b^{\\tiny\\dfrac{2}{n}}&lt;…&lt;b^{\\tiny\\dfrac{n}{n}}=b$</p>\n<p>其中 $\\Delta x_{i}=b^{\\tiny{\\dfrac {i+1} {n}}}-b^{\\tiny{\\dfrac{1}{n}}}$ 是区间 $[b^{\\tiny{\\dfrac{i}{n}}},b^{\\tiny{\\dfrac{i+1}{n}}}]$ 的长度，最大的长度:</p>\n<p>$\\lambda=max_{\\tiny{0\\leq i \\leq n-1}}\\Delta x_i\\leq b(b^{\\tiny\\dfrac{1}{n}}-1)\\rightarrow0$,</p>\n<p>$\\xi_i=b^{\\tiny\\dfrac{2i+1}{2n}}\\in[b^{\\tiny{\\dfrac{i}{n}}},b^{\\tiny{\\dfrac{i+1}{n}}}]$ 是小区间两端点的比例中项.</p>\n<p>因此原极限= $\\int _{1}^{b}sin\\: xdx=cos\\:1-cos\\:b$.</p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"题-3\"><a href=\"#题-3\" class=\"headerlink\" title=\"题 3:\"></a>题 3:</h4><p>求极限 $\\lim _{\\tiny{x\\rightarrow\\infty}} {(b^{\\tiny{\\dfrac{1}{n}}}-1)}\\sum_{j=0}^{n-1}  {b^{\\tiny{\\dfrac{i}{n}}} \\: sin\\: b^{\\tiny{\\dfrac{2i+1}{2n}}}(b&gt;1).}$</p>","more":"<hr>\n<h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明:\"></a>证明:</h4><p>原式 = $\\lim _{\\tiny{x\\rightarrow\\infty}}(b^{\\tiny{\\dfrac {i+1} {n}}}-b^{\\tiny{\\dfrac{i}{n}}})\\sum _{i=0}^{n-1}{sin\\: b^{\\tiny{\\dfrac{2i+1}{2n}}}}$ ,这里的和式可以看作sin x 在[1,b]上划分所做的积分和,区间划分如下:</p>\n<p>$1=b^{\\tiny\\dfrac{0}{n}}&lt;b^{\\tiny\\dfrac{1}{n}}&lt;b^{\\tiny\\dfrac{2}{n}}&lt;…&lt;b^{\\tiny\\dfrac{n}{n}}=b$</p>\n<p>其中 $\\Delta x_{i}=b^{\\tiny{\\dfrac {i+1} {n}}}-b^{\\tiny{\\dfrac{1}{n}}}$ 是区间 $[b^{\\tiny{\\dfrac{i}{n}}},b^{\\tiny{\\dfrac{i+1}{n}}}]$ 的长度，最大的长度:</p>\n<p>$\\lambda=max_{\\tiny{0\\leq i \\leq n-1}}\\Delta x_i\\leq b(b^{\\tiny\\dfrac{1}{n}}-1)\\rightarrow0$,</p>\n<p>$\\xi_i=b^{\\tiny\\dfrac{2i+1}{2n}}\\in[b^{\\tiny{\\dfrac{i}{n}}},b^{\\tiny{\\dfrac{i+1}{n}}}]$ 是小区间两端点的比例中项.</p>\n<p>因此原极限= $\\int _{1}^{b}sin\\: xdx=cos\\:1-cos\\:b$.</p>\n<hr>\n<p>THE END.</p>"},{"title":"线性代数陌生公式","date":"2017-12-24T16:00:00.000Z","_content":"\n1. $\\left(kA\\right)^{\\ast}=k^{n-1}A^{\\ast}$\n\n2. $|A^{\\ast}|=|A|^{n-1}$\n\n3. $|kA|=k^{n}|A|$\n\n<!--more-->\n\n4. $\\begin{vmatrix}A & O \\\\O & B\\end{vmatrix}^{-1}=\\begin{vmatrix}A^{-1} & O \\\\O & B^{-1}\\end{vmatrix}$\n\n5. $\\begin{vmatrix}O & A \\\\B & O\\end{vmatrix}^{-1}=\\begin{vmatrix}O & B^{-1} \\\\A^{-1} & O\\end{vmatrix}$\n\n6. $A^{-1}=\\dfrac{A^{\\ast}}{|A|} <=> (A^{\\ast})^{-1}=\\dfrac{A}{|A|} <=> AA^{\\ast}=|A|E$\n\n7. $(A^{T})^{\\ast}=(A^{\\ast})^{T}$\n\n8. $(A^{T})^{-1}=(A^{-1})^{T}$\n\n9. $(A^{-1})^{\\ast}=(A^{\\ast})^{-1}$\n\n10. $(A^{\\ast})^{\\ast}=|A|^{n-2}A$\n\n11. $(AB)^{\\ast}=B^{\\ast}A^{\\ast}$\n\n12. $r(A^{\\ast})=\\begin{cases}n,r(A)=n\\\\1,r(A)=n-1\\\\0,r(A)<n-1 \\end{cases}$\n\n13. $r(AB)\\geq r(A)+r(B)-n$\n\n14. $r(A)=r(A^{T}A)$\n\n15. $r(A|B)\\leq r(A)+r(B)$\n\n16. $r(A|B)\\geq r(A)$\n\n17. $(A+B)^n=A^n+C_n^1A^{n-1}B+C_n^{2}A^{n-2}B^2+...+C_n^{n-1}AB^{n-1}+B^n$\n\n\n- - -\nTHE END.\n","source":"_posts/2017-12-25.md","raw":"---\ntitle: 线性代数陌生公式\ndate: 2017-12-25\ncategories: 线性代数\ntags: 公式\n---\n\n1. $\\left(kA\\right)^{\\ast}=k^{n-1}A^{\\ast}$\n\n2. $|A^{\\ast}|=|A|^{n-1}$\n\n3. $|kA|=k^{n}|A|$\n\n<!--more-->\n\n4. $\\begin{vmatrix}A & O \\\\O & B\\end{vmatrix}^{-1}=\\begin{vmatrix}A^{-1} & O \\\\O & B^{-1}\\end{vmatrix}$\n\n5. $\\begin{vmatrix}O & A \\\\B & O\\end{vmatrix}^{-1}=\\begin{vmatrix}O & B^{-1} \\\\A^{-1} & O\\end{vmatrix}$\n\n6. $A^{-1}=\\dfrac{A^{\\ast}}{|A|} <=> (A^{\\ast})^{-1}=\\dfrac{A}{|A|} <=> AA^{\\ast}=|A|E$\n\n7. $(A^{T})^{\\ast}=(A^{\\ast})^{T}$\n\n8. $(A^{T})^{-1}=(A^{-1})^{T}$\n\n9. $(A^{-1})^{\\ast}=(A^{\\ast})^{-1}$\n\n10. $(A^{\\ast})^{\\ast}=|A|^{n-2}A$\n\n11. $(AB)^{\\ast}=B^{\\ast}A^{\\ast}$\n\n12. $r(A^{\\ast})=\\begin{cases}n,r(A)=n\\\\1,r(A)=n-1\\\\0,r(A)<n-1 \\end{cases}$\n\n13. $r(AB)\\geq r(A)+r(B)-n$\n\n14. $r(A)=r(A^{T}A)$\n\n15. $r(A|B)\\leq r(A)+r(B)$\n\n16. $r(A|B)\\geq r(A)$\n\n17. $(A+B)^n=A^n+C_n^1A^{n-1}B+C_n^{2}A^{n-2}B^2+...+C_n^{n-1}AB^{n-1}+B^n$\n\n\n- - -\nTHE END.\n","slug":"2017-12-25","published":1,"updated":"2018-02-24T05:24:41.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsb9y001kuro5r5jb2iio","content":"<ol>\n<li><p>$\\left(kA\\right)^{\\ast}=k^{n-1}A^{\\ast}$</p>\n</li>\n<li><p>$|A^{\\ast}|=|A|^{n-1}$</p>\n</li>\n<li><p>$|kA|=k^{n}|A|$</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p>$\\begin{vmatrix}A &amp; O \\\\O &amp; B\\end{vmatrix}^{-1}=\\begin{vmatrix}A^{-1} &amp; O \\\\O &amp; B^{-1}\\end{vmatrix}$</p>\n</li>\n<li><p>$\\begin{vmatrix}O &amp; A \\\\B &amp; O\\end{vmatrix}^{-1}=\\begin{vmatrix}O &amp; B^{-1} \\\\A^{-1} &amp; O\\end{vmatrix}$</p>\n</li>\n<li><p>$A^{-1}=\\dfrac{A^{\\ast}}{|A|} &lt;=&gt; (A^{\\ast})^{-1}=\\dfrac{A}{|A|} &lt;=&gt; AA^{\\ast}=|A|E$</p>\n</li>\n<li><p>$(A^{T})^{\\ast}=(A^{\\ast})^{T}$</p>\n</li>\n<li><p>$(A^{T})^{-1}=(A^{-1})^{T}$</p>\n</li>\n<li><p>$(A^{-1})^{\\ast}=(A^{\\ast})^{-1}$</p>\n</li>\n<li><p>$(A^{\\ast})^{\\ast}=|A|^{n-2}A$</p>\n</li>\n<li><p>$(AB)^{\\ast}=B^{\\ast}A^{\\ast}$</p>\n</li>\n<li><p>$r(A^{\\ast})=\\begin{cases}n,r(A)=n\\\\1,r(A)=n-1\\\\0,r(A)&lt;n-1 \\end{cases}$</p>\n</li>\n<li><p>$r(AB)\\geq r(A)+r(B)-n$</p>\n</li>\n<li><p>$r(A)=r(A^{T}A)$</p>\n</li>\n<li><p>$r(A|B)\\leq r(A)+r(B)$</p>\n</li>\n<li><p>$r(A|B)\\geq r(A)$</p>\n</li>\n<li><p>$(A+B)^n=A^n+C_n^1A^{n-1}B+C_n^{2}A^{n-2}B^2+…+C_n^{n-1}AB^{n-1}+B^n$</p>\n</li>\n</ol>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>$\\left(kA\\right)^{\\ast}=k^{n-1}A^{\\ast}$</p>\n</li>\n<li><p>$|A^{\\ast}|=|A|^{n-1}$</p>\n</li>\n<li><p>$|kA|=k^{n}|A|$</p>\n</li>\n</ol>","more":"<ol>\n<li><p>$\\begin{vmatrix}A &amp; O \\\\O &amp; B\\end{vmatrix}^{-1}=\\begin{vmatrix}A^{-1} &amp; O \\\\O &amp; B^{-1}\\end{vmatrix}$</p>\n</li>\n<li><p>$\\begin{vmatrix}O &amp; A \\\\B &amp; O\\end{vmatrix}^{-1}=\\begin{vmatrix}O &amp; B^{-1} \\\\A^{-1} &amp; O\\end{vmatrix}$</p>\n</li>\n<li><p>$A^{-1}=\\dfrac{A^{\\ast}}{|A|} &lt;=&gt; (A^{\\ast})^{-1}=\\dfrac{A}{|A|} &lt;=&gt; AA^{\\ast}=|A|E$</p>\n</li>\n<li><p>$(A^{T})^{\\ast}=(A^{\\ast})^{T}$</p>\n</li>\n<li><p>$(A^{T})^{-1}=(A^{-1})^{T}$</p>\n</li>\n<li><p>$(A^{-1})^{\\ast}=(A^{\\ast})^{-1}$</p>\n</li>\n<li><p>$(A^{\\ast})^{\\ast}=|A|^{n-2}A$</p>\n</li>\n<li><p>$(AB)^{\\ast}=B^{\\ast}A^{\\ast}$</p>\n</li>\n<li><p>$r(A^{\\ast})=\\begin{cases}n,r(A)=n\\\\1,r(A)=n-1\\\\0,r(A)&lt;n-1 \\end{cases}$</p>\n</li>\n<li><p>$r(AB)\\geq r(A)+r(B)-n$</p>\n</li>\n<li><p>$r(A)=r(A^{T}A)$</p>\n</li>\n<li><p>$r(A|B)\\leq r(A)+r(B)$</p>\n</li>\n<li><p>$r(A|B)\\geq r(A)$</p>\n</li>\n<li><p>$(A+B)^n=A^n+C_n^1A^{n-1}B+C_n^{2}A^{n-2}B^2+…+C_n^{n-1}AB^{n-1}+B^n$</p>\n</li>\n</ol>\n<hr>\n<p>THE END.</p>"},{"title":"感知机","date":"2018-02-18T16:00:00.000Z","_content":"\n#### 感知机\n\n感知机（perceptron）是一种二分类的线性分类模型，输入为实例的特征向量，输出为实例的类别（取+1和-1）。感知机对应于输入空间中将实例划分为两类的分离超平面。感知机旨在求出该超平面，为求得超平面导入了基于误分类的损失函数，利用梯度下降法 对损失函数进行最优化（最优化）。\n\n<!--more-->\n\n#### 感知机的损失函数\n\n$L(w,b)=-\\sum_{i=1}^{M} {y_i(w*x_i+b)}$\n\n显然，损失函数L(w,b)是非负的。如果没有误分类点，那么L(w,b)为0，误分类点数越少，L(w,b)值越小。一个特定的损失函数：在误分类时是参数w,b的线性函数，在正确分类时，是0。\n\n损失函数L(w,b)的梯度：\n\n$\\nabla_w L(w,b)=-\\sum_{i=1}^{M}y_i\\:x_i$\n\n$\\nabla_b L(w,b)=-\\sum_{i=1}^{M}y_i$\n\n求解损失函数极小值的过程：\n\n首先，任意选定w0、b0，然后用梯度下降法不断极小化目标损失函数，极小化的过程不是一次性的把M中的所有误分类点梯度下降，而是一次随机选取一个误分类点使其梯度下降：\n\n$w=w+\\eta y_i\\:x_i$\n\n$b=b+\\eta y_i$\n\n式中η（0≤η≤1）是步长，在统计学是中成为学习速率。步长越大，梯度下降的速度越快，更能接近极小点。如果步长过大，有可能导致跨过极小点，导致函数发散；如果步长过小，有可能会耗很长时间才能达到极小点。\n\n#### 实现代码\n\n从输入参数得到训练文件和模型文件：\n\n```python\nn = float(sys.argv[1])\ntrainFile = open(sys.argv[2])\nmodelFile= open(sys.argv[3], 'w')\n```\n\n从训练文件中读取训练数据：\n\n```python\nfor line in trainFile:\n  chunk = line.strip().split(' ') #每行的数据\n  lens = len(chunk) - 1 #最后一行是训练输出\n  tmp_all = []\n  tmp = []\n  for i in range(1, lens+1):\n    tmp.append(int(chunk[i]))\n  tmp_all.append(tmp)\n  tmp_all.append(int(chunk[0]))\n  training_set.append(tmp_all)\n\ntrainFile.close()\n```\n\n训练数据：\n```\n1 3 3\n1 4 3\n-1 1 1\n```\n\n计算点到超平面的距离：\n```python\ndef cal(item):\n    global w, b\n    res = 0\n    for i in range(len(item[0])):\n        res += item[0][i] * w[i] #w和xi的内积\n    res += b\n    res *= item[1]\n    return res\n```\n\n判断是否是误分类点，如果是误分类点则更新参数:\n```python\nfor item in training_set:\n  if cal(item) <= 0:\n    flag = True\n    update(item)\n```\n\n使用随机梯度下降法更新参数：\n```python\ndef update(item):\n\tglobal w, b, lens, n #n就是学习速率η\n\tfor i in range(lens):\n\t\tw[i] = w[i] + n * item[1] * item[0][i]\n\tb = b + n * item[1]\n```\n\n疑问：感知机的对偶形式\n\n参考：[http://www.cnblogs.com/kaituorensheng/p/3561091.html](http://www.cnblogs.com/kaituorensheng/p/3561091.html)\n- - -\nTHE END.\n","source":"_posts/2018-02-19_perceptron.md","raw":"---\ntitle: 感知机\ndate: 2018-02-19\ncategories: 机器学习\ntags: [感知机]\n---\n\n#### 感知机\n\n感知机（perceptron）是一种二分类的线性分类模型，输入为实例的特征向量，输出为实例的类别（取+1和-1）。感知机对应于输入空间中将实例划分为两类的分离超平面。感知机旨在求出该超平面，为求得超平面导入了基于误分类的损失函数，利用梯度下降法 对损失函数进行最优化（最优化）。\n\n<!--more-->\n\n#### 感知机的损失函数\n\n$L(w,b)=-\\sum_{i=1}^{M} {y_i(w*x_i+b)}$\n\n显然，损失函数L(w,b)是非负的。如果没有误分类点，那么L(w,b)为0，误分类点数越少，L(w,b)值越小。一个特定的损失函数：在误分类时是参数w,b的线性函数，在正确分类时，是0。\n\n损失函数L(w,b)的梯度：\n\n$\\nabla_w L(w,b)=-\\sum_{i=1}^{M}y_i\\:x_i$\n\n$\\nabla_b L(w,b)=-\\sum_{i=1}^{M}y_i$\n\n求解损失函数极小值的过程：\n\n首先，任意选定w0、b0，然后用梯度下降法不断极小化目标损失函数，极小化的过程不是一次性的把M中的所有误分类点梯度下降，而是一次随机选取一个误分类点使其梯度下降：\n\n$w=w+\\eta y_i\\:x_i$\n\n$b=b+\\eta y_i$\n\n式中η（0≤η≤1）是步长，在统计学是中成为学习速率。步长越大，梯度下降的速度越快，更能接近极小点。如果步长过大，有可能导致跨过极小点，导致函数发散；如果步长过小，有可能会耗很长时间才能达到极小点。\n\n#### 实现代码\n\n从输入参数得到训练文件和模型文件：\n\n```python\nn = float(sys.argv[1])\ntrainFile = open(sys.argv[2])\nmodelFile= open(sys.argv[3], 'w')\n```\n\n从训练文件中读取训练数据：\n\n```python\nfor line in trainFile:\n  chunk = line.strip().split(' ') #每行的数据\n  lens = len(chunk) - 1 #最后一行是训练输出\n  tmp_all = []\n  tmp = []\n  for i in range(1, lens+1):\n    tmp.append(int(chunk[i]))\n  tmp_all.append(tmp)\n  tmp_all.append(int(chunk[0]))\n  training_set.append(tmp_all)\n\ntrainFile.close()\n```\n\n训练数据：\n```\n1 3 3\n1 4 3\n-1 1 1\n```\n\n计算点到超平面的距离：\n```python\ndef cal(item):\n    global w, b\n    res = 0\n    for i in range(len(item[0])):\n        res += item[0][i] * w[i] #w和xi的内积\n    res += b\n    res *= item[1]\n    return res\n```\n\n判断是否是误分类点，如果是误分类点则更新参数:\n```python\nfor item in training_set:\n  if cal(item) <= 0:\n    flag = True\n    update(item)\n```\n\n使用随机梯度下降法更新参数：\n```python\ndef update(item):\n\tglobal w, b, lens, n #n就是学习速率η\n\tfor i in range(lens):\n\t\tw[i] = w[i] + n * item[1] * item[0][i]\n\tb = b + n * item[1]\n```\n\n疑问：感知机的对偶形式\n\n参考：[http://www.cnblogs.com/kaituorensheng/p/3561091.html](http://www.cnblogs.com/kaituorensheng/p/3561091.html)\n- - -\nTHE END.\n","slug":"2018-02-19_perceptron","published":1,"updated":"2018-02-24T05:25:50.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsba0001muro55e370np5","content":"<h4 id=\"感知机\"><a href=\"#感知机\" class=\"headerlink\" title=\"感知机\"></a>感知机</h4><p>感知机（perceptron）是一种二分类的线性分类模型，输入为实例的特征向量，输出为实例的类别（取+1和-1）。感知机对应于输入空间中将实例划分为两类的分离超平面。感知机旨在求出该超平面，为求得超平面导入了基于误分类的损失函数，利用梯度下降法 对损失函数进行最优化（最优化）。</p>\n<a id=\"more\"></a>\n<h4 id=\"感知机的损失函数\"><a href=\"#感知机的损失函数\" class=\"headerlink\" title=\"感知机的损失函数\"></a>感知机的损失函数</h4><p>$L(w,b)=-\\sum_{i=1}^{M} {y_i(w*x_i+b)}$</p>\n<p>显然，损失函数L(w,b)是非负的。如果没有误分类点，那么L(w,b)为0，误分类点数越少，L(w,b)值越小。一个特定的损失函数：在误分类时是参数w,b的线性函数，在正确分类时，是0。</p>\n<p>损失函数L(w,b)的梯度：</p>\n<p>$\\nabla_w L(w,b)=-\\sum_{i=1}^{M}y_i\\:x_i$</p>\n<p>$\\nabla_b L(w,b)=-\\sum_{i=1}^{M}y_i$</p>\n<p>求解损失函数极小值的过程：</p>\n<p>首先，任意选定w0、b0，然后用梯度下降法不断极小化目标损失函数，极小化的过程不是一次性的把M中的所有误分类点梯度下降，而是一次随机选取一个误分类点使其梯度下降：</p>\n<p>$w=w+\\eta y_i\\:x_i$</p>\n<p>$b=b+\\eta y_i$</p>\n<p>式中η（0≤η≤1）是步长，在统计学是中成为学习速率。步长越大，梯度下降的速度越快，更能接近极小点。如果步长过大，有可能导致跨过极小点，导致函数发散；如果步长过小，有可能会耗很长时间才能达到极小点。</p>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h4><p>从输入参数得到训练文件和模型文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = float(sys.argv[<span class=\"number\">1</span>])</div><div class=\"line\">trainFile = open(sys.argv[<span class=\"number\">2</span>])</div><div class=\"line\">modelFile= open(sys.argv[<span class=\"number\">3</span>], <span class=\"string\">'w'</span>)</div></pre></td></tr></table></figure>\n<p>从训练文件中读取训练数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> trainFile:</div><div class=\"line\">  chunk = line.strip().split(<span class=\"string\">' '</span>) <span class=\"comment\">#每行的数据</span></div><div class=\"line\">  lens = len(chunk) - <span class=\"number\">1</span> <span class=\"comment\">#最后一行是训练输出</span></div><div class=\"line\">  tmp_all = []</div><div class=\"line\">  tmp = []</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, lens+<span class=\"number\">1</span>):</div><div class=\"line\">    tmp.append(int(chunk[i]))</div><div class=\"line\">  tmp_all.append(tmp)</div><div class=\"line\">  tmp_all.append(int(chunk[<span class=\"number\">0</span>]))</div><div class=\"line\">  training_set.append(tmp_all)</div><div class=\"line\"></div><div class=\"line\">trainFile.close()</div></pre></td></tr></table></figure>\n<p>训练数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 3 3</div><div class=\"line\">1 4 3</div><div class=\"line\">-1 1 1</div></pre></td></tr></table></figure></p>\n<p>计算点到超平面的距离：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cal</span><span class=\"params\">(item)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">global</span> w, b</div><div class=\"line\">    res = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(item[<span class=\"number\">0</span>])):</div><div class=\"line\">        res += item[<span class=\"number\">0</span>][i] * w[i] <span class=\"comment\">#w和xi的内积</span></div><div class=\"line\">    res += b</div><div class=\"line\">    res *= item[<span class=\"number\">1</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> res</div></pre></td></tr></table></figure></p>\n<p>判断是否是误分类点，如果是误分类点则更新参数:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> training_set:</div><div class=\"line\">  <span class=\"keyword\">if</span> cal(item) &lt;= <span class=\"number\">0</span>:</div><div class=\"line\">    flag = <span class=\"keyword\">True</span></div><div class=\"line\">    update(item)</div></pre></td></tr></table></figure></p>\n<p>使用随机梯度下降法更新参数：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(item)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">global</span> w, b, lens, n <span class=\"comment\">#n就是学习速率η</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(lens):</div><div class=\"line\">\t\tw[i] = w[i] + n * item[<span class=\"number\">1</span>] * item[<span class=\"number\">0</span>][i]</div><div class=\"line\">\tb = b + n * item[<span class=\"number\">1</span>]</div></pre></td></tr></table></figure></p>\n<p>疑问：感知机的对偶形式</p>\n<p>参考：<a href=\"http://www.cnblogs.com/kaituorensheng/p/3561091.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/kaituorensheng/p/3561091.html</a></p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"感知机\"><a href=\"#感知机\" class=\"headerlink\" title=\"感知机\"></a>感知机</h4><p>感知机（perceptron）是一种二分类的线性分类模型，输入为实例的特征向量，输出为实例的类别（取+1和-1）。感知机对应于输入空间中将实例划分为两类的分离超平面。感知机旨在求出该超平面，为求得超平面导入了基于误分类的损失函数，利用梯度下降法 对损失函数进行最优化（最优化）。</p>","more":"<h4 id=\"感知机的损失函数\"><a href=\"#感知机的损失函数\" class=\"headerlink\" title=\"感知机的损失函数\"></a>感知机的损失函数</h4><p>$L(w,b)=-\\sum_{i=1}^{M} {y_i(w*x_i+b)}$</p>\n<p>显然，损失函数L(w,b)是非负的。如果没有误分类点，那么L(w,b)为0，误分类点数越少，L(w,b)值越小。一个特定的损失函数：在误分类时是参数w,b的线性函数，在正确分类时，是0。</p>\n<p>损失函数L(w,b)的梯度：</p>\n<p>$\\nabla_w L(w,b)=-\\sum_{i=1}^{M}y_i\\:x_i$</p>\n<p>$\\nabla_b L(w,b)=-\\sum_{i=1}^{M}y_i$</p>\n<p>求解损失函数极小值的过程：</p>\n<p>首先，任意选定w0、b0，然后用梯度下降法不断极小化目标损失函数，极小化的过程不是一次性的把M中的所有误分类点梯度下降，而是一次随机选取一个误分类点使其梯度下降：</p>\n<p>$w=w+\\eta y_i\\:x_i$</p>\n<p>$b=b+\\eta y_i$</p>\n<p>式中η（0≤η≤1）是步长，在统计学是中成为学习速率。步长越大，梯度下降的速度越快，更能接近极小点。如果步长过大，有可能导致跨过极小点，导致函数发散；如果步长过小，有可能会耗很长时间才能达到极小点。</p>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h4><p>从输入参数得到训练文件和模型文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = float(sys.argv[<span class=\"number\">1</span>])</div><div class=\"line\">trainFile = open(sys.argv[<span class=\"number\">2</span>])</div><div class=\"line\">modelFile= open(sys.argv[<span class=\"number\">3</span>], <span class=\"string\">'w'</span>)</div></pre></td></tr></table></figure>\n<p>从训练文件中读取训练数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> trainFile:</div><div class=\"line\">  chunk = line.strip().split(<span class=\"string\">' '</span>) <span class=\"comment\">#每行的数据</span></div><div class=\"line\">  lens = len(chunk) - <span class=\"number\">1</span> <span class=\"comment\">#最后一行是训练输出</span></div><div class=\"line\">  tmp_all = []</div><div class=\"line\">  tmp = []</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, lens+<span class=\"number\">1</span>):</div><div class=\"line\">    tmp.append(int(chunk[i]))</div><div class=\"line\">  tmp_all.append(tmp)</div><div class=\"line\">  tmp_all.append(int(chunk[<span class=\"number\">0</span>]))</div><div class=\"line\">  training_set.append(tmp_all)</div><div class=\"line\"></div><div class=\"line\">trainFile.close()</div></pre></td></tr></table></figure>\n<p>训练数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 3 3</div><div class=\"line\">1 4 3</div><div class=\"line\">-1 1 1</div></pre></td></tr></table></figure></p>\n<p>计算点到超平面的距离：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cal</span><span class=\"params\">(item)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">global</span> w, b</div><div class=\"line\">    res = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(item[<span class=\"number\">0</span>])):</div><div class=\"line\">        res += item[<span class=\"number\">0</span>][i] * w[i] <span class=\"comment\">#w和xi的内积</span></div><div class=\"line\">    res += b</div><div class=\"line\">    res *= item[<span class=\"number\">1</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> res</div></pre></td></tr></table></figure></p>\n<p>判断是否是误分类点，如果是误分类点则更新参数:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> training_set:</div><div class=\"line\">  <span class=\"keyword\">if</span> cal(item) &lt;= <span class=\"number\">0</span>:</div><div class=\"line\">    flag = <span class=\"keyword\">True</span></div><div class=\"line\">    update(item)</div></pre></td></tr></table></figure></p>\n<p>使用随机梯度下降法更新参数：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(item)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">global</span> w, b, lens, n <span class=\"comment\">#n就是学习速率η</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(lens):</div><div class=\"line\">\t\tw[i] = w[i] + n * item[<span class=\"number\">1</span>] * item[<span class=\"number\">0</span>][i]</div><div class=\"line\">\tb = b + n * item[<span class=\"number\">1</span>]</div></pre></td></tr></table></figure></p>\n<p>疑问：感知机的对偶形式</p>\n<p>参考：<a href=\"http://www.cnblogs.com/kaituorensheng/p/3561091.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/kaituorensheng/p/3561091.html</a></p>\n<hr>\n<p>THE END.</p>"},{"title":"机器学习构建chatbot","date":"2018-02-24T16:00:00.000Z","_content":"\n#### 预备知识\n\n机器人应答逻辑（Logic Adapter），针对每个部分设计了不同的适配器\n\n1. Closet Match Adapter:字符串模糊匹配（编辑距离）\n2. Closet Meaning Adapter:借助nltk的WordNet，近义词评估\n3. Time Logic Adapter:处理涉及实践的提问\n4. Mathematical Evaluation Adapter:涉及数学运算\n\n存储器后段（Storage Adapter）\n\n1. Read Only Mode:只读模式\n2. Json Database Mode:Json格式存储对话数据\n3. Mongo Database Mode:以MongoDb方式存储对话数据库\n\n输入形式（Input Adapter）\n\n1. Variable input type Adapter:允许chatbot接收不同类型的输入\n2. Terminal Adapter:以终端方式进行对话\n3. HipChat Adapter:通过HipChat聊天室和chatbo进行对话\n4. Speech recognition:语音识别输入\n\n输出形式（Output Adapters）\n\n1. Output format adapter:支持text，json和object格式的输出\n2. Terminal adapter\n3. HipChat Adapter\n4. Mailgun adapter:允许chat bot基于Mailgun API进行邮件的发送   Speech synthesis\n5. TTS(Text to speech)部分，详见chatterbot-voice\n\n<!--more-->\n\n#### 使用ChatterBot构建聊天机器人\n\n##### 1. 首先构建ChatBot并指定Adapter\n\n```python\n# -*- coding: utf-8 -*-\nfrom chatterbot import ChatBot\nbot = ChatBot(\n    'Default Response Example Bot',\n    #置信度低于0.65时回复default_response\n    logic_adapters=[\n        {\n            'import_path': 'chatterbot.logic.BestMatch'\n        },\n        {\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\n            'threshold': 0.65,\n            'default_response': 'I am sorry, but I do not understand.'\n        }\n    ],\n    #指定对话类型是列表\n    trainer='chatterbot.trainers.ListTrainer'\n)\n\n```\n\n##### 2. 接着手动给定一点语料用于训练\n\n```python\nbot.train([\n    'How can I help you?',\n    'I want to create a chat bot',\n    'Have you read the documentation?',\n    'No, I have not',\n    'This should help get you started: http://chatterbot.rtfd.org/en/latest/quickstart.html'\n])\n```\n\n##### 3. 给定问题并取回结果\n\n```python\nquestion = 'How do I make an omelette?'\nprint(question)\nresponse = bot.get_response(question)\nprint(response)\n\nprint(\"\\n\")\nquestion = 'how to make a chat bot?'\nprint(question)\nresponse = bot.get_response(question)\nprint(response)\n```\n\n各自输出：\n\n```\nHow do I make an omelette?\nI am sorry, but I do not understand.\n\n\nhow to make a chat bot?\nHave you read the documentation?\n```\n\n##### 4. 使用chatterbot自带的中文语料库训练\n\n```python\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nfrom chatterbot import ChatBot\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\n\nchatbot = ChatBot(\"ChineseChatBot\")\nchatbot.set_trainer(ChatterBotCorpusTrainer)\n\n# 使用中文语料库训练它\nchatbot.train(\"chatterbot.corpus.chinese\")\n\n# 开始对话\nwhile True:\n    print(chatbot.get_response(input(\">\")))\n```\n\n试了一下，问答比较二。。。\n\n- - -\n1. seq2seq\n2. LSTM\n\n\n- - -\nTHE END.\n","source":"_posts/2018-02-24_chatbot.md","raw":"---\ntitle: 机器学习构建chatbot\ndate: 2018-02-25\ncategories: 机器学习\n---\n\n#### 预备知识\n\n机器人应答逻辑（Logic Adapter），针对每个部分设计了不同的适配器\n\n1. Closet Match Adapter:字符串模糊匹配（编辑距离）\n2. Closet Meaning Adapter:借助nltk的WordNet，近义词评估\n3. Time Logic Adapter:处理涉及实践的提问\n4. Mathematical Evaluation Adapter:涉及数学运算\n\n存储器后段（Storage Adapter）\n\n1. Read Only Mode:只读模式\n2. Json Database Mode:Json格式存储对话数据\n3. Mongo Database Mode:以MongoDb方式存储对话数据库\n\n输入形式（Input Adapter）\n\n1. Variable input type Adapter:允许chatbot接收不同类型的输入\n2. Terminal Adapter:以终端方式进行对话\n3. HipChat Adapter:通过HipChat聊天室和chatbo进行对话\n4. Speech recognition:语音识别输入\n\n输出形式（Output Adapters）\n\n1. Output format adapter:支持text，json和object格式的输出\n2. Terminal adapter\n3. HipChat Adapter\n4. Mailgun adapter:允许chat bot基于Mailgun API进行邮件的发送   Speech synthesis\n5. TTS(Text to speech)部分，详见chatterbot-voice\n\n<!--more-->\n\n#### 使用ChatterBot构建聊天机器人\n\n##### 1. 首先构建ChatBot并指定Adapter\n\n```python\n# -*- coding: utf-8 -*-\nfrom chatterbot import ChatBot\nbot = ChatBot(\n    'Default Response Example Bot',\n    #置信度低于0.65时回复default_response\n    logic_adapters=[\n        {\n            'import_path': 'chatterbot.logic.BestMatch'\n        },\n        {\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\n            'threshold': 0.65,\n            'default_response': 'I am sorry, but I do not understand.'\n        }\n    ],\n    #指定对话类型是列表\n    trainer='chatterbot.trainers.ListTrainer'\n)\n\n```\n\n##### 2. 接着手动给定一点语料用于训练\n\n```python\nbot.train([\n    'How can I help you?',\n    'I want to create a chat bot',\n    'Have you read the documentation?',\n    'No, I have not',\n    'This should help get you started: http://chatterbot.rtfd.org/en/latest/quickstart.html'\n])\n```\n\n##### 3. 给定问题并取回结果\n\n```python\nquestion = 'How do I make an omelette?'\nprint(question)\nresponse = bot.get_response(question)\nprint(response)\n\nprint(\"\\n\")\nquestion = 'how to make a chat bot?'\nprint(question)\nresponse = bot.get_response(question)\nprint(response)\n```\n\n各自输出：\n\n```\nHow do I make an omelette?\nI am sorry, but I do not understand.\n\n\nhow to make a chat bot?\nHave you read the documentation?\n```\n\n##### 4. 使用chatterbot自带的中文语料库训练\n\n```python\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nfrom chatterbot import ChatBot\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\n\nchatbot = ChatBot(\"ChineseChatBot\")\nchatbot.set_trainer(ChatterBotCorpusTrainer)\n\n# 使用中文语料库训练它\nchatbot.train(\"chatterbot.corpus.chinese\")\n\n# 开始对话\nwhile True:\n    print(chatbot.get_response(input(\">\")))\n```\n\n试了一下，问答比较二。。。\n\n- - -\n1. seq2seq\n2. LSTM\n\n\n- - -\nTHE END.\n","slug":"2018-02-24_chatbot","published":1,"updated":"2018-03-14T06:12:40.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsba3001ruro5brwe19ro","content":"<h4 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h4><p>机器人应答逻辑（Logic Adapter），针对每个部分设计了不同的适配器</p>\n<ol>\n<li>Closet Match Adapter:字符串模糊匹配（编辑距离）</li>\n<li>Closet Meaning Adapter:借助nltk的WordNet，近义词评估</li>\n<li>Time Logic Adapter:处理涉及实践的提问</li>\n<li>Mathematical Evaluation Adapter:涉及数学运算</li>\n</ol>\n<p>存储器后段（Storage Adapter）</p>\n<ol>\n<li>Read Only Mode:只读模式</li>\n<li>Json Database Mode:Json格式存储对话数据</li>\n<li>Mongo Database Mode:以MongoDb方式存储对话数据库</li>\n</ol>\n<p>输入形式（Input Adapter）</p>\n<ol>\n<li>Variable input type Adapter:允许chatbot接收不同类型的输入</li>\n<li>Terminal Adapter:以终端方式进行对话</li>\n<li>HipChat Adapter:通过HipChat聊天室和chatbo进行对话</li>\n<li>Speech recognition:语音识别输入</li>\n</ol>\n<p>输出形式（Output Adapters）</p>\n<ol>\n<li>Output format adapter:支持text，json和object格式的输出</li>\n<li>Terminal adapter</li>\n<li>HipChat Adapter</li>\n<li>Mailgun adapter:允许chat bot基于Mailgun API进行邮件的发送   Speech synthesis</li>\n<li>TTS(Text to speech)部分，详见chatterbot-voice</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"使用ChatterBot构建聊天机器人\"><a href=\"#使用ChatterBot构建聊天机器人\" class=\"headerlink\" title=\"使用ChatterBot构建聊天机器人\"></a>使用ChatterBot构建聊天机器人</h4><h5 id=\"1-首先构建ChatBot并指定Adapter\"><a href=\"#1-首先构建ChatBot并指定Adapter\" class=\"headerlink\" title=\"1. 首先构建ChatBot并指定Adapter\"></a>1. 首先构建ChatBot并指定Adapter</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> chatterbot <span class=\"keyword\">import</span> ChatBot</div><div class=\"line\">bot = ChatBot(</div><div class=\"line\">    <span class=\"string\">'Default Response Example Bot'</span>,</div><div class=\"line\">    <span class=\"comment\">#置信度低于0.65时回复default_response</span></div><div class=\"line\">    logic_adapters=[</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">'import_path'</span>: <span class=\"string\">'chatterbot.logic.BestMatch'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">'import_path'</span>: <span class=\"string\">'chatterbot.logic.LowConfidenceAdapter'</span>,</div><div class=\"line\">            <span class=\"string\">'threshold'</span>: <span class=\"number\">0.65</span>,</div><div class=\"line\">            <span class=\"string\">'default_response'</span>: <span class=\"string\">'I am sorry, but I do not understand.'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">#指定对话类型是列表</span></div><div class=\"line\">    trainer=<span class=\"string\">'chatterbot.trainers.ListTrainer'</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h5 id=\"2-接着手动给定一点语料用于训练\"><a href=\"#2-接着手动给定一点语料用于训练\" class=\"headerlink\" title=\"2. 接着手动给定一点语料用于训练\"></a>2. 接着手动给定一点语料用于训练</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bot.train([</div><div class=\"line\">    <span class=\"string\">'How can I help you?'</span>,</div><div class=\"line\">    <span class=\"string\">'I want to create a chat bot'</span>,</div><div class=\"line\">    <span class=\"string\">'Have you read the documentation?'</span>,</div><div class=\"line\">    <span class=\"string\">'No, I have not'</span>,</div><div class=\"line\">    <span class=\"string\">'This should help get you started: http://chatterbot.rtfd.org/en/latest/quickstart.html'</span></div><div class=\"line\">])</div></pre></td></tr></table></figure>\n<h5 id=\"3-给定问题并取回结果\"><a href=\"#3-给定问题并取回结果\" class=\"headerlink\" title=\"3. 给定问题并取回结果\"></a>3. 给定问题并取回结果</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">question = <span class=\"string\">'How do I make an omelette?'</span></div><div class=\"line\">print(question)</div><div class=\"line\">response = bot.get_response(question)</div><div class=\"line\">print(response)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">\"\\n\"</span>)</div><div class=\"line\">question = <span class=\"string\">'how to make a chat bot?'</span></div><div class=\"line\">print(question)</div><div class=\"line\">response = bot.get_response(question)</div><div class=\"line\">print(response)</div></pre></td></tr></table></figure>\n<p>各自输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">How do I make an omelette?</div><div class=\"line\">I am sorry, but I do not understand.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">how to make a chat bot?</div><div class=\"line\">Have you read the documentation?</div></pre></td></tr></table></figure>\n<h5 id=\"4-使用chatterbot自带的中文语料库训练\"><a href=\"#4-使用chatterbot自带的中文语料库训练\" class=\"headerlink\" title=\"4. 使用chatterbot自带的中文语料库训练\"></a>4. 使用chatterbot自带的中文语料库训练</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> chatterbot <span class=\"keyword\">import</span> ChatBot</div><div class=\"line\"><span class=\"keyword\">from</span> chatterbot.trainers <span class=\"keyword\">import</span> ChatterBotCorpusTrainer</div><div class=\"line\"></div><div class=\"line\">chatbot = ChatBot(<span class=\"string\">\"ChineseChatBot\"</span>)</div><div class=\"line\">chatbot.set_trainer(ChatterBotCorpusTrainer)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用中文语料库训练它</span></div><div class=\"line\">chatbot.train(<span class=\"string\">\"chatterbot.corpus.chinese\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 开始对话</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    print(chatbot.get_response(input(<span class=\"string\">\"&gt;\"</span>)))</div></pre></td></tr></table></figure>\n<p>试了一下，问答比较二。。。</p>\n<hr>\n<ol>\n<li>seq2seq</li>\n<li>LSTM</li>\n</ol>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h4><p>机器人应答逻辑（Logic Adapter），针对每个部分设计了不同的适配器</p>\n<ol>\n<li>Closet Match Adapter:字符串模糊匹配（编辑距离）</li>\n<li>Closet Meaning Adapter:借助nltk的WordNet，近义词评估</li>\n<li>Time Logic Adapter:处理涉及实践的提问</li>\n<li>Mathematical Evaluation Adapter:涉及数学运算</li>\n</ol>\n<p>存储器后段（Storage Adapter）</p>\n<ol>\n<li>Read Only Mode:只读模式</li>\n<li>Json Database Mode:Json格式存储对话数据</li>\n<li>Mongo Database Mode:以MongoDb方式存储对话数据库</li>\n</ol>\n<p>输入形式（Input Adapter）</p>\n<ol>\n<li>Variable input type Adapter:允许chatbot接收不同类型的输入</li>\n<li>Terminal Adapter:以终端方式进行对话</li>\n<li>HipChat Adapter:通过HipChat聊天室和chatbo进行对话</li>\n<li>Speech recognition:语音识别输入</li>\n</ol>\n<p>输出形式（Output Adapters）</p>\n<ol>\n<li>Output format adapter:支持text，json和object格式的输出</li>\n<li>Terminal adapter</li>\n<li>HipChat Adapter</li>\n<li>Mailgun adapter:允许chat bot基于Mailgun API进行邮件的发送   Speech synthesis</li>\n<li>TTS(Text to speech)部分，详见chatterbot-voice</li>\n</ol>","more":"<h4 id=\"使用ChatterBot构建聊天机器人\"><a href=\"#使用ChatterBot构建聊天机器人\" class=\"headerlink\" title=\"使用ChatterBot构建聊天机器人\"></a>使用ChatterBot构建聊天机器人</h4><h5 id=\"1-首先构建ChatBot并指定Adapter\"><a href=\"#1-首先构建ChatBot并指定Adapter\" class=\"headerlink\" title=\"1. 首先构建ChatBot并指定Adapter\"></a>1. 首先构建ChatBot并指定Adapter</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> chatterbot <span class=\"keyword\">import</span> ChatBot</div><div class=\"line\">bot = ChatBot(</div><div class=\"line\">    <span class=\"string\">'Default Response Example Bot'</span>,</div><div class=\"line\">    <span class=\"comment\">#置信度低于0.65时回复default_response</span></div><div class=\"line\">    logic_adapters=[</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">'import_path'</span>: <span class=\"string\">'chatterbot.logic.BestMatch'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">'import_path'</span>: <span class=\"string\">'chatterbot.logic.LowConfidenceAdapter'</span>,</div><div class=\"line\">            <span class=\"string\">'threshold'</span>: <span class=\"number\">0.65</span>,</div><div class=\"line\">            <span class=\"string\">'default_response'</span>: <span class=\"string\">'I am sorry, but I do not understand.'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">#指定对话类型是列表</span></div><div class=\"line\">    trainer=<span class=\"string\">'chatterbot.trainers.ListTrainer'</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h5 id=\"2-接着手动给定一点语料用于训练\"><a href=\"#2-接着手动给定一点语料用于训练\" class=\"headerlink\" title=\"2. 接着手动给定一点语料用于训练\"></a>2. 接着手动给定一点语料用于训练</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bot.train([</div><div class=\"line\">    <span class=\"string\">'How can I help you?'</span>,</div><div class=\"line\">    <span class=\"string\">'I want to create a chat bot'</span>,</div><div class=\"line\">    <span class=\"string\">'Have you read the documentation?'</span>,</div><div class=\"line\">    <span class=\"string\">'No, I have not'</span>,</div><div class=\"line\">    <span class=\"string\">'This should help get you started: http://chatterbot.rtfd.org/en/latest/quickstart.html'</span></div><div class=\"line\">])</div></pre></td></tr></table></figure>\n<h5 id=\"3-给定问题并取回结果\"><a href=\"#3-给定问题并取回结果\" class=\"headerlink\" title=\"3. 给定问题并取回结果\"></a>3. 给定问题并取回结果</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">question = <span class=\"string\">'How do I make an omelette?'</span></div><div class=\"line\">print(question)</div><div class=\"line\">response = bot.get_response(question)</div><div class=\"line\">print(response)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">\"\\n\"</span>)</div><div class=\"line\">question = <span class=\"string\">'how to make a chat bot?'</span></div><div class=\"line\">print(question)</div><div class=\"line\">response = bot.get_response(question)</div><div class=\"line\">print(response)</div></pre></td></tr></table></figure>\n<p>各自输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">How do I make an omelette?</div><div class=\"line\">I am sorry, but I do not understand.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">how to make a chat bot?</div><div class=\"line\">Have you read the documentation?</div></pre></td></tr></table></figure>\n<h5 id=\"4-使用chatterbot自带的中文语料库训练\"><a href=\"#4-使用chatterbot自带的中文语料库训练\" class=\"headerlink\" title=\"4. 使用chatterbot自带的中文语料库训练\"></a>4. 使用chatterbot自带的中文语料库训练</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> chatterbot <span class=\"keyword\">import</span> ChatBot</div><div class=\"line\"><span class=\"keyword\">from</span> chatterbot.trainers <span class=\"keyword\">import</span> ChatterBotCorpusTrainer</div><div class=\"line\"></div><div class=\"line\">chatbot = ChatBot(<span class=\"string\">\"ChineseChatBot\"</span>)</div><div class=\"line\">chatbot.set_trainer(ChatterBotCorpusTrainer)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用中文语料库训练它</span></div><div class=\"line\">chatbot.train(<span class=\"string\">\"chatterbot.corpus.chinese\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 开始对话</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    print(chatbot.get_response(input(<span class=\"string\">\"&gt;\"</span>)))</div></pre></td></tr></table></figure>\n<p>试了一下，问答比较二。。。</p>\n<hr>\n<ol>\n<li>seq2seq</li>\n<li>LSTM</li>\n</ol>\n<hr>\n<p>THE END.</p>"},{"title":"NLP基础","date":"2018-02-23T16:00:00.000Z","_content":"\n### NLTK\n\nNLTK在NLP上的应用\n\n- 情感分析\n- 文本相似度\n- 文本分类\n\n<!--more-->\n\n#### 一、安装NLTK\n\n```python\nsudo pip install nltk\npython3\n>>> import nltk\n>>> nltk.download()\n```\n\n其中 `nltk.download()` 用来下载nltk自带的一些语料库\n\n测试布朗大学的语料库：\n\n```\n>>> from nltk.corpus import brown\n>>> brown.categories()\n['adventure', 'belles_lettres', 'editorial', 'fiction', 'government', 'hobbies', 'humor', 'learned', 'lore', 'mystery', 'news', 'religion', 'reviews', 'romance', 'science_fiction']\n>>> len(brown.sents())\n57340 #句子长度\n>>> len(brown.words())\n1161192 #单词个数\n```\n\n#### 二、文本处理流程\n\n##### 1. 文本预处理\n\n（1）Tokenize:把长句子拆分成“有意义”的小部分\n\n```\n>>> import nltk\n>>> sentence = “hello, world\"\n>>> tokens = nltk.word_tokenize(sentence)\n>>> tokens\n['hello', ‘,', 'world']\n```\n\n（2）词形归一化，包括Stemming和Lemmatization\n\nStemming 词干提取:一般来说，就是把不影响词性的inflection的小尾巴砍掉\n\n可以使用nltk中的 `PorterStemmer/LancasterStemmer/SnowballStemmer/PorterStemmer`\n\nLemmatization 词形归一:把各种类型的词的变形，都归为一个形式\n\n可以使用nltk中的 `WordNetLemmatizer`\n\nPart-Of-Speech:NLTK更好地实现Lemma\n\n（3）去除停止词\n\n```python\nfrom nltk.corpus import stopwords\n# 先token得到word_list,再去除停止词\nfiltered_words =\n[word for word in word_list if word not in stopwords.words('english')]\n```\n\n（4）最终得到一个干净的word list\n\n分词的方式：\n启发式Heuristic（查数据库）\n机器学习／统计方法：HMM、CRF\n\n#### 三、应用：情感分析\n\n最简单的方法是给每个词打分，然后判断句子总的分数。\n\n配上ML的情感分析：\n\n```python\n# 把训练集给做成标准形式\n\rtraining_data = [[preprocess(s1), 'pos'],\r[preprocess(s2), 'pos'],\r[preprocess(s3), 'neg'],\r[preprocess(s4), 'neg']]\n# 构建model\nmodel = NaiveBayesClassifier.train(training_data)\n\r# 测试结果\n\rprint(model.classify(preprocess('this is a good book')))\n```\n\n#### 四：应用:文本相似度\n\n用元素频率表示文本特征\n\n原理就是使用余弦定理来计算文本相似度:\n\n$similarity = cos( \\theta ) = \\dfrac{A \\cdot B}{||A|| \\: ||B||}$\n\n使用NLTK中的FreqDist包来进行频率统计\n\n```\n>>> from nltk.corpus import stopwords\n>>> from nltk import FreqDist\n>>> corpus = 'this is my sentence this is my life this is the day'\n>>> tokens = nltk.word_tokenize(corpus)\n>>> fdist = FreqDist(tokens)\n>>> standard_freq_vector = fdist.most_common(50)\n>>> print(standard_freq_vector)\n[('this', 3), ('is', 3), ('my', 2), ('sentence', 1), ('life', 1), ('the', 1), ('day', 1)]\n```\n\n这一步得到了一个类似词典的东西，里面保存了我们给出的句子里面每个单词出现的频率，并且取出来出现频率最高的50个单词。\n\n然后按照出现频率 ,记录下每个单词的位置：\n\n```python\ndef position_lookup(v):\n    res = {}\n    counter = 0\n    for word in v:\n        res[word[0]] = counter\n        counter += 1\n    return res\n# 把标准的单词位置记录下来\nstandard_position_dict = position_lookup(standard_freq_vector) print(standard_position_dict)\n# 得到 个位置对照表\n# {'is': 0, 'the': 3, 'day': 4, 'this': 1,'sentence': 5, 'my': 2, 'life': 6}\n```\n\n这时如果我们有个新句子，对于这个新句子的每个单词如果在我们的词库出现过那么就在\"标准位置\"上+1\n\n```python\nsentence = 'this is cool'\n# 先新建个跟我们的标准vector同样的向量 freq_vector = [0] * size\n# 简单的Preprocessing\ntokens = nltk.word_tokenize(sentence)\nfor word in tokens:\n    try:\n        freq_vector[standard_position_dict[word]] += 1\n    except KeyError: # 如果是个新词就pass掉\n        continue\nprint(freq_vector)\n# [1, 1, 0, 0, 0, 0, 0]\n```\n\n- - -\n1. [结巴分词](http://www.oss.io/p/fxsjy/jieba)\n2. [Word2Vec](https://code.google.com/archive/p/word2vec/)\n\n- - -\nTHE END.\n","source":"_posts/2018-02-25_nltk.md","raw":"---\ntitle: NLP基础\ndate: 2018-02-24\ncategories: 机器学习\ntags: [NLTK]\n---\n\n### NLTK\n\nNLTK在NLP上的应用\n\n- 情感分析\n- 文本相似度\n- 文本分类\n\n<!--more-->\n\n#### 一、安装NLTK\n\n```python\nsudo pip install nltk\npython3\n>>> import nltk\n>>> nltk.download()\n```\n\n其中 `nltk.download()` 用来下载nltk自带的一些语料库\n\n测试布朗大学的语料库：\n\n```\n>>> from nltk.corpus import brown\n>>> brown.categories()\n['adventure', 'belles_lettres', 'editorial', 'fiction', 'government', 'hobbies', 'humor', 'learned', 'lore', 'mystery', 'news', 'religion', 'reviews', 'romance', 'science_fiction']\n>>> len(brown.sents())\n57340 #句子长度\n>>> len(brown.words())\n1161192 #单词个数\n```\n\n#### 二、文本处理流程\n\n##### 1. 文本预处理\n\n（1）Tokenize:把长句子拆分成“有意义”的小部分\n\n```\n>>> import nltk\n>>> sentence = “hello, world\"\n>>> tokens = nltk.word_tokenize(sentence)\n>>> tokens\n['hello', ‘,', 'world']\n```\n\n（2）词形归一化，包括Stemming和Lemmatization\n\nStemming 词干提取:一般来说，就是把不影响词性的inflection的小尾巴砍掉\n\n可以使用nltk中的 `PorterStemmer/LancasterStemmer/SnowballStemmer/PorterStemmer`\n\nLemmatization 词形归一:把各种类型的词的变形，都归为一个形式\n\n可以使用nltk中的 `WordNetLemmatizer`\n\nPart-Of-Speech:NLTK更好地实现Lemma\n\n（3）去除停止词\n\n```python\nfrom nltk.corpus import stopwords\n# 先token得到word_list,再去除停止词\nfiltered_words =\n[word for word in word_list if word not in stopwords.words('english')]\n```\n\n（4）最终得到一个干净的word list\n\n分词的方式：\n启发式Heuristic（查数据库）\n机器学习／统计方法：HMM、CRF\n\n#### 三、应用：情感分析\n\n最简单的方法是给每个词打分，然后判断句子总的分数。\n\n配上ML的情感分析：\n\n```python\n# 把训练集给做成标准形式\n\rtraining_data = [[preprocess(s1), 'pos'],\r[preprocess(s2), 'pos'],\r[preprocess(s3), 'neg'],\r[preprocess(s4), 'neg']]\n# 构建model\nmodel = NaiveBayesClassifier.train(training_data)\n\r# 测试结果\n\rprint(model.classify(preprocess('this is a good book')))\n```\n\n#### 四：应用:文本相似度\n\n用元素频率表示文本特征\n\n原理就是使用余弦定理来计算文本相似度:\n\n$similarity = cos( \\theta ) = \\dfrac{A \\cdot B}{||A|| \\: ||B||}$\n\n使用NLTK中的FreqDist包来进行频率统计\n\n```\n>>> from nltk.corpus import stopwords\n>>> from nltk import FreqDist\n>>> corpus = 'this is my sentence this is my life this is the day'\n>>> tokens = nltk.word_tokenize(corpus)\n>>> fdist = FreqDist(tokens)\n>>> standard_freq_vector = fdist.most_common(50)\n>>> print(standard_freq_vector)\n[('this', 3), ('is', 3), ('my', 2), ('sentence', 1), ('life', 1), ('the', 1), ('day', 1)]\n```\n\n这一步得到了一个类似词典的东西，里面保存了我们给出的句子里面每个单词出现的频率，并且取出来出现频率最高的50个单词。\n\n然后按照出现频率 ,记录下每个单词的位置：\n\n```python\ndef position_lookup(v):\n    res = {}\n    counter = 0\n    for word in v:\n        res[word[0]] = counter\n        counter += 1\n    return res\n# 把标准的单词位置记录下来\nstandard_position_dict = position_lookup(standard_freq_vector) print(standard_position_dict)\n# 得到 个位置对照表\n# {'is': 0, 'the': 3, 'day': 4, 'this': 1,'sentence': 5, 'my': 2, 'life': 6}\n```\n\n这时如果我们有个新句子，对于这个新句子的每个单词如果在我们的词库出现过那么就在\"标准位置\"上+1\n\n```python\nsentence = 'this is cool'\n# 先新建个跟我们的标准vector同样的向量 freq_vector = [0] * size\n# 简单的Preprocessing\ntokens = nltk.word_tokenize(sentence)\nfor word in tokens:\n    try:\n        freq_vector[standard_position_dict[word]] += 1\n    except KeyError: # 如果是个新词就pass掉\n        continue\nprint(freq_vector)\n# [1, 1, 0, 0, 0, 0, 0]\n```\n\n- - -\n1. [结巴分词](http://www.oss.io/p/fxsjy/jieba)\n2. [Word2Vec](https://code.google.com/archive/p/word2vec/)\n\n- - -\nTHE END.\n","slug":"2018-02-25_nltk","published":1,"updated":"2018-03-14T06:12:40.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsba4001turo5v3ma9w4l","content":"<h3 id=\"NLTK\"><a href=\"#NLTK\" class=\"headerlink\" title=\"NLTK\"></a>NLTK</h3><p>NLTK在NLP上的应用</p>\n<ul>\n<li>情感分析</li>\n<li>文本相似度</li>\n<li>文本分类</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"一、安装NLTK\"><a href=\"#一、安装NLTK\" class=\"headerlink\" title=\"一、安装NLTK\"></a>一、安装NLTK</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install nltk</div><div class=\"line\">python3</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> nltk</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nltk.download()</div></pre></td></tr></table></figure>\n<p>其中 <code>nltk.download()</code> 用来下载nltk自带的一些语料库</p>\n<p>测试布朗大学的语料库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; from nltk.corpus import brown</div><div class=\"line\">&gt;&gt;&gt; brown.categories()</div><div class=\"line\">[&apos;adventure&apos;, &apos;belles_lettres&apos;, &apos;editorial&apos;, &apos;fiction&apos;, &apos;government&apos;, &apos;hobbies&apos;, &apos;humor&apos;, &apos;learned&apos;, &apos;lore&apos;, &apos;mystery&apos;, &apos;news&apos;, &apos;religion&apos;, &apos;reviews&apos;, &apos;romance&apos;, &apos;science_fiction&apos;]</div><div class=\"line\">&gt;&gt;&gt; len(brown.sents())</div><div class=\"line\">57340 #句子长度</div><div class=\"line\">&gt;&gt;&gt; len(brown.words())</div><div class=\"line\">1161192 #单词个数</div></pre></td></tr></table></figure>\n<h4 id=\"二、文本处理流程\"><a href=\"#二、文本处理流程\" class=\"headerlink\" title=\"二、文本处理流程\"></a>二、文本处理流程</h4><h5 id=\"1-文本预处理\"><a href=\"#1-文本预处理\" class=\"headerlink\" title=\"1. 文本预处理\"></a>1. 文本预处理</h5><p>（1）Tokenize:把长句子拆分成“有意义”的小部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; import nltk</div><div class=\"line\">&gt;&gt;&gt; sentence = “hello, world&quot;</div><div class=\"line\">&gt;&gt;&gt; tokens = nltk.word_tokenize(sentence)</div><div class=\"line\">&gt;&gt;&gt; tokens</div><div class=\"line\">[&apos;hello&apos;, ‘,&apos;, &apos;world&apos;]</div></pre></td></tr></table></figure>\n<p>（2）词形归一化，包括Stemming和Lemmatization</p>\n<p>Stemming 词干提取:一般来说，就是把不影响词性的inflection的小尾巴砍掉</p>\n<p>可以使用nltk中的 <code>PorterStemmer/LancasterStemmer/SnowballStemmer/PorterStemmer</code></p>\n<p>Lemmatization 词形归一:把各种类型的词的变形，都归为一个形式</p>\n<p>可以使用nltk中的 <code>WordNetLemmatizer</code></p>\n<p>Part-Of-Speech:NLTK更好地实现Lemma</p>\n<p>（3）去除停止词</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> nltk.corpus <span class=\"keyword\">import</span> stopwords</div><div class=\"line\"><span class=\"comment\"># 先token得到word_list,再去除停止词</span></div><div class=\"line\">filtered_words =</div><div class=\"line\">[word <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> word_list <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> stopwords.words(<span class=\"string\">'english'</span>)]</div></pre></td></tr></table></figure>\n<p>（4）最终得到一个干净的word list</p>\n<p>分词的方式：<br>启发式Heuristic（查数据库）<br>机器学习／统计方法：HMM、CRF</p>\n<h4 id=\"三、应用：情感分析\"><a href=\"#三、应用：情感分析\" class=\"headerlink\" title=\"三、应用：情感分析\"></a>三、应用：情感分析</h4><p>最简单的方法是给每个词打分，然后判断句子总的分数。</p>\n<p>配上ML的情感分析：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 把训练集给做成标准形式</span></div><div class=\"line\">\rtraining_data = [[preprocess(s1), <span class=\"string\">'pos'</span>],\r[preprocess(s2), <span class=\"string\">'pos'</span>],\r[preprocess(s3), <span class=\"string\">'neg'</span>],\r[preprocess(s4), <span class=\"string\">'neg'</span>]]</div><div class=\"line\"><span class=\"comment\"># 构建model</span></div><div class=\"line\">model = NaiveBayesClassifier.train(training_data)</div><div class=\"line\">\r<span class=\"comment\"># 测试结果</span></div><div class=\"line\">\rprint(model.classify(preprocess(<span class=\"string\">'this is a good book'</span>)))</div></pre></td></tr></table></figure>\n<h4 id=\"四：应用-文本相似度\"><a href=\"#四：应用-文本相似度\" class=\"headerlink\" title=\"四：应用:文本相似度\"></a>四：应用:文本相似度</h4><p>用元素频率表示文本特征</p>\n<p>原理就是使用余弦定理来计算文本相似度:</p>\n<p>$similarity = cos( \\theta ) = \\dfrac{A \\cdot B}{||A|| \\: ||B||}$</p>\n<p>使用NLTK中的FreqDist包来进行频率统计</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; from nltk.corpus import stopwords</div><div class=\"line\">&gt;&gt;&gt; from nltk import FreqDist</div><div class=\"line\">&gt;&gt;&gt; corpus = &apos;this is my sentence this is my life this is the day&apos;</div><div class=\"line\">&gt;&gt;&gt; tokens = nltk.word_tokenize(corpus)</div><div class=\"line\">&gt;&gt;&gt; fdist = FreqDist(tokens)</div><div class=\"line\">&gt;&gt;&gt; standard_freq_vector = fdist.most_common(50)</div><div class=\"line\">&gt;&gt;&gt; print(standard_freq_vector)</div><div class=\"line\">[(&apos;this&apos;, 3), (&apos;is&apos;, 3), (&apos;my&apos;, 2), (&apos;sentence&apos;, 1), (&apos;life&apos;, 1), (&apos;the&apos;, 1), (&apos;day&apos;, 1)]</div></pre></td></tr></table></figure>\n<p>这一步得到了一个类似词典的东西，里面保存了我们给出的句子里面每个单词出现的频率，并且取出来出现频率最高的50个单词。</p>\n<p>然后按照出现频率 ,记录下每个单词的位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">position_lookup</span><span class=\"params\">(v)</span>:</span></div><div class=\"line\">    res = &#123;&#125;</div><div class=\"line\">    counter = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> v:</div><div class=\"line\">        res[word[<span class=\"number\">0</span>]] = counter</div><div class=\"line\">        counter += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> res</div><div class=\"line\"><span class=\"comment\"># 把标准的单词位置记录下来</span></div><div class=\"line\">standard_position_dict = position_lookup(standard_freq_vector) print(standard_position_dict)</div><div class=\"line\"><span class=\"comment\"># 得到 个位置对照表</span></div><div class=\"line\"><span class=\"comment\"># &#123;'is': 0, 'the': 3, 'day': 4, 'this': 1,'sentence': 5, 'my': 2, 'life': 6&#125;</span></div></pre></td></tr></table></figure>\n<p>这时如果我们有个新句子，对于这个新句子的每个单词如果在我们的词库出现过那么就在”标准位置”上+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">sentence = <span class=\"string\">'this is cool'</span></div><div class=\"line\"><span class=\"comment\"># 先新建个跟我们的标准vector同样的向量 freq_vector = [0] * size</span></div><div class=\"line\"><span class=\"comment\"># 简单的Preprocessing</span></div><div class=\"line\">tokens = nltk.word_tokenize(sentence)</div><div class=\"line\"><span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> tokens:</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        freq_vector[standard_position_dict[word]] += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> KeyError: <span class=\"comment\"># 如果是个新词就pass掉</span></div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\">print(freq_vector)</div><div class=\"line\"><span class=\"comment\"># [1, 1, 0, 0, 0, 0, 0]</span></div></pre></td></tr></table></figure>\n<hr>\n<ol>\n<li><a href=\"http://www.oss.io/p/fxsjy/jieba\" target=\"_blank\" rel=\"external\">结巴分词</a></li>\n<li><a href=\"https://code.google.com/archive/p/word2vec/\" target=\"_blank\" rel=\"external\">Word2Vec</a></li>\n</ol>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"NLTK\"><a href=\"#NLTK\" class=\"headerlink\" title=\"NLTK\"></a>NLTK</h3><p>NLTK在NLP上的应用</p>\n<ul>\n<li>情感分析</li>\n<li>文本相似度</li>\n<li>文本分类</li>\n</ul>","more":"<h4 id=\"一、安装NLTK\"><a href=\"#一、安装NLTK\" class=\"headerlink\" title=\"一、安装NLTK\"></a>一、安装NLTK</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install nltk</div><div class=\"line\">python3</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> nltk</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nltk.download()</div></pre></td></tr></table></figure>\n<p>其中 <code>nltk.download()</code> 用来下载nltk自带的一些语料库</p>\n<p>测试布朗大学的语料库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; from nltk.corpus import brown</div><div class=\"line\">&gt;&gt;&gt; brown.categories()</div><div class=\"line\">[&apos;adventure&apos;, &apos;belles_lettres&apos;, &apos;editorial&apos;, &apos;fiction&apos;, &apos;government&apos;, &apos;hobbies&apos;, &apos;humor&apos;, &apos;learned&apos;, &apos;lore&apos;, &apos;mystery&apos;, &apos;news&apos;, &apos;religion&apos;, &apos;reviews&apos;, &apos;romance&apos;, &apos;science_fiction&apos;]</div><div class=\"line\">&gt;&gt;&gt; len(brown.sents())</div><div class=\"line\">57340 #句子长度</div><div class=\"line\">&gt;&gt;&gt; len(brown.words())</div><div class=\"line\">1161192 #单词个数</div></pre></td></tr></table></figure>\n<h4 id=\"二、文本处理流程\"><a href=\"#二、文本处理流程\" class=\"headerlink\" title=\"二、文本处理流程\"></a>二、文本处理流程</h4><h5 id=\"1-文本预处理\"><a href=\"#1-文本预处理\" class=\"headerlink\" title=\"1. 文本预处理\"></a>1. 文本预处理</h5><p>（1）Tokenize:把长句子拆分成“有意义”的小部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; import nltk</div><div class=\"line\">&gt;&gt;&gt; sentence = “hello, world&quot;</div><div class=\"line\">&gt;&gt;&gt; tokens = nltk.word_tokenize(sentence)</div><div class=\"line\">&gt;&gt;&gt; tokens</div><div class=\"line\">[&apos;hello&apos;, ‘,&apos;, &apos;world&apos;]</div></pre></td></tr></table></figure>\n<p>（2）词形归一化，包括Stemming和Lemmatization</p>\n<p>Stemming 词干提取:一般来说，就是把不影响词性的inflection的小尾巴砍掉</p>\n<p>可以使用nltk中的 <code>PorterStemmer/LancasterStemmer/SnowballStemmer/PorterStemmer</code></p>\n<p>Lemmatization 词形归一:把各种类型的词的变形，都归为一个形式</p>\n<p>可以使用nltk中的 <code>WordNetLemmatizer</code></p>\n<p>Part-Of-Speech:NLTK更好地实现Lemma</p>\n<p>（3）去除停止词</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> nltk.corpus <span class=\"keyword\">import</span> stopwords</div><div class=\"line\"><span class=\"comment\"># 先token得到word_list,再去除停止词</span></div><div class=\"line\">filtered_words =</div><div class=\"line\">[word <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> word_list <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> stopwords.words(<span class=\"string\">'english'</span>)]</div></pre></td></tr></table></figure>\n<p>（4）最终得到一个干净的word list</p>\n<p>分词的方式：<br>启发式Heuristic（查数据库）<br>机器学习／统计方法：HMM、CRF</p>\n<h4 id=\"三、应用：情感分析\"><a href=\"#三、应用：情感分析\" class=\"headerlink\" title=\"三、应用：情感分析\"></a>三、应用：情感分析</h4><p>最简单的方法是给每个词打分，然后判断句子总的分数。</p>\n<p>配上ML的情感分析：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 把训练集给做成标准形式</span></div><div class=\"line\">\rtraining_data = [[preprocess(s1), <span class=\"string\">'pos'</span>],\r[preprocess(s2), <span class=\"string\">'pos'</span>],\r[preprocess(s3), <span class=\"string\">'neg'</span>],\r[preprocess(s4), <span class=\"string\">'neg'</span>]]</div><div class=\"line\"><span class=\"comment\"># 构建model</span></div><div class=\"line\">model = NaiveBayesClassifier.train(training_data)</div><div class=\"line\">\r<span class=\"comment\"># 测试结果</span></div><div class=\"line\">\rprint(model.classify(preprocess(<span class=\"string\">'this is a good book'</span>)))</div></pre></td></tr></table></figure>\n<h4 id=\"四：应用-文本相似度\"><a href=\"#四：应用-文本相似度\" class=\"headerlink\" title=\"四：应用:文本相似度\"></a>四：应用:文本相似度</h4><p>用元素频率表示文本特征</p>\n<p>原理就是使用余弦定理来计算文本相似度:</p>\n<p>$similarity = cos( \\theta ) = \\dfrac{A \\cdot B}{||A|| \\: ||B||}$</p>\n<p>使用NLTK中的FreqDist包来进行频率统计</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; from nltk.corpus import stopwords</div><div class=\"line\">&gt;&gt;&gt; from nltk import FreqDist</div><div class=\"line\">&gt;&gt;&gt; corpus = &apos;this is my sentence this is my life this is the day&apos;</div><div class=\"line\">&gt;&gt;&gt; tokens = nltk.word_tokenize(corpus)</div><div class=\"line\">&gt;&gt;&gt; fdist = FreqDist(tokens)</div><div class=\"line\">&gt;&gt;&gt; standard_freq_vector = fdist.most_common(50)</div><div class=\"line\">&gt;&gt;&gt; print(standard_freq_vector)</div><div class=\"line\">[(&apos;this&apos;, 3), (&apos;is&apos;, 3), (&apos;my&apos;, 2), (&apos;sentence&apos;, 1), (&apos;life&apos;, 1), (&apos;the&apos;, 1), (&apos;day&apos;, 1)]</div></pre></td></tr></table></figure>\n<p>这一步得到了一个类似词典的东西，里面保存了我们给出的句子里面每个单词出现的频率，并且取出来出现频率最高的50个单词。</p>\n<p>然后按照出现频率 ,记录下每个单词的位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">position_lookup</span><span class=\"params\">(v)</span>:</span></div><div class=\"line\">    res = &#123;&#125;</div><div class=\"line\">    counter = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> v:</div><div class=\"line\">        res[word[<span class=\"number\">0</span>]] = counter</div><div class=\"line\">        counter += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> res</div><div class=\"line\"><span class=\"comment\"># 把标准的单词位置记录下来</span></div><div class=\"line\">standard_position_dict = position_lookup(standard_freq_vector) print(standard_position_dict)</div><div class=\"line\"><span class=\"comment\"># 得到 个位置对照表</span></div><div class=\"line\"><span class=\"comment\"># &#123;'is': 0, 'the': 3, 'day': 4, 'this': 1,'sentence': 5, 'my': 2, 'life': 6&#125;</span></div></pre></td></tr></table></figure>\n<p>这时如果我们有个新句子，对于这个新句子的每个单词如果在我们的词库出现过那么就在”标准位置”上+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">sentence = <span class=\"string\">'this is cool'</span></div><div class=\"line\"><span class=\"comment\"># 先新建个跟我们的标准vector同样的向量 freq_vector = [0] * size</span></div><div class=\"line\"><span class=\"comment\"># 简单的Preprocessing</span></div><div class=\"line\">tokens = nltk.word_tokenize(sentence)</div><div class=\"line\"><span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> tokens:</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        freq_vector[standard_position_dict[word]] += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> KeyError: <span class=\"comment\"># 如果是个新词就pass掉</span></div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\">print(freq_vector)</div><div class=\"line\"><span class=\"comment\"># [1, 1, 0, 0, 0, 0, 0]</span></div></pre></td></tr></table></figure>\n<hr>\n<ol>\n<li><a href=\"http://www.oss.io/p/fxsjy/jieba\" target=\"_blank\" rel=\"external\">结巴分词</a></li>\n<li><a href=\"https://code.google.com/archive/p/word2vec/\" target=\"_blank\" rel=\"external\">Word2Vec</a></li>\n</ol>\n<hr>\n<p>THE END.</p>"},{"title":"平衡二叉树的旋转及其代码实现","date":"2018-03-14T06:12:40.672Z","_content":"\n平衡二叉树的构造问题以及为了维护它的平衡所要进行的LL旋转、RR旋转、LR旋转、RL旋转。\n\n<!--more-->\n\n#### 一、平衡二叉树的构造\n\n```c\nnode *insert(node *root, int x) {\n    if (root == 0) {\n        root = &all[total++];\n        root->left = root->right = 0;\n        root->val = x;\n        root->height = 0;\n    } else if (x < root->val) {\n        root->left = insert(root->left, x);\n        if (height(root->left) - height(root->right) == 2) {\n            root = (x < root->left->val) ? LL(root) : LR(root);\n        }\n    } else {\n        root->right = insert(root->right, x);\n        if (height(root->right) - height(root->left) == 2) {\n            root = (x > root->right->val) ? RR(root) : RL(root);\n        }\n    }\n    root->height = max(height(root->left), height(root->right)) + 1;\n    return root;\n}\n```\n\n#### 二、LL旋转\n\n所谓LL旋转并不是指旋转方向，而是指新插入导致不平衡的元素位于左子树的左儿子位置，也就是LeftLeft。\n\n看一下这种旋转的示意图：\n![ll_rotate](/src/imgs/1803/0313_ll.jpg)\n\n```c\nnode *LL(node *k2) {\n    node *k1 = k2->left;\n    k2->left = k1->right;\n    k1->right = k2;\n    k2->height = max(height(k2->left), height(k2->right)) + 1;\n    k1->height = max(height(k1->left), height(k1->right)) + 1;\n    return k1;\n}\n```\n\n#### 三、RR旋转\n\n同样LL旋转是指新插入导致不平衡的元素位于右子树的右儿子位置，也就是RightRight。\n\n看一下这种旋转的方式示意图：\n\n![rr_rotate](/src/imgs/1803/0313_rr.jpg)\n\n```c\nnode *RR(node *k1) {\n    node *k2 = k1->right;\n    k1->right = k2->left;\n    k2->left = k1;\n    k1->height = max(height(k1->left), height(k1->right)) + 1;\n    k2->height = max(height(k2->left), height(k2->right)) + 1;\n    return k2;\n}\n```\n\n#### 四、LR旋转和RL旋转\n\nLR和RL则分别表示位于左子树的右儿子和右子树的左儿子。\n\n1.对于LR旋转，首先将最近的不平衡结点k3的左子树进行RR旋转，再将k3本身进行LL旋转。\n\n```c\nnode *LR(node *k3) {\n    k3->left = RR(k3->left);\n    return LL(k3);\n}\n```\n\n2.对于RL旋转，首先将最近的不平衡结点k3的右子树进行LL旋转，再将k3本身进行RR旋转。\n\n```c\nnode *RL(node *k1) {\n    k1->right = LL(k1->right);\n    return RR(k1);\n}\n```\n\n- - -\nTHE END.\n","source":"_posts/2018-03-13_AVL.md","raw":"---\ntitle: 平衡二叉树的旋转及其代码实现\ndate: 2018-033-1\ncategories: Alogrithm\ntags: [二叉树]\n---\n\n平衡二叉树的构造问题以及为了维护它的平衡所要进行的LL旋转、RR旋转、LR旋转、RL旋转。\n\n<!--more-->\n\n#### 一、平衡二叉树的构造\n\n```c\nnode *insert(node *root, int x) {\n    if (root == 0) {\n        root = &all[total++];\n        root->left = root->right = 0;\n        root->val = x;\n        root->height = 0;\n    } else if (x < root->val) {\n        root->left = insert(root->left, x);\n        if (height(root->left) - height(root->right) == 2) {\n            root = (x < root->left->val) ? LL(root) : LR(root);\n        }\n    } else {\n        root->right = insert(root->right, x);\n        if (height(root->right) - height(root->left) == 2) {\n            root = (x > root->right->val) ? RR(root) : RL(root);\n        }\n    }\n    root->height = max(height(root->left), height(root->right)) + 1;\n    return root;\n}\n```\n\n#### 二、LL旋转\n\n所谓LL旋转并不是指旋转方向，而是指新插入导致不平衡的元素位于左子树的左儿子位置，也就是LeftLeft。\n\n看一下这种旋转的示意图：\n![ll_rotate](/src/imgs/1803/0313_ll.jpg)\n\n```c\nnode *LL(node *k2) {\n    node *k1 = k2->left;\n    k2->left = k1->right;\n    k1->right = k2;\n    k2->height = max(height(k2->left), height(k2->right)) + 1;\n    k1->height = max(height(k1->left), height(k1->right)) + 1;\n    return k1;\n}\n```\n\n#### 三、RR旋转\n\n同样LL旋转是指新插入导致不平衡的元素位于右子树的右儿子位置，也就是RightRight。\n\n看一下这种旋转的方式示意图：\n\n![rr_rotate](/src/imgs/1803/0313_rr.jpg)\n\n```c\nnode *RR(node *k1) {\n    node *k2 = k1->right;\n    k1->right = k2->left;\n    k2->left = k1;\n    k1->height = max(height(k1->left), height(k1->right)) + 1;\n    k2->height = max(height(k2->left), height(k2->right)) + 1;\n    return k2;\n}\n```\n\n#### 四、LR旋转和RL旋转\n\nLR和RL则分别表示位于左子树的右儿子和右子树的左儿子。\n\n1.对于LR旋转，首先将最近的不平衡结点k3的左子树进行RR旋转，再将k3本身进行LL旋转。\n\n```c\nnode *LR(node *k3) {\n    k3->left = RR(k3->left);\n    return LL(k3);\n}\n```\n\n2.对于RL旋转，首先将最近的不平衡结点k3的右子树进行LL旋转，再将k3本身进行RR旋转。\n\n```c\nnode *RL(node *k1) {\n    k1->right = LL(k1->right);\n    return RR(k1);\n}\n```\n\n- - -\nTHE END.\n","slug":"2018-03-13_AVL","published":1,"updated":"2018-03-14T06:12:40.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsba6001xuro5xuhih16x","content":"<p>平衡二叉树的构造问题以及为了维护它的平衡所要进行的LL旋转、RR旋转、LR旋转、RL旋转。</p>\n<a id=\"more\"></a>\n<h4 id=\"一、平衡二叉树的构造\"><a href=\"#一、平衡二叉树的构造\" class=\"headerlink\" title=\"一、平衡二叉树的构造\"></a>一、平衡二叉树的构造</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">insert</span><span class=\"params\">(node *root, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        root = &amp;all[total++];</div><div class=\"line\">        root-&gt;left = root-&gt;right = <span class=\"number\">0</span>;</div><div class=\"line\">        root-&gt;val = x;</div><div class=\"line\">        root-&gt;height = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &lt; root-&gt;val) &#123;</div><div class=\"line\">        root-&gt;left = insert(root-&gt;left, x);</div><div class=\"line\">        <span class=\"keyword\">if</span> (height(root-&gt;left) - height(root-&gt;right) == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            root = (x &lt; root-&gt;left-&gt;val) ? LL(root) : LR(root);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        root-&gt;right = insert(root-&gt;right, x);</div><div class=\"line\">        <span class=\"keyword\">if</span> (height(root-&gt;right) - height(root-&gt;left) == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            root = (x &gt; root-&gt;right-&gt;val) ? RR(root) : RL(root);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    root-&gt;height = max(height(root-&gt;left), height(root-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> root;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"二、LL旋转\"><a href=\"#二、LL旋转\" class=\"headerlink\" title=\"二、LL旋转\"></a>二、LL旋转</h4><p>所谓LL旋转并不是指旋转方向，而是指新插入导致不平衡的元素位于左子树的左儿子位置，也就是LeftLeft。</p>\n<p>看一下这种旋转的示意图：<br><img src=\"/src/imgs/1803/0313_ll.jpg\" alt=\"ll_rotate\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">LL</span><span class=\"params\">(node *k2)</span> </span>&#123;</div><div class=\"line\">    node *k1 = k2-&gt;left;</div><div class=\"line\">    k2-&gt;left = k1-&gt;right;</div><div class=\"line\">    k1-&gt;right = k2;</div><div class=\"line\">    k2-&gt;height = max(height(k2-&gt;left), height(k2-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    k1-&gt;height = max(height(k1-&gt;left), height(k1-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> k1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"三、RR旋转\"><a href=\"#三、RR旋转\" class=\"headerlink\" title=\"三、RR旋转\"></a>三、RR旋转</h4><p>同样LL旋转是指新插入导致不平衡的元素位于右子树的右儿子位置，也就是RightRight。</p>\n<p>看一下这种旋转的方式示意图：</p>\n<p><img src=\"/src/imgs/1803/0313_rr.jpg\" alt=\"rr_rotate\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">RR</span><span class=\"params\">(node *k1)</span> </span>&#123;</div><div class=\"line\">    node *k2 = k1-&gt;right;</div><div class=\"line\">    k1-&gt;right = k2-&gt;left;</div><div class=\"line\">    k2-&gt;left = k1;</div><div class=\"line\">    k1-&gt;height = max(height(k1-&gt;left), height(k1-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    k2-&gt;height = max(height(k2-&gt;left), height(k2-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> k2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"四、LR旋转和RL旋转\"><a href=\"#四、LR旋转和RL旋转\" class=\"headerlink\" title=\"四、LR旋转和RL旋转\"></a>四、LR旋转和RL旋转</h4><p>LR和RL则分别表示位于左子树的右儿子和右子树的左儿子。</p>\n<p>1.对于LR旋转，首先将最近的不平衡结点k3的左子树进行RR旋转，再将k3本身进行LL旋转。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">LR</span><span class=\"params\">(node *k3)</span> </span>&#123;</div><div class=\"line\">    k3-&gt;left = RR(k3-&gt;left);</div><div class=\"line\">    <span class=\"keyword\">return</span> LL(k3);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.对于RL旋转，首先将最近的不平衡结点k3的右子树进行LL旋转，再将k3本身进行RR旋转。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">RL</span><span class=\"params\">(node *k1)</span> </span>&#123;</div><div class=\"line\">    k1-&gt;right = LL(k1-&gt;right);</div><div class=\"line\">    <span class=\"keyword\">return</span> RR(k1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<p>平衡二叉树的构造问题以及为了维护它的平衡所要进行的LL旋转、RR旋转、LR旋转、RL旋转。</p>","more":"<h4 id=\"一、平衡二叉树的构造\"><a href=\"#一、平衡二叉树的构造\" class=\"headerlink\" title=\"一、平衡二叉树的构造\"></a>一、平衡二叉树的构造</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">insert</span><span class=\"params\">(node *root, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        root = &amp;all[total++];</div><div class=\"line\">        root-&gt;left = root-&gt;right = <span class=\"number\">0</span>;</div><div class=\"line\">        root-&gt;val = x;</div><div class=\"line\">        root-&gt;height = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &lt; root-&gt;val) &#123;</div><div class=\"line\">        root-&gt;left = insert(root-&gt;left, x);</div><div class=\"line\">        <span class=\"keyword\">if</span> (height(root-&gt;left) - height(root-&gt;right) == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            root = (x &lt; root-&gt;left-&gt;val) ? LL(root) : LR(root);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        root-&gt;right = insert(root-&gt;right, x);</div><div class=\"line\">        <span class=\"keyword\">if</span> (height(root-&gt;right) - height(root-&gt;left) == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            root = (x &gt; root-&gt;right-&gt;val) ? RR(root) : RL(root);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    root-&gt;height = max(height(root-&gt;left), height(root-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> root;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"二、LL旋转\"><a href=\"#二、LL旋转\" class=\"headerlink\" title=\"二、LL旋转\"></a>二、LL旋转</h4><p>所谓LL旋转并不是指旋转方向，而是指新插入导致不平衡的元素位于左子树的左儿子位置，也就是LeftLeft。</p>\n<p>看一下这种旋转的示意图：<br><img src=\"/src/imgs/1803/0313_ll.jpg\" alt=\"ll_rotate\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">LL</span><span class=\"params\">(node *k2)</span> </span>&#123;</div><div class=\"line\">    node *k1 = k2-&gt;left;</div><div class=\"line\">    k2-&gt;left = k1-&gt;right;</div><div class=\"line\">    k1-&gt;right = k2;</div><div class=\"line\">    k2-&gt;height = max(height(k2-&gt;left), height(k2-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    k1-&gt;height = max(height(k1-&gt;left), height(k1-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> k1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"三、RR旋转\"><a href=\"#三、RR旋转\" class=\"headerlink\" title=\"三、RR旋转\"></a>三、RR旋转</h4><p>同样LL旋转是指新插入导致不平衡的元素位于右子树的右儿子位置，也就是RightRight。</p>\n<p>看一下这种旋转的方式示意图：</p>\n<p><img src=\"/src/imgs/1803/0313_rr.jpg\" alt=\"rr_rotate\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">RR</span><span class=\"params\">(node *k1)</span> </span>&#123;</div><div class=\"line\">    node *k2 = k1-&gt;right;</div><div class=\"line\">    k1-&gt;right = k2-&gt;left;</div><div class=\"line\">    k2-&gt;left = k1;</div><div class=\"line\">    k1-&gt;height = max(height(k1-&gt;left), height(k1-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    k2-&gt;height = max(height(k2-&gt;left), height(k2-&gt;right)) + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> k2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"四、LR旋转和RL旋转\"><a href=\"#四、LR旋转和RL旋转\" class=\"headerlink\" title=\"四、LR旋转和RL旋转\"></a>四、LR旋转和RL旋转</h4><p>LR和RL则分别表示位于左子树的右儿子和右子树的左儿子。</p>\n<p>1.对于LR旋转，首先将最近的不平衡结点k3的左子树进行RR旋转，再将k3本身进行LL旋转。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">LR</span><span class=\"params\">(node *k3)</span> </span>&#123;</div><div class=\"line\">    k3-&gt;left = RR(k3-&gt;left);</div><div class=\"line\">    <span class=\"keyword\">return</span> LL(k3);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.对于RL旋转，首先将最近的不平衡结点k3的右子树进行LL旋转，再将k3本身进行RR旋转。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">node *<span class=\"title\">RL</span><span class=\"params\">(node *k1)</span> </span>&#123;</div><div class=\"line\">    k1-&gt;right = LL(k1-&gt;right);</div><div class=\"line\">    <span class=\"keyword\">return</span> RR(k1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>"},{"title":"朴素贝叶斯分类算法","date":"2018-03-26T16:00:00.000Z","_content":"\n#### 一、朴素贝叶斯分类\n\n1. 简介\n\n朴素贝叶斯（Naive Bayesian）是基于贝叶斯定理和特征条件独立假设的分类方法，它通过特征计算分类的概率，选取概率大的情况进行分类，因此它是基于概率论的一种机器学习分类方法。因为分类的目标是确定的，所以也是属于监督学习。\n\n朴素贝叶斯有如下几种：\n\n- 离散型朴素贝叶斯: MultinomialNB\n- 连续型朴素贝叶斯: GaussianNB\n- 混合型朴素贝叶斯: MergedNB\n\n<!--more-->\n\n2. 原理\n\n朴素贝叶斯基于条件概率、贝叶斯定理和独立性假设原则。\n\n(1) 条件概率原理原理\n\n```\n基于概率论的方法告诉我们，当只有两种分类时：\n如果p1(x,y)>p2(x,y)，那么分入类别1\n如果p1(x,y)<p2(x,y)，那么分入类别2\n```\n\n(2) 贝叶斯定理\n\n$p(c_i|x,y)=\\frac{p(x,y|c_i)p(c_i)}{p(x,y)}$\n\n其中，x,y表示特征变量，ci表示分类，p(ci|x,y)即表示在特征为x,y的情况下分入类别ci的概率，因此，结合条件概率和贝叶斯定理，有：\n\n```\n如果p(c1|x,y)>p(c2|x,y)，那么分类应当属于c1；\n如果p(c1|x,y)<p(c2|x,y)，那么分类应当属于c2\n```\n\n`贝叶斯定理最大的好处是可以用已知的三个概率去计算未知的概率，而如果仅仅是为了比较p(ci|x,y)和p(cj|x,y)的大小，只需要已知两个概率即可，分母相同，比较p(x,y|ci)p(ci)和p(x,y|cj)p(cj)即可。`\n\n(3) 特征条件独立假设原则\n\n见FAQ4.\n\n3. 朴素贝叶斯分类的流程\n\n```\n(1). 数据准备：收集数据，并将数据预处理为数值型或者布尔型，如对文本分类，需要将文本解析为词向量\n(2). 训练数据：根据训练样本集计算词项出现的概率，训练数据后得到各类下词汇出现概率的向量\n(3). 测试数据：用测试样本集去测试分类的准确性\n```\n\n4. 优缺点\n\n```\n1. 监督学习，需要确定分类的目标\n2. 对缺失数据不敏感，在数据较少的情况下依然可以使用该方法\n3. 可以处理多个类别 的分类问题\n4. 适用于标称型数据\n5. 对输入数据的形势比较敏感\n6. 由于用先验数据去预测分类，因此存在误差\n```\n\n\n- - -\n\n参考：\n\n1. [机器学习之朴素贝叶斯(NB)分类算法与Python实现](https://blog.csdn.net/moxigandashu/article/details/71480251)\n\n- - -\n\nFAQ：\n\n1. 基于概率论的方法和基于统计学的方法：\n\n基于概率论的方法是通过概率来衡量事件发生的可能性。概率论和统计学恰好是两个相反的概念，统计学是抽取部分样本进行统计来估算总体的情况，而概率论是通过总体情况来估计单个事件或者部分事情的发生情况。\n\n2. 朴素贝叶斯，朴素在什么地方：\n\n之所以叫朴素贝叶斯，因为它简单、易于操作，基于特征独立性假设，假设各个特征不会相互影响，这样就大大减小了计算概率的难度。\n\n3. 概率论中的基本概念\n\n(1)事件交和并：\n\nA和B两个事件的交，指的是事件A和B同时出现，记为A∩B;\nA和B两个事件的并，指的是事件A和事件B至少出现一次的情况，记为A∪B。\n\n(2)条件概率(conditional probability)：\n\n某个事件发生时另外一个事件发生的概率，如事件B发生条件下事件A发生的概率：\n\n$P(B|A)=\\frac{P(A \\cap B)}{P(A)},P(A \\cap B)=P(A)P(B | A)  or  P(A \\cap B)=P(B)P(A | B)$\n\n- P(A)称为\"先验概率\"（Prior probability），即在B事件发生之前，我们对A事件概率的一个判断。\n- P(A|B)称为\"后验概率\"（Posterior probability），即在B事件发生之后，我们对A事件概率的重新评估。\n- P(B|A)/P(B)称为\"可能性函数\"（Likelyhood），这是一个调整因子，使得预估概率更接近真实概率。\n\n所以，条件概率可以理解成下面的式子：\n\n> 后验概率　＝　先验概率 ｘ 调整因子\n\n(3)独立事件交的概率：\n\n两个相互独立的事件，其交的概率为： $P(A \\cap B)=P(A)P(B)$\n\n4. 贝叶斯定理（Bayes’s Rule）：\n\n如果有k个互斥且有穷个事件:B1,B2···，Bk ，并且，P(B1)+P(B2)+···+P(Bk)=1和一个可以观测到的事件A，那么有：\n\n$P(B_i | A)=\\frac{P(B_i \\cap A)}{P(A)}=\\frac{P(B_i)P(A | B_i)}{P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+···+P(B_k)P(A|B_k)}$\n\n- p(A) ：事件A发生的概率；\n- p(A∩B) :事件A 和事件B同时发生的概率；\n- p(A|B) ：表示事件A在事件B发生的条件下发生的概率。\n\n- - -\nTHE END.\n","source":"_posts/2018-03-17_Bayes.md","raw":"---\ntitle: 朴素贝叶斯分类算法\ndate: 2018-03-27\ncategories: 机器学习\ntags: [Bayes]\n---\n\n#### 一、朴素贝叶斯分类\n\n1. 简介\n\n朴素贝叶斯（Naive Bayesian）是基于贝叶斯定理和特征条件独立假设的分类方法，它通过特征计算分类的概率，选取概率大的情况进行分类，因此它是基于概率论的一种机器学习分类方法。因为分类的目标是确定的，所以也是属于监督学习。\n\n朴素贝叶斯有如下几种：\n\n- 离散型朴素贝叶斯: MultinomialNB\n- 连续型朴素贝叶斯: GaussianNB\n- 混合型朴素贝叶斯: MergedNB\n\n<!--more-->\n\n2. 原理\n\n朴素贝叶斯基于条件概率、贝叶斯定理和独立性假设原则。\n\n(1) 条件概率原理原理\n\n```\n基于概率论的方法告诉我们，当只有两种分类时：\n如果p1(x,y)>p2(x,y)，那么分入类别1\n如果p1(x,y)<p2(x,y)，那么分入类别2\n```\n\n(2) 贝叶斯定理\n\n$p(c_i|x,y)=\\frac{p(x,y|c_i)p(c_i)}{p(x,y)}$\n\n其中，x,y表示特征变量，ci表示分类，p(ci|x,y)即表示在特征为x,y的情况下分入类别ci的概率，因此，结合条件概率和贝叶斯定理，有：\n\n```\n如果p(c1|x,y)>p(c2|x,y)，那么分类应当属于c1；\n如果p(c1|x,y)<p(c2|x,y)，那么分类应当属于c2\n```\n\n`贝叶斯定理最大的好处是可以用已知的三个概率去计算未知的概率，而如果仅仅是为了比较p(ci|x,y)和p(cj|x,y)的大小，只需要已知两个概率即可，分母相同，比较p(x,y|ci)p(ci)和p(x,y|cj)p(cj)即可。`\n\n(3) 特征条件独立假设原则\n\n见FAQ4.\n\n3. 朴素贝叶斯分类的流程\n\n```\n(1). 数据准备：收集数据，并将数据预处理为数值型或者布尔型，如对文本分类，需要将文本解析为词向量\n(2). 训练数据：根据训练样本集计算词项出现的概率，训练数据后得到各类下词汇出现概率的向量\n(3). 测试数据：用测试样本集去测试分类的准确性\n```\n\n4. 优缺点\n\n```\n1. 监督学习，需要确定分类的目标\n2. 对缺失数据不敏感，在数据较少的情况下依然可以使用该方法\n3. 可以处理多个类别 的分类问题\n4. 适用于标称型数据\n5. 对输入数据的形势比较敏感\n6. 由于用先验数据去预测分类，因此存在误差\n```\n\n\n- - -\n\n参考：\n\n1. [机器学习之朴素贝叶斯(NB)分类算法与Python实现](https://blog.csdn.net/moxigandashu/article/details/71480251)\n\n- - -\n\nFAQ：\n\n1. 基于概率论的方法和基于统计学的方法：\n\n基于概率论的方法是通过概率来衡量事件发生的可能性。概率论和统计学恰好是两个相反的概念，统计学是抽取部分样本进行统计来估算总体的情况，而概率论是通过总体情况来估计单个事件或者部分事情的发生情况。\n\n2. 朴素贝叶斯，朴素在什么地方：\n\n之所以叫朴素贝叶斯，因为它简单、易于操作，基于特征独立性假设，假设各个特征不会相互影响，这样就大大减小了计算概率的难度。\n\n3. 概率论中的基本概念\n\n(1)事件交和并：\n\nA和B两个事件的交，指的是事件A和B同时出现，记为A∩B;\nA和B两个事件的并，指的是事件A和事件B至少出现一次的情况，记为A∪B。\n\n(2)条件概率(conditional probability)：\n\n某个事件发生时另外一个事件发生的概率，如事件B发生条件下事件A发生的概率：\n\n$P(B|A)=\\frac{P(A \\cap B)}{P(A)},P(A \\cap B)=P(A)P(B | A)  or  P(A \\cap B)=P(B)P(A | B)$\n\n- P(A)称为\"先验概率\"（Prior probability），即在B事件发生之前，我们对A事件概率的一个判断。\n- P(A|B)称为\"后验概率\"（Posterior probability），即在B事件发生之后，我们对A事件概率的重新评估。\n- P(B|A)/P(B)称为\"可能性函数\"（Likelyhood），这是一个调整因子，使得预估概率更接近真实概率。\n\n所以，条件概率可以理解成下面的式子：\n\n> 后验概率　＝　先验概率 ｘ 调整因子\n\n(3)独立事件交的概率：\n\n两个相互独立的事件，其交的概率为： $P(A \\cap B)=P(A)P(B)$\n\n4. 贝叶斯定理（Bayes’s Rule）：\n\n如果有k个互斥且有穷个事件:B1,B2···，Bk ，并且，P(B1)+P(B2)+···+P(Bk)=1和一个可以观测到的事件A，那么有：\n\n$P(B_i | A)=\\frac{P(B_i \\cap A)}{P(A)}=\\frac{P(B_i)P(A | B_i)}{P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+···+P(B_k)P(A|B_k)}$\n\n- p(A) ：事件A发生的概率；\n- p(A∩B) :事件A 和事件B同时发生的概率；\n- p(A|B) ：表示事件A在事件B发生的条件下发生的概率。\n\n- - -\nTHE END.\n","slug":"2018-03-17_Bayes","published":1,"updated":"2018-05-09T09:35:35.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsba7001zuro5nayz7wwf","content":"<h4 id=\"一、朴素贝叶斯分类\"><a href=\"#一、朴素贝叶斯分类\" class=\"headerlink\" title=\"一、朴素贝叶斯分类\"></a>一、朴素贝叶斯分类</h4><ol>\n<li>简介</li>\n</ol>\n<p>朴素贝叶斯（Naive Bayesian）是基于贝叶斯定理和特征条件独立假设的分类方法，它通过特征计算分类的概率，选取概率大的情况进行分类，因此它是基于概率论的一种机器学习分类方法。因为分类的目标是确定的，所以也是属于监督学习。</p>\n<p>朴素贝叶斯有如下几种：</p>\n<ul>\n<li>离散型朴素贝叶斯: MultinomialNB</li>\n<li>连续型朴素贝叶斯: GaussianNB</li>\n<li>混合型朴素贝叶斯: MergedNB</li>\n</ul>\n<a id=\"more\"></a>\n<ol>\n<li>原理</li>\n</ol>\n<p>朴素贝叶斯基于条件概率、贝叶斯定理和独立性假设原则。</p>\n<p>(1) 条件概率原理原理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">基于概率论的方法告诉我们，当只有两种分类时：</div><div class=\"line\">如果p1(x,y)&gt;p2(x,y)，那么分入类别1</div><div class=\"line\">如果p1(x,y)&lt;p2(x,y)，那么分入类别2</div></pre></td></tr></table></figure>\n<p>(2) 贝叶斯定理</p>\n<p>$p(c_i|x,y)=\\frac{p(x,y|c_i)p(c_i)}{p(x,y)}$</p>\n<p>其中，x,y表示特征变量，ci表示分类，p(ci|x,y)即表示在特征为x,y的情况下分入类别ci的概率，因此，结合条件概率和贝叶斯定理，有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果p(c1|x,y)&gt;p(c2|x,y)，那么分类应当属于c1；</div><div class=\"line\">如果p(c1|x,y)&lt;p(c2|x,y)，那么分类应当属于c2</div></pre></td></tr></table></figure>\n<p><code>贝叶斯定理最大的好处是可以用已知的三个概率去计算未知的概率，而如果仅仅是为了比较p(ci|x,y)和p(cj|x,y)的大小，只需要已知两个概率即可，分母相同，比较p(x,y|ci)p(ci)和p(x,y|cj)p(cj)即可。</code></p>\n<p>(3) 特征条件独立假设原则</p>\n<p>见FAQ4.</p>\n<ol>\n<li>朴素贝叶斯分类的流程</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(1). 数据准备：收集数据，并将数据预处理为数值型或者布尔型，如对文本分类，需要将文本解析为词向量</div><div class=\"line\">(2). 训练数据：根据训练样本集计算词项出现的概率，训练数据后得到各类下词汇出现概率的向量</div><div class=\"line\">(3). 测试数据：用测试样本集去测试分类的准确性</div></pre></td></tr></table></figure>\n<ol>\n<li>优缺点</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 监督学习，需要确定分类的目标</div><div class=\"line\">2. 对缺失数据不敏感，在数据较少的情况下依然可以使用该方法</div><div class=\"line\">3. 可以处理多个类别 的分类问题</div><div class=\"line\">4. 适用于标称型数据</div><div class=\"line\">5. 对输入数据的形势比较敏感</div><div class=\"line\">6. 由于用先验数据去预测分类，因此存在误差</div></pre></td></tr></table></figure>\n<hr>\n<p>参考：</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/moxigandashu/article/details/71480251\" target=\"_blank\" rel=\"external\">机器学习之朴素贝叶斯(NB)分类算法与Python实现</a></li>\n</ol>\n<hr>\n<p>FAQ：</p>\n<ol>\n<li>基于概率论的方法和基于统计学的方法：</li>\n</ol>\n<p>基于概率论的方法是通过概率来衡量事件发生的可能性。概率论和统计学恰好是两个相反的概念，统计学是抽取部分样本进行统计来估算总体的情况，而概率论是通过总体情况来估计单个事件或者部分事情的发生情况。</p>\n<ol>\n<li>朴素贝叶斯，朴素在什么地方：</li>\n</ol>\n<p>之所以叫朴素贝叶斯，因为它简单、易于操作，基于特征独立性假设，假设各个特征不会相互影响，这样就大大减小了计算概率的难度。</p>\n<ol>\n<li>概率论中的基本概念</li>\n</ol>\n<p>(1)事件交和并：</p>\n<p>A和B两个事件的交，指的是事件A和B同时出现，记为A∩B;<br>A和B两个事件的并，指的是事件A和事件B至少出现一次的情况，记为A∪B。</p>\n<p>(2)条件概率(conditional probability)：</p>\n<p>某个事件发生时另外一个事件发生的概率，如事件B发生条件下事件A发生的概率：</p>\n<p>$P(B|A)=\\frac{P(A \\cap B)}{P(A)},P(A \\cap B)=P(A)P(B | A)  or  P(A \\cap B)=P(B)P(A | B)$</p>\n<ul>\n<li>P(A)称为”先验概率”（Prior probability），即在B事件发生之前，我们对A事件概率的一个判断。</li>\n<li>P(A|B)称为”后验概率”（Posterior probability），即在B事件发生之后，我们对A事件概率的重新评估。</li>\n<li>P(B|A)/P(B)称为”可能性函数”（Likelyhood），这是一个调整因子，使得预估概率更接近真实概率。</li>\n</ul>\n<p>所以，条件概率可以理解成下面的式子：</p>\n<blockquote>\n<p>后验概率　＝　先验概率 ｘ 调整因子</p>\n</blockquote>\n<p>(3)独立事件交的概率：</p>\n<p>两个相互独立的事件，其交的概率为： $P(A \\cap B)=P(A)P(B)$</p>\n<ol>\n<li>贝叶斯定理（Bayes’s Rule）：</li>\n</ol>\n<p>如果有k个互斥且有穷个事件:B1,B2···，Bk ，并且，P(B1)+P(B2)+···+P(Bk)=1和一个可以观测到的事件A，那么有：</p>\n<p>$P(B_i | A)=\\frac{P(B_i \\cap A)}{P(A)}=\\frac{P(B_i)P(A | B_i)}{P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+···+P(B_k)P(A|B_k)}$</p>\n<ul>\n<li>p(A) ：事件A发生的概率；</li>\n<li>p(A∩B) :事件A 和事件B同时发生的概率；</li>\n<li>p(A|B) ：表示事件A在事件B发生的条件下发生的概率。</li>\n</ul>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、朴素贝叶斯分类\"><a href=\"#一、朴素贝叶斯分类\" class=\"headerlink\" title=\"一、朴素贝叶斯分类\"></a>一、朴素贝叶斯分类</h4><ol>\n<li>简介</li>\n</ol>\n<p>朴素贝叶斯（Naive Bayesian）是基于贝叶斯定理和特征条件独立假设的分类方法，它通过特征计算分类的概率，选取概率大的情况进行分类，因此它是基于概率论的一种机器学习分类方法。因为分类的目标是确定的，所以也是属于监督学习。</p>\n<p>朴素贝叶斯有如下几种：</p>\n<ul>\n<li>离散型朴素贝叶斯: MultinomialNB</li>\n<li>连续型朴素贝叶斯: GaussianNB</li>\n<li>混合型朴素贝叶斯: MergedNB</li>\n</ul>","more":"<ol>\n<li>原理</li>\n</ol>\n<p>朴素贝叶斯基于条件概率、贝叶斯定理和独立性假设原则。</p>\n<p>(1) 条件概率原理原理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">基于概率论的方法告诉我们，当只有两种分类时：</div><div class=\"line\">如果p1(x,y)&gt;p2(x,y)，那么分入类别1</div><div class=\"line\">如果p1(x,y)&lt;p2(x,y)，那么分入类别2</div></pre></td></tr></table></figure>\n<p>(2) 贝叶斯定理</p>\n<p>$p(c_i|x,y)=\\frac{p(x,y|c_i)p(c_i)}{p(x,y)}$</p>\n<p>其中，x,y表示特征变量，ci表示分类，p(ci|x,y)即表示在特征为x,y的情况下分入类别ci的概率，因此，结合条件概率和贝叶斯定理，有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果p(c1|x,y)&gt;p(c2|x,y)，那么分类应当属于c1；</div><div class=\"line\">如果p(c1|x,y)&lt;p(c2|x,y)，那么分类应当属于c2</div></pre></td></tr></table></figure>\n<p><code>贝叶斯定理最大的好处是可以用已知的三个概率去计算未知的概率，而如果仅仅是为了比较p(ci|x,y)和p(cj|x,y)的大小，只需要已知两个概率即可，分母相同，比较p(x,y|ci)p(ci)和p(x,y|cj)p(cj)即可。</code></p>\n<p>(3) 特征条件独立假设原则</p>\n<p>见FAQ4.</p>\n<ol>\n<li>朴素贝叶斯分类的流程</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(1). 数据准备：收集数据，并将数据预处理为数值型或者布尔型，如对文本分类，需要将文本解析为词向量</div><div class=\"line\">(2). 训练数据：根据训练样本集计算词项出现的概率，训练数据后得到各类下词汇出现概率的向量</div><div class=\"line\">(3). 测试数据：用测试样本集去测试分类的准确性</div></pre></td></tr></table></figure>\n<ol>\n<li>优缺点</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 监督学习，需要确定分类的目标</div><div class=\"line\">2. 对缺失数据不敏感，在数据较少的情况下依然可以使用该方法</div><div class=\"line\">3. 可以处理多个类别 的分类问题</div><div class=\"line\">4. 适用于标称型数据</div><div class=\"line\">5. 对输入数据的形势比较敏感</div><div class=\"line\">6. 由于用先验数据去预测分类，因此存在误差</div></pre></td></tr></table></figure>\n<hr>\n<p>参考：</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/moxigandashu/article/details/71480251\" target=\"_blank\" rel=\"external\">机器学习之朴素贝叶斯(NB)分类算法与Python实现</a></li>\n</ol>\n<hr>\n<p>FAQ：</p>\n<ol>\n<li>基于概率论的方法和基于统计学的方法：</li>\n</ol>\n<p>基于概率论的方法是通过概率来衡量事件发生的可能性。概率论和统计学恰好是两个相反的概念，统计学是抽取部分样本进行统计来估算总体的情况，而概率论是通过总体情况来估计单个事件或者部分事情的发生情况。</p>\n<ol>\n<li>朴素贝叶斯，朴素在什么地方：</li>\n</ol>\n<p>之所以叫朴素贝叶斯，因为它简单、易于操作，基于特征独立性假设，假设各个特征不会相互影响，这样就大大减小了计算概率的难度。</p>\n<ol>\n<li>概率论中的基本概念</li>\n</ol>\n<p>(1)事件交和并：</p>\n<p>A和B两个事件的交，指的是事件A和B同时出现，记为A∩B;<br>A和B两个事件的并，指的是事件A和事件B至少出现一次的情况，记为A∪B。</p>\n<p>(2)条件概率(conditional probability)：</p>\n<p>某个事件发生时另外一个事件发生的概率，如事件B发生条件下事件A发生的概率：</p>\n<p>$P(B|A)=\\frac{P(A \\cap B)}{P(A)},P(A \\cap B)=P(A)P(B | A)  or  P(A \\cap B)=P(B)P(A | B)$</p>\n<ul>\n<li>P(A)称为”先验概率”（Prior probability），即在B事件发生之前，我们对A事件概率的一个判断。</li>\n<li>P(A|B)称为”后验概率”（Posterior probability），即在B事件发生之后，我们对A事件概率的重新评估。</li>\n<li>P(B|A)/P(B)称为”可能性函数”（Likelyhood），这是一个调整因子，使得预估概率更接近真实概率。</li>\n</ul>\n<p>所以，条件概率可以理解成下面的式子：</p>\n<blockquote>\n<p>后验概率　＝　先验概率 ｘ 调整因子</p>\n</blockquote>\n<p>(3)独立事件交的概率：</p>\n<p>两个相互独立的事件，其交的概率为： $P(A \\cap B)=P(A)P(B)$</p>\n<ol>\n<li>贝叶斯定理（Bayes’s Rule）：</li>\n</ol>\n<p>如果有k个互斥且有穷个事件:B1,B2···，Bk ，并且，P(B1)+P(B2)+···+P(Bk)=1和一个可以观测到的事件A，那么有：</p>\n<p>$P(B_i | A)=\\frac{P(B_i \\cap A)}{P(A)}=\\frac{P(B_i)P(A | B_i)}{P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+···+P(B_k)P(A|B_k)}$</p>\n<ul>\n<li>p(A) ：事件A发生的概率；</li>\n<li>p(A∩B) :事件A 和事件B同时发生的概率；</li>\n<li>p(A|B) ：表示事件A在事件B发生的条件下发生的概率。</li>\n</ul>\n<hr>\n<p>THE END.</p>"},{"title":"基本概念","date":"2018-05-01T16:00:00.000Z","_content":"\n#### 假设空间\n\n假设空间是指所有可能的能满足样本输入和输出的假设函数h(x)的集合。\n注意，假设函数一定是一个无穷大的集合。也就是说，如果样本是一串有穷的离散点（xi，yi），i属于1到N，那么能够拟合这这些点的无穷多个函数都是可能的假设函数。\n\n那么，怎样的假设函数是最合理呢？这就涉及到归纳偏好的概念了。\n\n<!--more-->\n\n#### 损失函数\n\n对于给定的输入X和假设空间中选择的决策函数模型f，由f(X)给出相应的输入Y，这个输出的预没值f(X)与真实值Y可能一致，也可能不一致，用一个损失函数或代价函数来度量预测的错误程度。损失函数是f(x)和Y的非负实值函数，记作L(Y,f(X))\n\n几种常用的损失函数：\n\n1. 0-1损失函数(0-1 loss function)\n\n $L(Y,f(X)) = \\begin{cases}1, &Y\\neq f(X) \\\\ 0, & Y=f(X)\\end{cases}$\n\n2. 平方损失函数（quadratic loss function）\n\n $L(Y,f(X)) = (Y – f(X))^2$\n\n3. 绝对损失函数（absolute loss function）\n\n $L(Y,f(X)) = |Y-f(X)|$\n\n4. 对数损失函数（logarithmic loss function）或对数似然损失函数\n\n $L(Y,P(Y|X)) = –logP(Y|X)$\n\n#### 风险函数\n\n损失函数值越小，模型就越好。由于模型的输入、输出(X,Y)是随机变量，遵循联合分布P(X,Y)，所以损失函数的期望是 :\n\n$R_{exp}(f)=E_P[L(Y,f(X))]=\\int_{\\mathcal{X}\\times\\mathcal{Y}}L(y,f(x))P(x,y)dxdy$\n\n这是理论上模型f(X)关于联合分布P(X,Y)的平均意义下的损失，称为风险函数(risk function)或期望损失(expected loss)。\n\n学习的目标就是选择期望风险最小的模型。由于联合分布P(X,Y)是所有样本所遵循的统计规律，它是未知的，所以Rexp(f)不能直接计算。实际上如果知道了联合分布，那么可以直接计算出P(Y|X)=∫P(x,y)dx，也就不需要学习了。\n所以用上面那种方式定义风险函数是不行的，那样的话监督学习变成了一个病态问题。\n\n对于给定的训练数据集 T=(x1,y1),(x2,y2),…,(xN,yN),模型f(X)关于训练数据集的平均损失称为经验风险（empirical risk）或经验损失（empirical loss），记作Remp：\n\n$R_{emp}(f) = \\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))$\n\n期望风险Rexp(f)是模型关于联合分布的期望损失，经验风险Remp(f)是模型关于训练样本集的平均损失。根据大数定律，当样本容量N趋于无穷时，经验风险Remp(f)趋向于期望风险Rexp(f)。\n\n所以，一个很自然的想法是用经验风险估计期望风险。但是，由于现实中训练样本数目很有限，所以用经验风险估计期望风险常常不理想，要对经验风险进行一定的矫正。这就关系到监督学习的两个基本策略：经验风险最小化和结构风险最小化。\n\n#### 经验风险最小化\n\n在假设空间、损失函数以及训练数据集确定的情况下，经验风险函数式就可以确定。经验风险最小化的策略认为，经验风险最小的模型就是最优的模型。根据这一策略，按照经验风险最小化求最佳模型就是求解最优化问题：\n\n$\\min_{f\\in\\mathcal{F}}\\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))$\n\n其中F是假设空间。\n\n当样本容量足够大时，经验风险最小化能保证有很好的学习效果，在现实中广泛采用。比如极大似然估计就是经验风险最小化的一个例子。当模型是条件概率分布，损失函数是对数损失函数时，经验风险最小化就等价于极大似然估计。\n但是当样本容量很小时，经验风险最小化学习效果就未必很好，会产生“过拟合(over-fitting)”现象。\n\n#### 结构风险最小化\n\n结构风险最小化（structural risk minimization SRM）是为了防止过拟合而提出来的策略。结构风险最小化等价于正则化。结构风险在经验风险上加上表示模型复杂度的正则化项或罚项。在假设空间，损失函数以及训练样本集确定的情况下，结构风险的定义是\n\n$R_{srm}(f) = \\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))+\\lambda J(f)$\n\n其中J(f)为模型的复杂度，是定义在假设空间F上的泛函。模型f越复杂，复杂度J(f)就越大；反之，模型f越简单，复杂度J(f)就越小。也就是说复杂度表示了对复杂模型的惩罚。λ≥0是系数，用以权衡经验风险和模型的复杂度。结构风险小需要经验风险与模型复杂度同时小。结构风险小的模型往往对训练数据以及未知的测试数据都有较好的预测。\n比如，贝叶斯估计中的最大后验概率估计（maximum posterior probability estimation,MAP）就是结构风险最小化的例子。当模型是条件概率分布、损失函数就是对数损失函数、模型复杂度由模型的先验概率表示时，结构风险最小化就等价于最大后验概率估计。\n\n结构风险最小化的策略认为结构风险最小的模型是最优的模型。所以求最优化模型时，就是求解最优化问题：\n\n$\\min_{f\\in\\mathcal{F}}\\frac{1}{N}L(y_i,f(x_i))+\\lambda J(f)$\n\n这样，监督学习问题就变成了经验风险或结构风险函数的最优化问题。这时经验或结构风险函数是最优化的目标函数。\n\n#### 监督学习\n\n- 分类 ： 输出值如果是不连续的监督学习算法称为分类器（classifier）。\n- 回归 ： 输出值连续的监督学习算法称为回归函数（regression function）。\n\n#### 归纳偏好\n\n归纳偏好是一个能挑选最佳假设函数的基准。以韦小宝的7个老婆为例，这7个老婆均满足小宝的要求，因此构成了大小为7的假设空间。（实际上，假设空间的大小一定是无穷大的。为了说明问题，我们暂时以7为大小）。那么，如何衡量哪一个假设空间中哪一个假设函数（老婆）最好呢？如果以温柔体贴为偏好来选，当然是小双；如果以小宝的迷恋为偏好来讲，假设函数就是阿珂。说白了，归纳偏好就是一个用于挑选假设函数的基准。\n\n一般情况下，我们都使用“奥卡姆剃刀”原则，也就是选择最简单的假设函数。也就是变量最少，变量的幂指数最小的函数。也就是说，一次函数能拟合时就不选二次函数作为假设函数。\n\n#### 极大似然估计\n\n极大似然估计是根据样本(x1,x2，…，xi，…，xn)的值来估计样本模型中参数（θ1,θ2，…，θi，…，θn）的。是一种参数估计方法。\n\n其中，似然是似然函数的简称。可由L(x1,x2，…，xi，…，xn,θ1,θ2，…，θi，…，θn )来表示。实际上，样本一旦确定，人们一般会假设一个可拟合这些样本的模型，即参数个数是确定的，待求的是参数的具体值。比如，基于班上同学的身高数据，一般会假设身高是符合正态分布(μ,σ)，待求的是这两个参数具体的值。\n\n那么，如何基于已有的样本数据来求得模型中参数得具体值呢？\n\n极大似然估计的意思是说，你只要能使L(x1,x2，…，xi，…，xn,θ1,θ2，…，θi，…，θn )最大，你的参数θ1,θ2，…，θi，…，θn 就是有效的。\n以身高样本为例（假定身高样本是独立同分布的）。即当L(x1,x2，…，xi，…，xn,μ,σ )最大时，(μ,σ)被估计的是准确的。\n\n求极大似然函数估计值的一般步骤：\n\n1. 写出似然函数；\n2. 对似然函数取对数，并整理；\n3. 求导数 ；\n4. 导数为零时，似然函数取得极大值 。\n\n- - -\nTHE END.\n","source":"_posts/2018-05-02_BaseConcept.md","raw":"---\ntitle: 基本概念\ndate: 2018-05-02\ncategories: 机器学习\ntags: [机器学习]\n---\n\n#### 假设空间\n\n假设空间是指所有可能的能满足样本输入和输出的假设函数h(x)的集合。\n注意，假设函数一定是一个无穷大的集合。也就是说，如果样本是一串有穷的离散点（xi，yi），i属于1到N，那么能够拟合这这些点的无穷多个函数都是可能的假设函数。\n\n那么，怎样的假设函数是最合理呢？这就涉及到归纳偏好的概念了。\n\n<!--more-->\n\n#### 损失函数\n\n对于给定的输入X和假设空间中选择的决策函数模型f，由f(X)给出相应的输入Y，这个输出的预没值f(X)与真实值Y可能一致，也可能不一致，用一个损失函数或代价函数来度量预测的错误程度。损失函数是f(x)和Y的非负实值函数，记作L(Y,f(X))\n\n几种常用的损失函数：\n\n1. 0-1损失函数(0-1 loss function)\n\n $L(Y,f(X)) = \\begin{cases}1, &Y\\neq f(X) \\\\ 0, & Y=f(X)\\end{cases}$\n\n2. 平方损失函数（quadratic loss function）\n\n $L(Y,f(X)) = (Y – f(X))^2$\n\n3. 绝对损失函数（absolute loss function）\n\n $L(Y,f(X)) = |Y-f(X)|$\n\n4. 对数损失函数（logarithmic loss function）或对数似然损失函数\n\n $L(Y,P(Y|X)) = –logP(Y|X)$\n\n#### 风险函数\n\n损失函数值越小，模型就越好。由于模型的输入、输出(X,Y)是随机变量，遵循联合分布P(X,Y)，所以损失函数的期望是 :\n\n$R_{exp}(f)=E_P[L(Y,f(X))]=\\int_{\\mathcal{X}\\times\\mathcal{Y}}L(y,f(x))P(x,y)dxdy$\n\n这是理论上模型f(X)关于联合分布P(X,Y)的平均意义下的损失，称为风险函数(risk function)或期望损失(expected loss)。\n\n学习的目标就是选择期望风险最小的模型。由于联合分布P(X,Y)是所有样本所遵循的统计规律，它是未知的，所以Rexp(f)不能直接计算。实际上如果知道了联合分布，那么可以直接计算出P(Y|X)=∫P(x,y)dx，也就不需要学习了。\n所以用上面那种方式定义风险函数是不行的，那样的话监督学习变成了一个病态问题。\n\n对于给定的训练数据集 T=(x1,y1),(x2,y2),…,(xN,yN),模型f(X)关于训练数据集的平均损失称为经验风险（empirical risk）或经验损失（empirical loss），记作Remp：\n\n$R_{emp}(f) = \\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))$\n\n期望风险Rexp(f)是模型关于联合分布的期望损失，经验风险Remp(f)是模型关于训练样本集的平均损失。根据大数定律，当样本容量N趋于无穷时，经验风险Remp(f)趋向于期望风险Rexp(f)。\n\n所以，一个很自然的想法是用经验风险估计期望风险。但是，由于现实中训练样本数目很有限，所以用经验风险估计期望风险常常不理想，要对经验风险进行一定的矫正。这就关系到监督学习的两个基本策略：经验风险最小化和结构风险最小化。\n\n#### 经验风险最小化\n\n在假设空间、损失函数以及训练数据集确定的情况下，经验风险函数式就可以确定。经验风险最小化的策略认为，经验风险最小的模型就是最优的模型。根据这一策略，按照经验风险最小化求最佳模型就是求解最优化问题：\n\n$\\min_{f\\in\\mathcal{F}}\\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))$\n\n其中F是假设空间。\n\n当样本容量足够大时，经验风险最小化能保证有很好的学习效果，在现实中广泛采用。比如极大似然估计就是经验风险最小化的一个例子。当模型是条件概率分布，损失函数是对数损失函数时，经验风险最小化就等价于极大似然估计。\n但是当样本容量很小时，经验风险最小化学习效果就未必很好，会产生“过拟合(over-fitting)”现象。\n\n#### 结构风险最小化\n\n结构风险最小化（structural risk minimization SRM）是为了防止过拟合而提出来的策略。结构风险最小化等价于正则化。结构风险在经验风险上加上表示模型复杂度的正则化项或罚项。在假设空间，损失函数以及训练样本集确定的情况下，结构风险的定义是\n\n$R_{srm}(f) = \\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))+\\lambda J(f)$\n\n其中J(f)为模型的复杂度，是定义在假设空间F上的泛函。模型f越复杂，复杂度J(f)就越大；反之，模型f越简单，复杂度J(f)就越小。也就是说复杂度表示了对复杂模型的惩罚。λ≥0是系数，用以权衡经验风险和模型的复杂度。结构风险小需要经验风险与模型复杂度同时小。结构风险小的模型往往对训练数据以及未知的测试数据都有较好的预测。\n比如，贝叶斯估计中的最大后验概率估计（maximum posterior probability estimation,MAP）就是结构风险最小化的例子。当模型是条件概率分布、损失函数就是对数损失函数、模型复杂度由模型的先验概率表示时，结构风险最小化就等价于最大后验概率估计。\n\n结构风险最小化的策略认为结构风险最小的模型是最优的模型。所以求最优化模型时，就是求解最优化问题：\n\n$\\min_{f\\in\\mathcal{F}}\\frac{1}{N}L(y_i,f(x_i))+\\lambda J(f)$\n\n这样，监督学习问题就变成了经验风险或结构风险函数的最优化问题。这时经验或结构风险函数是最优化的目标函数。\n\n#### 监督学习\n\n- 分类 ： 输出值如果是不连续的监督学习算法称为分类器（classifier）。\n- 回归 ： 输出值连续的监督学习算法称为回归函数（regression function）。\n\n#### 归纳偏好\n\n归纳偏好是一个能挑选最佳假设函数的基准。以韦小宝的7个老婆为例，这7个老婆均满足小宝的要求，因此构成了大小为7的假设空间。（实际上，假设空间的大小一定是无穷大的。为了说明问题，我们暂时以7为大小）。那么，如何衡量哪一个假设空间中哪一个假设函数（老婆）最好呢？如果以温柔体贴为偏好来选，当然是小双；如果以小宝的迷恋为偏好来讲，假设函数就是阿珂。说白了，归纳偏好就是一个用于挑选假设函数的基准。\n\n一般情况下，我们都使用“奥卡姆剃刀”原则，也就是选择最简单的假设函数。也就是变量最少，变量的幂指数最小的函数。也就是说，一次函数能拟合时就不选二次函数作为假设函数。\n\n#### 极大似然估计\n\n极大似然估计是根据样本(x1,x2，…，xi，…，xn)的值来估计样本模型中参数（θ1,θ2，…，θi，…，θn）的。是一种参数估计方法。\n\n其中，似然是似然函数的简称。可由L(x1,x2，…，xi，…，xn,θ1,θ2，…，θi，…，θn )来表示。实际上，样本一旦确定，人们一般会假设一个可拟合这些样本的模型，即参数个数是确定的，待求的是参数的具体值。比如，基于班上同学的身高数据，一般会假设身高是符合正态分布(μ,σ)，待求的是这两个参数具体的值。\n\n那么，如何基于已有的样本数据来求得模型中参数得具体值呢？\n\n极大似然估计的意思是说，你只要能使L(x1,x2，…，xi，…，xn,θ1,θ2，…，θi，…，θn )最大，你的参数θ1,θ2，…，θi，…，θn 就是有效的。\n以身高样本为例（假定身高样本是独立同分布的）。即当L(x1,x2，…，xi，…，xn,μ,σ )最大时，(μ,σ)被估计的是准确的。\n\n求极大似然函数估计值的一般步骤：\n\n1. 写出似然函数；\n2. 对似然函数取对数，并整理；\n3. 求导数 ；\n4. 导数为零时，似然函数取得极大值 。\n\n- - -\nTHE END.\n","slug":"2018-05-02_BaseConcept","published":1,"updated":"2018-05-03T08:51:45.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsba90023uro59se3pft0","content":"<h4 id=\"假设空间\"><a href=\"#假设空间\" class=\"headerlink\" title=\"假设空间\"></a>假设空间</h4><p>假设空间是指所有可能的能满足样本输入和输出的假设函数h(x)的集合。<br>注意，假设函数一定是一个无穷大的集合。也就是说，如果样本是一串有穷的离散点（xi，yi），i属于1到N，那么能够拟合这这些点的无穷多个函数都是可能的假设函数。</p>\n<p>那么，怎样的假设函数是最合理呢？这就涉及到归纳偏好的概念了。</p>\n<a id=\"more\"></a>\n<h4 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h4><p>对于给定的输入X和假设空间中选择的决策函数模型f，由f(X)给出相应的输入Y，这个输出的预没值f(X)与真实值Y可能一致，也可能不一致，用一个损失函数或代价函数来度量预测的错误程度。损失函数是f(x)和Y的非负实值函数，记作L(Y,f(X))</p>\n<p>几种常用的损失函数：</p>\n<ol>\n<li><p>0-1损失函数(0-1 loss function)</p>\n<p>$L(Y,f(X)) = \\begin{cases}1, &amp;Y\\neq f(X) \\\\ 0, &amp; Y=f(X)\\end{cases}$</p>\n</li>\n<li><p>平方损失函数（quadratic loss function）</p>\n<p>$L(Y,f(X)) = (Y – f(X))^2$</p>\n</li>\n<li><p>绝对损失函数（absolute loss function）</p>\n<p>$L(Y,f(X)) = |Y-f(X)|$</p>\n</li>\n<li><p>对数损失函数（logarithmic loss function）或对数似然损失函数</p>\n<p>$L(Y,P(Y|X)) = –logP(Y|X)$</p>\n</li>\n</ol>\n<h4 id=\"风险函数\"><a href=\"#风险函数\" class=\"headerlink\" title=\"风险函数\"></a>风险函数</h4><p>损失函数值越小，模型就越好。由于模型的输入、输出(X,Y)是随机变量，遵循联合分布P(X,Y)，所以损失函数的期望是 :</p>\n<p>$R_{exp}(f)=E_P[L(Y,f(X))]=\\int_{\\mathcal{X}\\times\\mathcal{Y}}L(y,f(x))P(x,y)dxdy$</p>\n<p>这是理论上模型f(X)关于联合分布P(X,Y)的平均意义下的损失，称为风险函数(risk function)或期望损失(expected loss)。</p>\n<p>学习的目标就是选择期望风险最小的模型。由于联合分布P(X,Y)是所有样本所遵循的统计规律，它是未知的，所以Rexp(f)不能直接计算。实际上如果知道了联合分布，那么可以直接计算出P(Y|X)=∫P(x,y)dx，也就不需要学习了。<br>所以用上面那种方式定义风险函数是不行的，那样的话监督学习变成了一个病态问题。</p>\n<p>对于给定的训练数据集 T=(x1,y1),(x2,y2),…,(xN,yN),模型f(X)关于训练数据集的平均损失称为经验风险（empirical risk）或经验损失（empirical loss），记作Remp：</p>\n<p>$R_{emp}(f) = \\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))$</p>\n<p>期望风险Rexp(f)是模型关于联合分布的期望损失，经验风险Remp(f)是模型关于训练样本集的平均损失。根据大数定律，当样本容量N趋于无穷时，经验风险Remp(f)趋向于期望风险Rexp(f)。</p>\n<p>所以，一个很自然的想法是用经验风险估计期望风险。但是，由于现实中训练样本数目很有限，所以用经验风险估计期望风险常常不理想，要对经验风险进行一定的矫正。这就关系到监督学习的两个基本策略：经验风险最小化和结构风险最小化。</p>\n<h4 id=\"经验风险最小化\"><a href=\"#经验风险最小化\" class=\"headerlink\" title=\"经验风险最小化\"></a>经验风险最小化</h4><p>在假设空间、损失函数以及训练数据集确定的情况下，经验风险函数式就可以确定。经验风险最小化的策略认为，经验风险最小的模型就是最优的模型。根据这一策略，按照经验风险最小化求最佳模型就是求解最优化问题：</p>\n<p>$\\min_{f\\in\\mathcal{F}}\\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))$</p>\n<p>其中F是假设空间。</p>\n<p>当样本容量足够大时，经验风险最小化能保证有很好的学习效果，在现实中广泛采用。比如极大似然估计就是经验风险最小化的一个例子。当模型是条件概率分布，损失函数是对数损失函数时，经验风险最小化就等价于极大似然估计。<br>但是当样本容量很小时，经验风险最小化学习效果就未必很好，会产生“过拟合(over-fitting)”现象。</p>\n<h4 id=\"结构风险最小化\"><a href=\"#结构风险最小化\" class=\"headerlink\" title=\"结构风险最小化\"></a>结构风险最小化</h4><p>结构风险最小化（structural risk minimization SRM）是为了防止过拟合而提出来的策略。结构风险最小化等价于正则化。结构风险在经验风险上加上表示模型复杂度的正则化项或罚项。在假设空间，损失函数以及训练样本集确定的情况下，结构风险的定义是</p>\n<p>$R_{srm}(f) = \\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))+\\lambda J(f)$</p>\n<p>其中J(f)为模型的复杂度，是定义在假设空间F上的泛函。模型f越复杂，复杂度J(f)就越大；反之，模型f越简单，复杂度J(f)就越小。也就是说复杂度表示了对复杂模型的惩罚。λ≥0是系数，用以权衡经验风险和模型的复杂度。结构风险小需要经验风险与模型复杂度同时小。结构风险小的模型往往对训练数据以及未知的测试数据都有较好的预测。<br>比如，贝叶斯估计中的最大后验概率估计（maximum posterior probability estimation,MAP）就是结构风险最小化的例子。当模型是条件概率分布、损失函数就是对数损失函数、模型复杂度由模型的先验概率表示时，结构风险最小化就等价于最大后验概率估计。</p>\n<p>结构风险最小化的策略认为结构风险最小的模型是最优的模型。所以求最优化模型时，就是求解最优化问题：</p>\n<p>$\\min_{f\\in\\mathcal{F}}\\frac{1}{N}L(y_i,f(x_i))+\\lambda J(f)$</p>\n<p>这样，监督学习问题就变成了经验风险或结构风险函数的最优化问题。这时经验或结构风险函数是最优化的目标函数。</p>\n<h4 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h4><ul>\n<li>分类 ： 输出值如果是不连续的监督学习算法称为分类器（classifier）。</li>\n<li>回归 ： 输出值连续的监督学习算法称为回归函数（regression function）。</li>\n</ul>\n<h4 id=\"归纳偏好\"><a href=\"#归纳偏好\" class=\"headerlink\" title=\"归纳偏好\"></a>归纳偏好</h4><p>归纳偏好是一个能挑选最佳假设函数的基准。以韦小宝的7个老婆为例，这7个老婆均满足小宝的要求，因此构成了大小为7的假设空间。（实际上，假设空间的大小一定是无穷大的。为了说明问题，我们暂时以7为大小）。那么，如何衡量哪一个假设空间中哪一个假设函数（老婆）最好呢？如果以温柔体贴为偏好来选，当然是小双；如果以小宝的迷恋为偏好来讲，假设函数就是阿珂。说白了，归纳偏好就是一个用于挑选假设函数的基准。</p>\n<p>一般情况下，我们都使用“奥卡姆剃刀”原则，也就是选择最简单的假设函数。也就是变量最少，变量的幂指数最小的函数。也就是说，一次函数能拟合时就不选二次函数作为假设函数。</p>\n<h4 id=\"极大似然估计\"><a href=\"#极大似然估计\" class=\"headerlink\" title=\"极大似然估计\"></a>极大似然估计</h4><p>极大似然估计是根据样本(x1,x2，…，xi，…，xn)的值来估计样本模型中参数（θ1,θ2，…，θi，…，θn）的。是一种参数估计方法。</p>\n<p>其中，似然是似然函数的简称。可由L(x1,x2，…，xi，…，xn,θ1,θ2，…，θi，…，θn )来表示。实际上，样本一旦确定，人们一般会假设一个可拟合这些样本的模型，即参数个数是确定的，待求的是参数的具体值。比如，基于班上同学的身高数据，一般会假设身高是符合正态分布(μ,σ)，待求的是这两个参数具体的值。</p>\n<p>那么，如何基于已有的样本数据来求得模型中参数得具体值呢？</p>\n<p>极大似然估计的意思是说，你只要能使L(x1,x2，…，xi，…，xn,θ1,θ2，…，θi，…，θn )最大，你的参数θ1,θ2，…，θi，…，θn 就是有效的。<br>以身高样本为例（假定身高样本是独立同分布的）。即当L(x1,x2，…，xi，…，xn,μ,σ )最大时，(μ,σ)被估计的是准确的。</p>\n<p>求极大似然函数估计值的一般步骤：</p>\n<ol>\n<li>写出似然函数；</li>\n<li>对似然函数取对数，并整理；</li>\n<li>求导数 ；</li>\n<li>导数为零时，似然函数取得极大值 。</li>\n</ol>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"假设空间\"><a href=\"#假设空间\" class=\"headerlink\" title=\"假设空间\"></a>假设空间</h4><p>假设空间是指所有可能的能满足样本输入和输出的假设函数h(x)的集合。<br>注意，假设函数一定是一个无穷大的集合。也就是说，如果样本是一串有穷的离散点（xi，yi），i属于1到N，那么能够拟合这这些点的无穷多个函数都是可能的假设函数。</p>\n<p>那么，怎样的假设函数是最合理呢？这就涉及到归纳偏好的概念了。</p>","more":"<h4 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h4><p>对于给定的输入X和假设空间中选择的决策函数模型f，由f(X)给出相应的输入Y，这个输出的预没值f(X)与真实值Y可能一致，也可能不一致，用一个损失函数或代价函数来度量预测的错误程度。损失函数是f(x)和Y的非负实值函数，记作L(Y,f(X))</p>\n<p>几种常用的损失函数：</p>\n<ol>\n<li><p>0-1损失函数(0-1 loss function)</p>\n<p>$L(Y,f(X)) = \\begin{cases}1, &amp;Y\\neq f(X) \\\\ 0, &amp; Y=f(X)\\end{cases}$</p>\n</li>\n<li><p>平方损失函数（quadratic loss function）</p>\n<p>$L(Y,f(X)) = (Y – f(X))^2$</p>\n</li>\n<li><p>绝对损失函数（absolute loss function）</p>\n<p>$L(Y,f(X)) = |Y-f(X)|$</p>\n</li>\n<li><p>对数损失函数（logarithmic loss function）或对数似然损失函数</p>\n<p>$L(Y,P(Y|X)) = –logP(Y|X)$</p>\n</li>\n</ol>\n<h4 id=\"风险函数\"><a href=\"#风险函数\" class=\"headerlink\" title=\"风险函数\"></a>风险函数</h4><p>损失函数值越小，模型就越好。由于模型的输入、输出(X,Y)是随机变量，遵循联合分布P(X,Y)，所以损失函数的期望是 :</p>\n<p>$R_{exp}(f)=E_P[L(Y,f(X))]=\\int_{\\mathcal{X}\\times\\mathcal{Y}}L(y,f(x))P(x,y)dxdy$</p>\n<p>这是理论上模型f(X)关于联合分布P(X,Y)的平均意义下的损失，称为风险函数(risk function)或期望损失(expected loss)。</p>\n<p>学习的目标就是选择期望风险最小的模型。由于联合分布P(X,Y)是所有样本所遵循的统计规律，它是未知的，所以Rexp(f)不能直接计算。实际上如果知道了联合分布，那么可以直接计算出P(Y|X)=∫P(x,y)dx，也就不需要学习了。<br>所以用上面那种方式定义风险函数是不行的，那样的话监督学习变成了一个病态问题。</p>\n<p>对于给定的训练数据集 T=(x1,y1),(x2,y2),…,(xN,yN),模型f(X)关于训练数据集的平均损失称为经验风险（empirical risk）或经验损失（empirical loss），记作Remp：</p>\n<p>$R_{emp}(f) = \\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))$</p>\n<p>期望风险Rexp(f)是模型关于联合分布的期望损失，经验风险Remp(f)是模型关于训练样本集的平均损失。根据大数定律，当样本容量N趋于无穷时，经验风险Remp(f)趋向于期望风险Rexp(f)。</p>\n<p>所以，一个很自然的想法是用经验风险估计期望风险。但是，由于现实中训练样本数目很有限，所以用经验风险估计期望风险常常不理想，要对经验风险进行一定的矫正。这就关系到监督学习的两个基本策略：经验风险最小化和结构风险最小化。</p>\n<h4 id=\"经验风险最小化\"><a href=\"#经验风险最小化\" class=\"headerlink\" title=\"经验风险最小化\"></a>经验风险最小化</h4><p>在假设空间、损失函数以及训练数据集确定的情况下，经验风险函数式就可以确定。经验风险最小化的策略认为，经验风险最小的模型就是最优的模型。根据这一策略，按照经验风险最小化求最佳模型就是求解最优化问题：</p>\n<p>$\\min_{f\\in\\mathcal{F}}\\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))$</p>\n<p>其中F是假设空间。</p>\n<p>当样本容量足够大时，经验风险最小化能保证有很好的学习效果，在现实中广泛采用。比如极大似然估计就是经验风险最小化的一个例子。当模型是条件概率分布，损失函数是对数损失函数时，经验风险最小化就等价于极大似然估计。<br>但是当样本容量很小时，经验风险最小化学习效果就未必很好，会产生“过拟合(over-fitting)”现象。</p>\n<h4 id=\"结构风险最小化\"><a href=\"#结构风险最小化\" class=\"headerlink\" title=\"结构风险最小化\"></a>结构风险最小化</h4><p>结构风险最小化（structural risk minimization SRM）是为了防止过拟合而提出来的策略。结构风险最小化等价于正则化。结构风险在经验风险上加上表示模型复杂度的正则化项或罚项。在假设空间，损失函数以及训练样本集确定的情况下，结构风险的定义是</p>\n<p>$R_{srm}(f) = \\frac{1}{N}\\sum_{i=1}^NL(y_i,f(x_i))+\\lambda J(f)$</p>\n<p>其中J(f)为模型的复杂度，是定义在假设空间F上的泛函。模型f越复杂，复杂度J(f)就越大；反之，模型f越简单，复杂度J(f)就越小。也就是说复杂度表示了对复杂模型的惩罚。λ≥0是系数，用以权衡经验风险和模型的复杂度。结构风险小需要经验风险与模型复杂度同时小。结构风险小的模型往往对训练数据以及未知的测试数据都有较好的预测。<br>比如，贝叶斯估计中的最大后验概率估计（maximum posterior probability estimation,MAP）就是结构风险最小化的例子。当模型是条件概率分布、损失函数就是对数损失函数、模型复杂度由模型的先验概率表示时，结构风险最小化就等价于最大后验概率估计。</p>\n<p>结构风险最小化的策略认为结构风险最小的模型是最优的模型。所以求最优化模型时，就是求解最优化问题：</p>\n<p>$\\min_{f\\in\\mathcal{F}}\\frac{1}{N}L(y_i,f(x_i))+\\lambda J(f)$</p>\n<p>这样，监督学习问题就变成了经验风险或结构风险函数的最优化问题。这时经验或结构风险函数是最优化的目标函数。</p>\n<h4 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h4><ul>\n<li>分类 ： 输出值如果是不连续的监督学习算法称为分类器（classifier）。</li>\n<li>回归 ： 输出值连续的监督学习算法称为回归函数（regression function）。</li>\n</ul>\n<h4 id=\"归纳偏好\"><a href=\"#归纳偏好\" class=\"headerlink\" title=\"归纳偏好\"></a>归纳偏好</h4><p>归纳偏好是一个能挑选最佳假设函数的基准。以韦小宝的7个老婆为例，这7个老婆均满足小宝的要求，因此构成了大小为7的假设空间。（实际上，假设空间的大小一定是无穷大的。为了说明问题，我们暂时以7为大小）。那么，如何衡量哪一个假设空间中哪一个假设函数（老婆）最好呢？如果以温柔体贴为偏好来选，当然是小双；如果以小宝的迷恋为偏好来讲，假设函数就是阿珂。说白了，归纳偏好就是一个用于挑选假设函数的基准。</p>\n<p>一般情况下，我们都使用“奥卡姆剃刀”原则，也就是选择最简单的假设函数。也就是变量最少，变量的幂指数最小的函数。也就是说，一次函数能拟合时就不选二次函数作为假设函数。</p>\n<h4 id=\"极大似然估计\"><a href=\"#极大似然估计\" class=\"headerlink\" title=\"极大似然估计\"></a>极大似然估计</h4><p>极大似然估计是根据样本(x1,x2，…，xi，…，xn)的值来估计样本模型中参数（θ1,θ2，…，θi，…，θn）的。是一种参数估计方法。</p>\n<p>其中，似然是似然函数的简称。可由L(x1,x2，…，xi，…，xn,θ1,θ2，…，θi，…，θn )来表示。实际上，样本一旦确定，人们一般会假设一个可拟合这些样本的模型，即参数个数是确定的，待求的是参数的具体值。比如，基于班上同学的身高数据，一般会假设身高是符合正态分布(μ,σ)，待求的是这两个参数具体的值。</p>\n<p>那么，如何基于已有的样本数据来求得模型中参数得具体值呢？</p>\n<p>极大似然估计的意思是说，你只要能使L(x1,x2，…，xi，…，xn,θ1,θ2，…，θi，…，θn )最大，你的参数θ1,θ2，…，θi，…，θn 就是有效的。<br>以身高样本为例（假定身高样本是独立同分布的）。即当L(x1,x2，…，xi，…，xn,μ,σ )最大时，(μ,σ)被估计的是准确的。</p>\n<p>求极大似然函数估计值的一般步骤：</p>\n<ol>\n<li>写出似然函数；</li>\n<li>对似然函数取对数，并整理；</li>\n<li>求导数 ；</li>\n<li>导数为零时，似然函数取得极大值 。</li>\n</ol>\n<hr>\n<p>THE END.</p>"},{"title":"KNN","date":"2018-02-22T16:00:00.000Z","_content":"\n#### K邻近算法，或者说K最近邻(kNN，k-NearestNeighbor)分类算法\n\nk-近邻算法（kNN，k-NearestNeighbor），是最简单的机器学习分类算法之一，其核心思想在于用距离目标最近的k个样本数据的分类来代表目标的分类（这k个样本数据和目标数据最为相似）。kNN是一种监督分类算法。\n\n<!--more-->\n\n#### 算法描述\n\n1. 计算分类未知数据 x_new 与训练样本集数据 x 的欧氏距离 distance\n2. 将 distance 递增排序\n3. 选取 distance 的前 k 个点\n4. 选取前 k 个点中，出现频率最高的类别 y 作为 x_new的分类\n\n#### 代码实现\n\n```python\nimport numpy as np\n\ndef createDataSet():\n    group = np.array([[1, 1.1], [1, 1], [0, 0], [0, 0.1]])\n    labels = ['A', 'A', 'B', 'B']\n    return group, labels\n\n\"\"\"\n定义knn算法分类器函数\n:param inX: 测试数据\n:param dataSet: 训练数据\n:param labels: 分类类别\n:param k: k值\n:return: 所属分类\n\"\"\"\ndef classify(inX, dataSet, labels, k):\n    dataSetSize = dataSet.shape[0]  #shape（m, n）m列n个特征\n    diffMat = np.tile(inX, (dataSetSize, 1)) - dataSet\n    sqDiffMat = diffMat ** 2\n    sqDistances = sqDiffMat.sum(axis=1)\n    distances = sqDistances ** 0.5  #欧式距离\n    sortedDistIndicies = distances.argsort()  #排序并返回index\n\n    classCount = {}\n    for i in range(k):\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1 #default 0\n\n    sortedClassCount = sorted(classCount.items(), key=lambda d:d[1], reverse=True)\n    return sortedClassCount[0][0]\n```\n\n#### 测试\n\n```python\nif __name__ == '__main__':\n    dataSet, labels = createDataSet()\n    r = classify([0, 0.2], dataSet, labels, 3)\n    print(r)\n```\n\n输出 `B`\n\n\n- - -\nTHE END.\n","source":"_posts/2018-02-23_knn.md","raw":"---\ntitle: KNN\ndate: 2018-02-23\ncategories: 机器学习\ntags: [KNN]\n---\n\n#### K邻近算法，或者说K最近邻(kNN，k-NearestNeighbor)分类算法\n\nk-近邻算法（kNN，k-NearestNeighbor），是最简单的机器学习分类算法之一，其核心思想在于用距离目标最近的k个样本数据的分类来代表目标的分类（这k个样本数据和目标数据最为相似）。kNN是一种监督分类算法。\n\n<!--more-->\n\n#### 算法描述\n\n1. 计算分类未知数据 x_new 与训练样本集数据 x 的欧氏距离 distance\n2. 将 distance 递增排序\n3. 选取 distance 的前 k 个点\n4. 选取前 k 个点中，出现频率最高的类别 y 作为 x_new的分类\n\n#### 代码实现\n\n```python\nimport numpy as np\n\ndef createDataSet():\n    group = np.array([[1, 1.1], [1, 1], [0, 0], [0, 0.1]])\n    labels = ['A', 'A', 'B', 'B']\n    return group, labels\n\n\"\"\"\n定义knn算法分类器函数\n:param inX: 测试数据\n:param dataSet: 训练数据\n:param labels: 分类类别\n:param k: k值\n:return: 所属分类\n\"\"\"\ndef classify(inX, dataSet, labels, k):\n    dataSetSize = dataSet.shape[0]  #shape（m, n）m列n个特征\n    diffMat = np.tile(inX, (dataSetSize, 1)) - dataSet\n    sqDiffMat = diffMat ** 2\n    sqDistances = sqDiffMat.sum(axis=1)\n    distances = sqDistances ** 0.5  #欧式距离\n    sortedDistIndicies = distances.argsort()  #排序并返回index\n\n    classCount = {}\n    for i in range(k):\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1 #default 0\n\n    sortedClassCount = sorted(classCount.items(), key=lambda d:d[1], reverse=True)\n    return sortedClassCount[0][0]\n```\n\n#### 测试\n\n```python\nif __name__ == '__main__':\n    dataSet, labels = createDataSet()\n    r = classify([0, 0.2], dataSet, labels, 3)\n    print(r)\n```\n\n输出 `B`\n\n\n- - -\nTHE END.\n","slug":"2018-02-23_knn","published":1,"updated":"2018-03-27T07:40:53.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsbaa0026uro5fly1bhoo","content":"<h4 id=\"K邻近算法，或者说K最近邻-kNN，k-NearestNeighbor-分类算法\"><a href=\"#K邻近算法，或者说K最近邻-kNN，k-NearestNeighbor-分类算法\" class=\"headerlink\" title=\"K邻近算法，或者说K最近邻(kNN，k-NearestNeighbor)分类算法\"></a>K邻近算法，或者说K最近邻(kNN，k-NearestNeighbor)分类算法</h4><p>k-近邻算法（kNN，k-NearestNeighbor），是最简单的机器学习分类算法之一，其核心思想在于用距离目标最近的k个样本数据的分类来代表目标的分类（这k个样本数据和目标数据最为相似）。kNN是一种监督分类算法。</p>\n<a id=\"more\"></a>\n<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><ol>\n<li>计算分类未知数据 x_new 与训练样本集数据 x 的欧氏距离 distance</li>\n<li>将 distance 递增排序</li>\n<li>选取 distance 的前 k 个点</li>\n<li>选取前 k 个点中，出现频率最高的类别 y 作为 x_new的分类</li>\n</ol>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createDataSet</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    group = np.array([[<span class=\"number\">1</span>, <span class=\"number\">1.1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, <span class=\"number\">0.1</span>]])</div><div class=\"line\">    labels = [<span class=\"string\">'A'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'B'</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> group, labels</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">定义knn算法分类器函数</span></div><div class=\"line\"><span class=\"string\">:param inX: 测试数据</span></div><div class=\"line\"><span class=\"string\">:param dataSet: 训练数据</span></div><div class=\"line\"><span class=\"string\">:param labels: 分类类别</span></div><div class=\"line\"><span class=\"string\">:param k: k值</span></div><div class=\"line\"><span class=\"string\">:return: 所属分类</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify</span><span class=\"params\">(inX, dataSet, labels, k)</span>:</span></div><div class=\"line\">    dataSetSize = dataSet.shape[<span class=\"number\">0</span>]  <span class=\"comment\">#shape（m, n）m列n个特征</span></div><div class=\"line\">    diffMat = np.tile(inX, (dataSetSize, <span class=\"number\">1</span>)) - dataSet</div><div class=\"line\">    sqDiffMat = diffMat ** <span class=\"number\">2</span></div><div class=\"line\">    sqDistances = sqDiffMat.sum(axis=<span class=\"number\">1</span>)</div><div class=\"line\">    distances = sqDistances ** <span class=\"number\">0.5</span>  <span class=\"comment\">#欧式距离</span></div><div class=\"line\">    sortedDistIndicies = distances.argsort()  <span class=\"comment\">#排序并返回index</span></div><div class=\"line\"></div><div class=\"line\">    classCount = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</div><div class=\"line\">        voteIlabel = labels[sortedDistIndicies[i]]</div><div class=\"line\">        classCount[voteIlabel] = classCount.get(voteIlabel, <span class=\"number\">0</span>) + <span class=\"number\">1</span> <span class=\"comment\">#default 0</span></div><div class=\"line\"></div><div class=\"line\">    sortedClassCount = sorted(classCount.items(), key=<span class=\"keyword\">lambda</span> d:d[<span class=\"number\">1</span>], reverse=<span class=\"keyword\">True</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> sortedClassCount[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    dataSet, labels = createDataSet()</div><div class=\"line\">    r = classify([<span class=\"number\">0</span>, <span class=\"number\">0.2</span>], dataSet, labels, <span class=\"number\">3</span>)</div><div class=\"line\">    print(r)</div></pre></td></tr></table></figure>\n<p>输出 <code>B</code></p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"K邻近算法，或者说K最近邻-kNN，k-NearestNeighbor-分类算法\"><a href=\"#K邻近算法，或者说K最近邻-kNN，k-NearestNeighbor-分类算法\" class=\"headerlink\" title=\"K邻近算法，或者说K最近邻(kNN，k-NearestNeighbor)分类算法\"></a>K邻近算法，或者说K最近邻(kNN，k-NearestNeighbor)分类算法</h4><p>k-近邻算法（kNN，k-NearestNeighbor），是最简单的机器学习分类算法之一，其核心思想在于用距离目标最近的k个样本数据的分类来代表目标的分类（这k个样本数据和目标数据最为相似）。kNN是一种监督分类算法。</p>","more":"<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><ol>\n<li>计算分类未知数据 x_new 与训练样本集数据 x 的欧氏距离 distance</li>\n<li>将 distance 递增排序</li>\n<li>选取 distance 的前 k 个点</li>\n<li>选取前 k 个点中，出现频率最高的类别 y 作为 x_new的分类</li>\n</ol>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createDataSet</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    group = np.array([[<span class=\"number\">1</span>, <span class=\"number\">1.1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, <span class=\"number\">0.1</span>]])</div><div class=\"line\">    labels = [<span class=\"string\">'A'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'B'</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> group, labels</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">定义knn算法分类器函数</span></div><div class=\"line\"><span class=\"string\">:param inX: 测试数据</span></div><div class=\"line\"><span class=\"string\">:param dataSet: 训练数据</span></div><div class=\"line\"><span class=\"string\">:param labels: 分类类别</span></div><div class=\"line\"><span class=\"string\">:param k: k值</span></div><div class=\"line\"><span class=\"string\">:return: 所属分类</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify</span><span class=\"params\">(inX, dataSet, labels, k)</span>:</span></div><div class=\"line\">    dataSetSize = dataSet.shape[<span class=\"number\">0</span>]  <span class=\"comment\">#shape（m, n）m列n个特征</span></div><div class=\"line\">    diffMat = np.tile(inX, (dataSetSize, <span class=\"number\">1</span>)) - dataSet</div><div class=\"line\">    sqDiffMat = diffMat ** <span class=\"number\">2</span></div><div class=\"line\">    sqDistances = sqDiffMat.sum(axis=<span class=\"number\">1</span>)</div><div class=\"line\">    distances = sqDistances ** <span class=\"number\">0.5</span>  <span class=\"comment\">#欧式距离</span></div><div class=\"line\">    sortedDistIndicies = distances.argsort()  <span class=\"comment\">#排序并返回index</span></div><div class=\"line\"></div><div class=\"line\">    classCount = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</div><div class=\"line\">        voteIlabel = labels[sortedDistIndicies[i]]</div><div class=\"line\">        classCount[voteIlabel] = classCount.get(voteIlabel, <span class=\"number\">0</span>) + <span class=\"number\">1</span> <span class=\"comment\">#default 0</span></div><div class=\"line\"></div><div class=\"line\">    sortedClassCount = sorted(classCount.items(), key=<span class=\"keyword\">lambda</span> d:d[<span class=\"number\">1</span>], reverse=<span class=\"keyword\">True</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> sortedClassCount[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    dataSet, labels = createDataSet()</div><div class=\"line\">    r = classify([<span class=\"number\">0</span>, <span class=\"number\">0.2</span>], dataSet, labels, <span class=\"number\">3</span>)</div><div class=\"line\">    print(r)</div></pre></td></tr></table></figure>\n<p>输出 <code>B</code></p>\n<hr>\n<p>THE END.</p>"},{"title":"Matplotlib","date":"2018-05-02T16:00:00.000Z","_content":"\n\n#### 画一个简单的图形\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 50) #生成一个包含 50 个元素的数组，这 50 个元素均匀的分布在 [0, 2pi] 的区间上。\nplt.plot(x, np.sin(x)) # 如果没有第一个参数 x，图形的 x 坐标默认为数组的索引\nplt.plot(x, np.sin(x),\n         x, np.sin(2 * x)) #绘制两个数据集\nplt.show() # 显示图形\n```\n\n![0503_simple](/src/imgs/1805/0503_simple.png)\n\n<!--more-->\n\n#### 自定义图形的外观\n\n```python\nx = np.linspace(0, 2 * np.pi, 50)\nplt.plot(x, np.sin(x), 'r-o',\n         x, np.cos(x), 'g--') #'r' 和 'g' 代表线条的颜色，'-o' 代表包含实心点标记的实线，'--' 代表虚线\nplt.show()\n```\n\n![0503_style](/src/imgs/1805/0503_style.png)\n\n#### 使用子图，可以在一个窗口绘制多张图。\n\n```python\nx = np.linspace(0, 2 * np.pi, 50)\nplt.subplot(2, 1, 1) # （行，列，活跃区）\nplt.plot(x, np.sin(x), 'r')\nplt.subplot(2, 1, 2) #在调用 plot() 函数之前需要先调用 subplot() 函数。\nplt.plot(x, np.cos(x), 'g')\nplt.show()\n```\n\n![0503_child](/src/imgs/1805/0503_child.png)\n\n#### 简单散点图\n\n```python\nx = np.linspace(0, 2 * np.pi, 50)\ny = np.sin(x)\nplt.scatter(x,y) #通过 plot 命令并将线的样式设置为 'bo' 也可以实现同样的效果。实际设置'o'就可以，'bo'表示蓝色的点。\nplt.show()\n```\n\n![0503_sandian](/src/imgs/1805/0503_sandian.png)\n\n#### 直方图\n\n```python\nx = np.random.randn(1000)\nplt.hist(x, 50)\nplt.show()\n```\n\n![0503_zhifang](/src/imgs/1805/0503_zhifang.png)\n\n#### 彩色映射散点图\n\n```python\nx = np.random.rand(1000)\ny = np.random.rand(1000)\nsize = np.random.rand(1000) * 50\ncolour = np.random.rand(1000)\nplt.scatter(x, y, size, colour)\nplt.colorbar() #加了一个颜色栏。\nplt.show()\n```\n\n![0503_color_sandian](/src/imgs/1805/0503_color_sandian.png)\n\n#### 添加标题，坐标轴标记和图例\n\n```python\nx = np.linspace(0, 2 * np.pi, 50)\nplt.plot(x, np.sin(x), 'r-x', label='Sin(x)')\nplt.plot(x, np.cos(x), 'g-^', label='Cos(x)')\nplt.legend() # 应用label，展示图例\nplt.xlabel('Rads') # 给 x 轴添加标签\nplt.ylabel('Amplitude') # 给 y 轴添加标签\nplt.title('Sin and Cos Waves') # 添加图形标题\nplt.show()\n```\n\n![0503_label](/src/imgs/1805/0503_label.png)\n\n#### 饼图\n```python\nslices = [7,2,2,13]\nactivities = ['sleeping','eating','working','playing']\ncols = ['c','m','r','b']\n\nplt.pie(slices,\n        labels=activities,\n        colors=cols,\n        startangle=90,\n        shadow= True,\n        explode=(0,0.1,0,0),\n        autopct='%1.1f%%')\n\nplt.title('Interesting Graph\\nCheck it out')\nplt.show()\n```\n\n![0503_pie](/src/imgs/1805/0503_pie.png)\n\n\n#### 从文件读取数据\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\n%matplotlib inline\nimport csv\n\nx = []\ny = []\n\nwith open('example.txt','r') as csvfile:\n    plots = csv.reader(csvfile, delimiter=',')\n    for row in plots:\n        x.append(int(row[0]))\n        y.append(int(row[1]))\n\nplt.plot(x,y, label='Loaded from file!')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Interesting Graph\\nCheck it out')\nplt.legend()\nplt.show()\n```\n\n![0503_read_file_data](/src/imgs/1805/0503_read_file_data.png)\n\n- - -\n\n附：\n[code](/raw/code/matplotlib/matplotlibdemo.ipynb)\n\n- - -\nTHE END.\n","source":"_posts/2018-05-03_Matplotlib.md","raw":"---\ntitle: Matplotlib\ndate: 2018-05-03\ncategories: 机器学习\ntags: [Matplotlib]\n---\n\n\n#### 画一个简单的图形\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 50) #生成一个包含 50 个元素的数组，这 50 个元素均匀的分布在 [0, 2pi] 的区间上。\nplt.plot(x, np.sin(x)) # 如果没有第一个参数 x，图形的 x 坐标默认为数组的索引\nplt.plot(x, np.sin(x),\n         x, np.sin(2 * x)) #绘制两个数据集\nplt.show() # 显示图形\n```\n\n![0503_simple](/src/imgs/1805/0503_simple.png)\n\n<!--more-->\n\n#### 自定义图形的外观\n\n```python\nx = np.linspace(0, 2 * np.pi, 50)\nplt.plot(x, np.sin(x), 'r-o',\n         x, np.cos(x), 'g--') #'r' 和 'g' 代表线条的颜色，'-o' 代表包含实心点标记的实线，'--' 代表虚线\nplt.show()\n```\n\n![0503_style](/src/imgs/1805/0503_style.png)\n\n#### 使用子图，可以在一个窗口绘制多张图。\n\n```python\nx = np.linspace(0, 2 * np.pi, 50)\nplt.subplot(2, 1, 1) # （行，列，活跃区）\nplt.plot(x, np.sin(x), 'r')\nplt.subplot(2, 1, 2) #在调用 plot() 函数之前需要先调用 subplot() 函数。\nplt.plot(x, np.cos(x), 'g')\nplt.show()\n```\n\n![0503_child](/src/imgs/1805/0503_child.png)\n\n#### 简单散点图\n\n```python\nx = np.linspace(0, 2 * np.pi, 50)\ny = np.sin(x)\nplt.scatter(x,y) #通过 plot 命令并将线的样式设置为 'bo' 也可以实现同样的效果。实际设置'o'就可以，'bo'表示蓝色的点。\nplt.show()\n```\n\n![0503_sandian](/src/imgs/1805/0503_sandian.png)\n\n#### 直方图\n\n```python\nx = np.random.randn(1000)\nplt.hist(x, 50)\nplt.show()\n```\n\n![0503_zhifang](/src/imgs/1805/0503_zhifang.png)\n\n#### 彩色映射散点图\n\n```python\nx = np.random.rand(1000)\ny = np.random.rand(1000)\nsize = np.random.rand(1000) * 50\ncolour = np.random.rand(1000)\nplt.scatter(x, y, size, colour)\nplt.colorbar() #加了一个颜色栏。\nplt.show()\n```\n\n![0503_color_sandian](/src/imgs/1805/0503_color_sandian.png)\n\n#### 添加标题，坐标轴标记和图例\n\n```python\nx = np.linspace(0, 2 * np.pi, 50)\nplt.plot(x, np.sin(x), 'r-x', label='Sin(x)')\nplt.plot(x, np.cos(x), 'g-^', label='Cos(x)')\nplt.legend() # 应用label，展示图例\nplt.xlabel('Rads') # 给 x 轴添加标签\nplt.ylabel('Amplitude') # 给 y 轴添加标签\nplt.title('Sin and Cos Waves') # 添加图形标题\nplt.show()\n```\n\n![0503_label](/src/imgs/1805/0503_label.png)\n\n#### 饼图\n```python\nslices = [7,2,2,13]\nactivities = ['sleeping','eating','working','playing']\ncols = ['c','m','r','b']\n\nplt.pie(slices,\n        labels=activities,\n        colors=cols,\n        startangle=90,\n        shadow= True,\n        explode=(0,0.1,0,0),\n        autopct='%1.1f%%')\n\nplt.title('Interesting Graph\\nCheck it out')\nplt.show()\n```\n\n![0503_pie](/src/imgs/1805/0503_pie.png)\n\n\n#### 从文件读取数据\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\n%matplotlib inline\nimport csv\n\nx = []\ny = []\n\nwith open('example.txt','r') as csvfile:\n    plots = csv.reader(csvfile, delimiter=',')\n    for row in plots:\n        x.append(int(row[0]))\n        y.append(int(row[1]))\n\nplt.plot(x,y, label='Loaded from file!')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Interesting Graph\\nCheck it out')\nplt.legend()\nplt.show()\n```\n\n![0503_read_file_data](/src/imgs/1805/0503_read_file_data.png)\n\n- - -\n\n附：\n[code](/raw/code/matplotlib/matplotlibdemo.ipynb)\n\n- - -\nTHE END.\n","slug":"2018-05-03_Matplotlib","published":1,"updated":"2018-05-07T03:08:07.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsbb80031uro5uajfa846","content":"<h4 id=\"画一个简单的图形\"><a href=\"#画一个简单的图形\" class=\"headerlink\" title=\"画一个简单的图形\"></a>画一个简单的图形</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>) <span class=\"comment\">#生成一个包含 50 个元素的数组，这 50 个元素均匀的分布在 [0, 2pi] 的区间上。</span></div><div class=\"line\">plt.plot(x, np.sin(x)) <span class=\"comment\"># 如果没有第一个参数 x，图形的 x 坐标默认为数组的索引</span></div><div class=\"line\">plt.plot(x, np.sin(x),</div><div class=\"line\">         x, np.sin(<span class=\"number\">2</span> * x)) <span class=\"comment\">#绘制两个数据集</span></div><div class=\"line\">plt.show() <span class=\"comment\"># 显示图形</span></div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_simple.png\" alt=\"0503_simple\"></p>\n<a id=\"more\"></a>\n<h4 id=\"自定义图形的外观\"><a href=\"#自定义图形的外观\" class=\"headerlink\" title=\"自定义图形的外观\"></a>自定义图形的外观</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>)</div><div class=\"line\">plt.plot(x, np.sin(x), <span class=\"string\">'r-o'</span>,</div><div class=\"line\">         x, np.cos(x), <span class=\"string\">'g--'</span>) <span class=\"comment\">#'r' 和 'g' 代表线条的颜色，'-o' 代表包含实心点标记的实线，'--' 代表虚线</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_style.png\" alt=\"0503_style\"></p>\n<h4 id=\"使用子图，可以在一个窗口绘制多张图。\"><a href=\"#使用子图，可以在一个窗口绘制多张图。\" class=\"headerlink\" title=\"使用子图，可以在一个窗口绘制多张图。\"></a>使用子图，可以在一个窗口绘制多张图。</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>)</div><div class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"comment\"># （行，列，活跃区）</span></div><div class=\"line\">plt.plot(x, np.sin(x), <span class=\"string\">'r'</span>)</div><div class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">#在调用 plot() 函数之前需要先调用 subplot() 函数。</span></div><div class=\"line\">plt.plot(x, np.cos(x), <span class=\"string\">'g'</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_child.png\" alt=\"0503_child\"></p>\n<h4 id=\"简单散点图\"><a href=\"#简单散点图\" class=\"headerlink\" title=\"简单散点图\"></a>简单散点图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>)</div><div class=\"line\">y = np.sin(x)</div><div class=\"line\">plt.scatter(x,y) <span class=\"comment\">#通过 plot 命令并将线的样式设置为 'bo' 也可以实现同样的效果。实际设置'o'就可以，'bo'表示蓝色的点。</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_sandian.png\" alt=\"0503_sandian\"></p>\n<h4 id=\"直方图\"><a href=\"#直方图\" class=\"headerlink\" title=\"直方图\"></a>直方图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.random.randn(<span class=\"number\">1000</span>)</div><div class=\"line\">plt.hist(x, <span class=\"number\">50</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_zhifang.png\" alt=\"0503_zhifang\"></p>\n<h4 id=\"彩色映射散点图\"><a href=\"#彩色映射散点图\" class=\"headerlink\" title=\"彩色映射散点图\"></a>彩色映射散点图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.random.rand(<span class=\"number\">1000</span>)</div><div class=\"line\">y = np.random.rand(<span class=\"number\">1000</span>)</div><div class=\"line\">size = np.random.rand(<span class=\"number\">1000</span>) * <span class=\"number\">50</span></div><div class=\"line\">colour = np.random.rand(<span class=\"number\">1000</span>)</div><div class=\"line\">plt.scatter(x, y, size, colour)</div><div class=\"line\">plt.colorbar() <span class=\"comment\">#加了一个颜色栏。</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_color_sandian.png\" alt=\"0503_color_sandian\"></p>\n<h4 id=\"添加标题，坐标轴标记和图例\"><a href=\"#添加标题，坐标轴标记和图例\" class=\"headerlink\" title=\"添加标题，坐标轴标记和图例\"></a>添加标题，坐标轴标记和图例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>)</div><div class=\"line\">plt.plot(x, np.sin(x), <span class=\"string\">'r-x'</span>, label=<span class=\"string\">'Sin(x)'</span>)</div><div class=\"line\">plt.plot(x, np.cos(x), <span class=\"string\">'g-^'</span>, label=<span class=\"string\">'Cos(x)'</span>)</div><div class=\"line\">plt.legend() <span class=\"comment\"># 应用label，展示图例</span></div><div class=\"line\">plt.xlabel(<span class=\"string\">'Rads'</span>) <span class=\"comment\"># 给 x 轴添加标签</span></div><div class=\"line\">plt.ylabel(<span class=\"string\">'Amplitude'</span>) <span class=\"comment\"># 给 y 轴添加标签</span></div><div class=\"line\">plt.title(<span class=\"string\">'Sin and Cos Waves'</span>) <span class=\"comment\"># 添加图形标题</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_label.png\" alt=\"0503_label\"></p>\n<h4 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">slices = [<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">13</span>]</div><div class=\"line\">activities = [<span class=\"string\">'sleeping'</span>,<span class=\"string\">'eating'</span>,<span class=\"string\">'working'</span>,<span class=\"string\">'playing'</span>]</div><div class=\"line\">cols = [<span class=\"string\">'c'</span>,<span class=\"string\">'m'</span>,<span class=\"string\">'r'</span>,<span class=\"string\">'b'</span>]</div><div class=\"line\"></div><div class=\"line\">plt.pie(slices,</div><div class=\"line\">        labels=activities,</div><div class=\"line\">        colors=cols,</div><div class=\"line\">        startangle=<span class=\"number\">90</span>,</div><div class=\"line\">        shadow= <span class=\"keyword\">True</span>,</div><div class=\"line\">        explode=(<span class=\"number\">0</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>),</div><div class=\"line\">        autopct=<span class=\"string\">'%1.1f%%'</span>)</div><div class=\"line\"></div><div class=\"line\">plt.title(<span class=\"string\">'Interesting Graph\\nCheck it out'</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_pie.png\" alt=\"0503_pie\"></p>\n<h4 id=\"从文件读取数据\"><a href=\"#从文件读取数据\" class=\"headerlink\" title=\"从文件读取数据\"></a>从文件读取数据</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\">%matplotlib inline</div><div class=\"line\"><span class=\"keyword\">import</span> csv</div><div class=\"line\"></div><div class=\"line\">x = []</div><div class=\"line\">y = []</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'example.txt'</span>,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> csvfile:</div><div class=\"line\">    plots = csv.reader(csvfile, delimiter=<span class=\"string\">','</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> plots:</div><div class=\"line\">        x.append(int(row[<span class=\"number\">0</span>]))</div><div class=\"line\">        y.append(int(row[<span class=\"number\">1</span>]))</div><div class=\"line\"></div><div class=\"line\">plt.plot(x,y, label=<span class=\"string\">'Loaded from file!'</span>)</div><div class=\"line\">plt.xlabel(<span class=\"string\">'x'</span>)</div><div class=\"line\">plt.ylabel(<span class=\"string\">'y'</span>)</div><div class=\"line\">plt.title(<span class=\"string\">'Interesting Graph\\nCheck it out'</span>)</div><div class=\"line\">plt.legend()</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_read_file_data.png\" alt=\"0503_read_file_data\"></p>\n<hr>\n<p>附：<br><a href=\"/raw/code/matplotlib/matplotlibdemo.ipynb\">code</a></p>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"画一个简单的图形\"><a href=\"#画一个简单的图形\" class=\"headerlink\" title=\"画一个简单的图形\"></a>画一个简单的图形</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>) <span class=\"comment\">#生成一个包含 50 个元素的数组，这 50 个元素均匀的分布在 [0, 2pi] 的区间上。</span></div><div class=\"line\">plt.plot(x, np.sin(x)) <span class=\"comment\"># 如果没有第一个参数 x，图形的 x 坐标默认为数组的索引</span></div><div class=\"line\">plt.plot(x, np.sin(x),</div><div class=\"line\">         x, np.sin(<span class=\"number\">2</span> * x)) <span class=\"comment\">#绘制两个数据集</span></div><div class=\"line\">plt.show() <span class=\"comment\"># 显示图形</span></div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_simple.png\" alt=\"0503_simple\"></p>","more":"<h4 id=\"自定义图形的外观\"><a href=\"#自定义图形的外观\" class=\"headerlink\" title=\"自定义图形的外观\"></a>自定义图形的外观</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>)</div><div class=\"line\">plt.plot(x, np.sin(x), <span class=\"string\">'r-o'</span>,</div><div class=\"line\">         x, np.cos(x), <span class=\"string\">'g--'</span>) <span class=\"comment\">#'r' 和 'g' 代表线条的颜色，'-o' 代表包含实心点标记的实线，'--' 代表虚线</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_style.png\" alt=\"0503_style\"></p>\n<h4 id=\"使用子图，可以在一个窗口绘制多张图。\"><a href=\"#使用子图，可以在一个窗口绘制多张图。\" class=\"headerlink\" title=\"使用子图，可以在一个窗口绘制多张图。\"></a>使用子图，可以在一个窗口绘制多张图。</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>)</div><div class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"comment\"># （行，列，活跃区）</span></div><div class=\"line\">plt.plot(x, np.sin(x), <span class=\"string\">'r'</span>)</div><div class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">#在调用 plot() 函数之前需要先调用 subplot() 函数。</span></div><div class=\"line\">plt.plot(x, np.cos(x), <span class=\"string\">'g'</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_child.png\" alt=\"0503_child\"></p>\n<h4 id=\"简单散点图\"><a href=\"#简单散点图\" class=\"headerlink\" title=\"简单散点图\"></a>简单散点图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>)</div><div class=\"line\">y = np.sin(x)</div><div class=\"line\">plt.scatter(x,y) <span class=\"comment\">#通过 plot 命令并将线的样式设置为 'bo' 也可以实现同样的效果。实际设置'o'就可以，'bo'表示蓝色的点。</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_sandian.png\" alt=\"0503_sandian\"></p>\n<h4 id=\"直方图\"><a href=\"#直方图\" class=\"headerlink\" title=\"直方图\"></a>直方图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.random.randn(<span class=\"number\">1000</span>)</div><div class=\"line\">plt.hist(x, <span class=\"number\">50</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_zhifang.png\" alt=\"0503_zhifang\"></p>\n<h4 id=\"彩色映射散点图\"><a href=\"#彩色映射散点图\" class=\"headerlink\" title=\"彩色映射散点图\"></a>彩色映射散点图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.random.rand(<span class=\"number\">1000</span>)</div><div class=\"line\">y = np.random.rand(<span class=\"number\">1000</span>)</div><div class=\"line\">size = np.random.rand(<span class=\"number\">1000</span>) * <span class=\"number\">50</span></div><div class=\"line\">colour = np.random.rand(<span class=\"number\">1000</span>)</div><div class=\"line\">plt.scatter(x, y, size, colour)</div><div class=\"line\">plt.colorbar() <span class=\"comment\">#加了一个颜色栏。</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_color_sandian.png\" alt=\"0503_color_sandian\"></p>\n<h4 id=\"添加标题，坐标轴标记和图例\"><a href=\"#添加标题，坐标轴标记和图例\" class=\"headerlink\" title=\"添加标题，坐标轴标记和图例\"></a>添加标题，坐标轴标记和图例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.linspace(<span class=\"number\">0</span>, <span class=\"number\">2</span> * np.pi, <span class=\"number\">50</span>)</div><div class=\"line\">plt.plot(x, np.sin(x), <span class=\"string\">'r-x'</span>, label=<span class=\"string\">'Sin(x)'</span>)</div><div class=\"line\">plt.plot(x, np.cos(x), <span class=\"string\">'g-^'</span>, label=<span class=\"string\">'Cos(x)'</span>)</div><div class=\"line\">plt.legend() <span class=\"comment\"># 应用label，展示图例</span></div><div class=\"line\">plt.xlabel(<span class=\"string\">'Rads'</span>) <span class=\"comment\"># 给 x 轴添加标签</span></div><div class=\"line\">plt.ylabel(<span class=\"string\">'Amplitude'</span>) <span class=\"comment\"># 给 y 轴添加标签</span></div><div class=\"line\">plt.title(<span class=\"string\">'Sin and Cos Waves'</span>) <span class=\"comment\"># 添加图形标题</span></div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_label.png\" alt=\"0503_label\"></p>\n<h4 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">slices = [<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">13</span>]</div><div class=\"line\">activities = [<span class=\"string\">'sleeping'</span>,<span class=\"string\">'eating'</span>,<span class=\"string\">'working'</span>,<span class=\"string\">'playing'</span>]</div><div class=\"line\">cols = [<span class=\"string\">'c'</span>,<span class=\"string\">'m'</span>,<span class=\"string\">'r'</span>,<span class=\"string\">'b'</span>]</div><div class=\"line\"></div><div class=\"line\">plt.pie(slices,</div><div class=\"line\">        labels=activities,</div><div class=\"line\">        colors=cols,</div><div class=\"line\">        startangle=<span class=\"number\">90</span>,</div><div class=\"line\">        shadow= <span class=\"keyword\">True</span>,</div><div class=\"line\">        explode=(<span class=\"number\">0</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>),</div><div class=\"line\">        autopct=<span class=\"string\">'%1.1f%%'</span>)</div><div class=\"line\"></div><div class=\"line\">plt.title(<span class=\"string\">'Interesting Graph\\nCheck it out'</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_pie.png\" alt=\"0503_pie\"></p>\n<h4 id=\"从文件读取数据\"><a href=\"#从文件读取数据\" class=\"headerlink\" title=\"从文件读取数据\"></a>从文件读取数据</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\">%matplotlib inline</div><div class=\"line\"><span class=\"keyword\">import</span> csv</div><div class=\"line\"></div><div class=\"line\">x = []</div><div class=\"line\">y = []</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'example.txt'</span>,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> csvfile:</div><div class=\"line\">    plots = csv.reader(csvfile, delimiter=<span class=\"string\">','</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> plots:</div><div class=\"line\">        x.append(int(row[<span class=\"number\">0</span>]))</div><div class=\"line\">        y.append(int(row[<span class=\"number\">1</span>]))</div><div class=\"line\"></div><div class=\"line\">plt.plot(x,y, label=<span class=\"string\">'Loaded from file!'</span>)</div><div class=\"line\">plt.xlabel(<span class=\"string\">'x'</span>)</div><div class=\"line\">plt.ylabel(<span class=\"string\">'y'</span>)</div><div class=\"line\">plt.title(<span class=\"string\">'Interesting Graph\\nCheck it out'</span>)</div><div class=\"line\">plt.legend()</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/src/imgs/1805/0503_read_file_data.png\" alt=\"0503_read_file_data\"></p>\n<hr>\n<p>附：<br><a href=\"/raw/code/matplotlib/matplotlibdemo.ipynb\">code</a></p>\n<hr>\n<p>THE END.</p>"},{"title":"Numpy","date":"2018-05-02T16:00:00.000Z","_content":"\n#### 一、创建ndarray\n\n```python\nimport numpy as np\na = np.array([1, 2, 3, 4])\nb = np.array([[1, 2, 3, 4],[4, 5, 6, 7], [7, 8, 9, 10]])\n\n# np.ones(x):创建一个长度为x，且元素全为1的ndarray\nc = np.ones(2,dtype = np.int)\n[1, 1]\n\n# np.ones(x，y):创建一个长度为x行y列，且元素全为1的ndarray\nd = np.ones((3,2))\n[[1., 1.],\n [1., 1.],\n [1., 1.]]\n\n# np.zeros(x,y):创建一个x行y列且元素全为0的ndarray\ne = np.zeros((3,2))\n[[0., 0.],\n [0., 0.],\n [0., 0.]]\n\n# np.empty(x,y):创建一个x行y列且未初始化的ndarray(随机数填充数据)\nf = np.empty((1,2), dtype =  int)\n[[4607182418800017408, 4607182418800017408]]\n\n# 使用 np.arange 生成连续元素的ndarray\ng = np.arange(6) #从0到6，默认间隔(步长)为1\n[0, 1, 2, 3, 4, 5]\n\nh = np.arange(0,6,2) #从0到6，间隔为2，不包括6\n[0, 2, 4]\n```\n\n<!--more-->\n\n```python\n# 使用 np.linspace(start, stop, num, endpoint, retstep, dtype) 生成ndarray,num:生成ndarray的元素个数\na = np.linspace(1.0, 2.0, num  = 10)\n[1.,1.11111111,1.22222222,1.33333333,1.44444444,1.55555556,1.66666667,1.77777778,1.88888889,2.]\n\n# np.logspace(start, stop, num, endpoint, base, dtype) ： 返回一个 ndarray 对象，其实就是linespace生成的元素值对应的base作为底数的幂\ny = np.logspace(1.0,  2.0, num =  10)\n[ 10.,12.91549665,16.68100537,21.5443469,27.82559402,35.93813664,46.41588834,59.94842503,77.42636827,100.]\n```\n\n我们来看一下上面生成的两个ndarray所画出的函数是不是10的幂函数图像：\n\n![0506_numpy_logspace](/src/imgs/1805/0506_numpy_logspace.png)\n\n对应代码：\n```python\nplt.subplot(2, 1, 1)\nplt.xlabel('linspace')\nplt.ylabel('logspace')\nplt.plot(a,b,'b-',label='logspace')\nplt.legend()\nplt.subplot(2, 1, 2)\nplt.plot(a,np.power(10,a),'r-',label='10^a')\nplt.legend()\nplt.show()\n```\n\n```python\n# np.fromiter(iterable, dtype, count = -1) : 从任何可迭代对象构建一个ndarray对象\nlist = range(5)\nit = iter(list)\n# 使用迭代器创建 ndarray\nx = np.fromiter(it, dtype = int)\n[0 1 2 3 4]\n\n# np.frombuffer():此函数将缓冲区解释为一维ndarray。\n但是参数是String类型的会报错误，原因如下：\nhttps://stackoverflow.com/questions/43362986/numpy-frombuffer-attributeerror-str-object-has-no-attribute-buffer\n```\n\n#### 二、ndarray的属性\n\n```python\n# array.size ndarray元素个数\na.size\n4\n\n# array.dtype ndarray元素的类型\na.dtype\ndtype('int64')\n\n# array.itemsize ndarray每个元素所占字节大小\na.itemsize\n8 # int64类型大小为8字节\n\n# array.ndim ndarray纬度\na.nidm\n1\nb.ndim\n2\n\n# array.shape ：ndarray各个维度的长度\na.shape\n(4,)\nb.shape\n(3,4)\n```\n\n#### 三、ndarray操作\n\n##### 单个ndarray操作\n\n```python\n# array.sum()：求ndarray所有元素的和值。也可以加上axis参数，求各行或者各列的元素和值\n# array.min()：求ndarray所有元素中的最小值。也可以加上axis参数，求各行或者各列的元素最小值\n# array.max()：求ndarray所有元素中的最大值。也可以加上axis参数，求各行或者各列的元素最大值\n\n# array.shape = x,y : 通过改变ndarray的shape值，可以改变ndarray的行数和列数.（总数必须一致）\nb.shape = 4,3\n[[ 1,  2,  3],\n [ 4,  4,  5],\n [ 6,  7,  7],\n [ 8,  9, 10]]\n\n# array.reshape(x,y) 的作用和指定shape值的效果一样，但是会返回一个新的ndarray，并且这个ndarray和原ndarray共享内存，无论修改哪一个ndarray都会引起另外一个ndarray的变化\nb.reshape(3,4)\n\n# array.resize(x,y) 用于原地设置形状,也就是修改的是原ndarray。而reshape和shape都是修改之后返回一个新ndarray\nb.resize(2,6)\n[[ 1, -1,  4,  6,  7,  9],\n [ 2,  4,  5,  7,  8, 10]]\n\n# array.ravel() 将ndarray展开，创建视图,视图和原ndarray共享内存，无论修改哪一个ndarray都会引起另外一个ndarray的变化\ni = b.ravel()\n[ 1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  9, 10]\n\n# array.flatten() 将ndarray展开，创建副本,副本修改不影响原ndarray变化\nj = b.flatten()\n[ 1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  9, 10]\n\n# array.transpose() 用于转置矩阵\nk = b.transpose()\n[[ 1,  4,  7],\n [ 2,  5,  8],\n [-1,  6,  9],\n [ 4,  7, 10]]\n```\n\n##### 多个ndarray操作\n\n```python\n# np.vstack(a1,a2) : 纵向（vertical）合并两个ndarray\na1 = np.array([1,2,3])\na2 = np.array([4,5,6])\nnp.vstack((a1,a2))\n[[1, 2, 3],\n [4, 5, 6]]\n\n# np.hstack(a1,a2) : 横向（horizontal）合并两个ndarray\na1 = np.array([1,2,3])\na2 = np.array([4,5,6])\nnp.hstack((a1,a2))\n[1, 2, 3, 4, 5, 6]\n\n# np.stach((a1,a2),axis = 1) : axis可以设置堆叠的维度,默认是0，效果和vstack相同，如果设置为1，则是vstack的转置矩阵。\na1 = np.array([1,2,3])\na2 = np.array([4,5,6])\nnp.stack((a1,a2),axis = 1)\n[[1, 4],\n [2, 5],\n [3, 6]]\n```\n\n##### ndarray分割\n\n```python\n# np.vsplit(a,num) : 纵向分割\na= np.array([[0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8]])\nnp.vsplit(a,3)\n[array([[0, 1, 2]]), array([[3, 4, 5]]), array([[6, 7, 8]])]\n\n# np.hsplit(a,num) : 横向分割\na= np.array([[0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8]])\nnp.hsplit(a,3)\n[array([[0],[3],[6]]), array([[1],[4],[7]]), array([[2],[5],[8]])]\n\n# 也可使用np.split(a, 3, axis=1) 指定axis作为分割方向\n```\n\n#### 四、矩阵运算\n\n```python\n# ndarray相乘\n# *操作符：每个位置的元素对应相乘.术语广播\na = np.array([[2,3],[3,4]])\nb = np.array([[3,4],[5,6]])\na * b\n[[ 6, 12],\n [15, 24]]\n\na = np.array([[2,3],[3,4]])\nb = np.array([[3,4],[5,6]])\na+b\n[[ 5,  7],\n [ 8, 10]]\n\na = np.array([[2,3],[3,4]])\nb = np.array([[3,4],[5,6]])\na-b\n[[-1, -1],\n [-2, -2]]\n\na = np.array([[2,3],[3,4]])\nb = np.array([[3,4],[5,6]])\na>b\n[[False, False],\n [False, False]]\n\n# dot操作符：按照矩阵乘法规则相乘\na.dot(b) # 或者np.dot(a,b)\n[[21, 26],\n [29, 36]]\n\n# 使用 linalg 模块求逆矩阵。\nimport numpy.linalg as nla\nx = np.array([[1,1],[1,2]])\ny = nla.inv(x)\n[[ 2., -1.],\n [-1.,  1.]]\n```\n\nlinalg 还有其他多种功能。比如：trace:对角线元素之和， det:计算矩阵行列式，等。\n\n#### 五、ndarray数组的基本索引和切片\n\n##### ndarray的基本索引\n\n```python\nx = np.array([[1,2],[3,4],[5,6]])\nx[0]    # [1, 2]\nx[0][1] # 2 ,普通python数组的索引\nx[0,1]  # 2 ,同x[0][1],ndarray数组的索引\n```\n\n##### ndarray的切片\n\n```python\nx = np.array([1,2,3,4,5])\nx[1:3]  # [2, 3], 左闭右开的区间\nx[:3]   # [1,2,3], 左边默认为 0，仍然是左闭右开\nx[1:]   # [2,3,4,5], 右边默认为数组的长度，仍然是左闭右开\n\nx = np.array([[1,2],[3,4],[5,6]])\nx[:2]        # [[1, 2],[3, 4]],\nx[:2,:1]     # [[1],[3]]\nx[:2,:1] = 0 # 用标量赋值,x=[[0, 2],[0, 4],[5, 6]]\n```\n\n#### 六、其他用法\n\n```python\n# 使用 where 进行 ndarray 的条件应用\ncond = np.array([True,False,True,False])\nx = np.where(cond,-2,2)\n[-2,  2, -2,  2]\n\ncond = np.array([1,2,3,4])\nx = np.where(cond>2,-2,2)\n[ 2,  2, -2, -2]\n```\n\n- - -\nTHE END.\n","source":"_posts/2018-05-03_Numpy.md","raw":"---\ntitle: Numpy\ndate: 2018-05-03\ncategories: 机器学习\ntags: [Numpy]\n---\n\n#### 一、创建ndarray\n\n```python\nimport numpy as np\na = np.array([1, 2, 3, 4])\nb = np.array([[1, 2, 3, 4],[4, 5, 6, 7], [7, 8, 9, 10]])\n\n# np.ones(x):创建一个长度为x，且元素全为1的ndarray\nc = np.ones(2,dtype = np.int)\n[1, 1]\n\n# np.ones(x，y):创建一个长度为x行y列，且元素全为1的ndarray\nd = np.ones((3,2))\n[[1., 1.],\n [1., 1.],\n [1., 1.]]\n\n# np.zeros(x,y):创建一个x行y列且元素全为0的ndarray\ne = np.zeros((3,2))\n[[0., 0.],\n [0., 0.],\n [0., 0.]]\n\n# np.empty(x,y):创建一个x行y列且未初始化的ndarray(随机数填充数据)\nf = np.empty((1,2), dtype =  int)\n[[4607182418800017408, 4607182418800017408]]\n\n# 使用 np.arange 生成连续元素的ndarray\ng = np.arange(6) #从0到6，默认间隔(步长)为1\n[0, 1, 2, 3, 4, 5]\n\nh = np.arange(0,6,2) #从0到6，间隔为2，不包括6\n[0, 2, 4]\n```\n\n<!--more-->\n\n```python\n# 使用 np.linspace(start, stop, num, endpoint, retstep, dtype) 生成ndarray,num:生成ndarray的元素个数\na = np.linspace(1.0, 2.0, num  = 10)\n[1.,1.11111111,1.22222222,1.33333333,1.44444444,1.55555556,1.66666667,1.77777778,1.88888889,2.]\n\n# np.logspace(start, stop, num, endpoint, base, dtype) ： 返回一个 ndarray 对象，其实就是linespace生成的元素值对应的base作为底数的幂\ny = np.logspace(1.0,  2.0, num =  10)\n[ 10.,12.91549665,16.68100537,21.5443469,27.82559402,35.93813664,46.41588834,59.94842503,77.42636827,100.]\n```\n\n我们来看一下上面生成的两个ndarray所画出的函数是不是10的幂函数图像：\n\n![0506_numpy_logspace](/src/imgs/1805/0506_numpy_logspace.png)\n\n对应代码：\n```python\nplt.subplot(2, 1, 1)\nplt.xlabel('linspace')\nplt.ylabel('logspace')\nplt.plot(a,b,'b-',label='logspace')\nplt.legend()\nplt.subplot(2, 1, 2)\nplt.plot(a,np.power(10,a),'r-',label='10^a')\nplt.legend()\nplt.show()\n```\n\n```python\n# np.fromiter(iterable, dtype, count = -1) : 从任何可迭代对象构建一个ndarray对象\nlist = range(5)\nit = iter(list)\n# 使用迭代器创建 ndarray\nx = np.fromiter(it, dtype = int)\n[0 1 2 3 4]\n\n# np.frombuffer():此函数将缓冲区解释为一维ndarray。\n但是参数是String类型的会报错误，原因如下：\nhttps://stackoverflow.com/questions/43362986/numpy-frombuffer-attributeerror-str-object-has-no-attribute-buffer\n```\n\n#### 二、ndarray的属性\n\n```python\n# array.size ndarray元素个数\na.size\n4\n\n# array.dtype ndarray元素的类型\na.dtype\ndtype('int64')\n\n# array.itemsize ndarray每个元素所占字节大小\na.itemsize\n8 # int64类型大小为8字节\n\n# array.ndim ndarray纬度\na.nidm\n1\nb.ndim\n2\n\n# array.shape ：ndarray各个维度的长度\na.shape\n(4,)\nb.shape\n(3,4)\n```\n\n#### 三、ndarray操作\n\n##### 单个ndarray操作\n\n```python\n# array.sum()：求ndarray所有元素的和值。也可以加上axis参数，求各行或者各列的元素和值\n# array.min()：求ndarray所有元素中的最小值。也可以加上axis参数，求各行或者各列的元素最小值\n# array.max()：求ndarray所有元素中的最大值。也可以加上axis参数，求各行或者各列的元素最大值\n\n# array.shape = x,y : 通过改变ndarray的shape值，可以改变ndarray的行数和列数.（总数必须一致）\nb.shape = 4,3\n[[ 1,  2,  3],\n [ 4,  4,  5],\n [ 6,  7,  7],\n [ 8,  9, 10]]\n\n# array.reshape(x,y) 的作用和指定shape值的效果一样，但是会返回一个新的ndarray，并且这个ndarray和原ndarray共享内存，无论修改哪一个ndarray都会引起另外一个ndarray的变化\nb.reshape(3,4)\n\n# array.resize(x,y) 用于原地设置形状,也就是修改的是原ndarray。而reshape和shape都是修改之后返回一个新ndarray\nb.resize(2,6)\n[[ 1, -1,  4,  6,  7,  9],\n [ 2,  4,  5,  7,  8, 10]]\n\n# array.ravel() 将ndarray展开，创建视图,视图和原ndarray共享内存，无论修改哪一个ndarray都会引起另外一个ndarray的变化\ni = b.ravel()\n[ 1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  9, 10]\n\n# array.flatten() 将ndarray展开，创建副本,副本修改不影响原ndarray变化\nj = b.flatten()\n[ 1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  9, 10]\n\n# array.transpose() 用于转置矩阵\nk = b.transpose()\n[[ 1,  4,  7],\n [ 2,  5,  8],\n [-1,  6,  9],\n [ 4,  7, 10]]\n```\n\n##### 多个ndarray操作\n\n```python\n# np.vstack(a1,a2) : 纵向（vertical）合并两个ndarray\na1 = np.array([1,2,3])\na2 = np.array([4,5,6])\nnp.vstack((a1,a2))\n[[1, 2, 3],\n [4, 5, 6]]\n\n# np.hstack(a1,a2) : 横向（horizontal）合并两个ndarray\na1 = np.array([1,2,3])\na2 = np.array([4,5,6])\nnp.hstack((a1,a2))\n[1, 2, 3, 4, 5, 6]\n\n# np.stach((a1,a2),axis = 1) : axis可以设置堆叠的维度,默认是0，效果和vstack相同，如果设置为1，则是vstack的转置矩阵。\na1 = np.array([1,2,3])\na2 = np.array([4,5,6])\nnp.stack((a1,a2),axis = 1)\n[[1, 4],\n [2, 5],\n [3, 6]]\n```\n\n##### ndarray分割\n\n```python\n# np.vsplit(a,num) : 纵向分割\na= np.array([[0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8]])\nnp.vsplit(a,3)\n[array([[0, 1, 2]]), array([[3, 4, 5]]), array([[6, 7, 8]])]\n\n# np.hsplit(a,num) : 横向分割\na= np.array([[0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8]])\nnp.hsplit(a,3)\n[array([[0],[3],[6]]), array([[1],[4],[7]]), array([[2],[5],[8]])]\n\n# 也可使用np.split(a, 3, axis=1) 指定axis作为分割方向\n```\n\n#### 四、矩阵运算\n\n```python\n# ndarray相乘\n# *操作符：每个位置的元素对应相乘.术语广播\na = np.array([[2,3],[3,4]])\nb = np.array([[3,4],[5,6]])\na * b\n[[ 6, 12],\n [15, 24]]\n\na = np.array([[2,3],[3,4]])\nb = np.array([[3,4],[5,6]])\na+b\n[[ 5,  7],\n [ 8, 10]]\n\na = np.array([[2,3],[3,4]])\nb = np.array([[3,4],[5,6]])\na-b\n[[-1, -1],\n [-2, -2]]\n\na = np.array([[2,3],[3,4]])\nb = np.array([[3,4],[5,6]])\na>b\n[[False, False],\n [False, False]]\n\n# dot操作符：按照矩阵乘法规则相乘\na.dot(b) # 或者np.dot(a,b)\n[[21, 26],\n [29, 36]]\n\n# 使用 linalg 模块求逆矩阵。\nimport numpy.linalg as nla\nx = np.array([[1,1],[1,2]])\ny = nla.inv(x)\n[[ 2., -1.],\n [-1.,  1.]]\n```\n\nlinalg 还有其他多种功能。比如：trace:对角线元素之和， det:计算矩阵行列式，等。\n\n#### 五、ndarray数组的基本索引和切片\n\n##### ndarray的基本索引\n\n```python\nx = np.array([[1,2],[3,4],[5,6]])\nx[0]    # [1, 2]\nx[0][1] # 2 ,普通python数组的索引\nx[0,1]  # 2 ,同x[0][1],ndarray数组的索引\n```\n\n##### ndarray的切片\n\n```python\nx = np.array([1,2,3,4,5])\nx[1:3]  # [2, 3], 左闭右开的区间\nx[:3]   # [1,2,3], 左边默认为 0，仍然是左闭右开\nx[1:]   # [2,3,4,5], 右边默认为数组的长度，仍然是左闭右开\n\nx = np.array([[1,2],[3,4],[5,6]])\nx[:2]        # [[1, 2],[3, 4]],\nx[:2,:1]     # [[1],[3]]\nx[:2,:1] = 0 # 用标量赋值,x=[[0, 2],[0, 4],[5, 6]]\n```\n\n#### 六、其他用法\n\n```python\n# 使用 where 进行 ndarray 的条件应用\ncond = np.array([True,False,True,False])\nx = np.where(cond,-2,2)\n[-2,  2, -2,  2]\n\ncond = np.array([1,2,3,4])\nx = np.where(cond>2,-2,2)\n[ 2,  2, -2, -2]\n```\n\n- - -\nTHE END.\n","slug":"2018-05-03_Numpy","published":1,"updated":"2018-05-07T03:08:07.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgywsbbc0033uro5935wlq3m","content":"<h4 id=\"一、创建ndarray\"><a href=\"#一、创建ndarray\" class=\"headerlink\" title=\"一、创建ndarray\"></a>一、创建ndarray</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\">a = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</div><div class=\"line\">b = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.ones(x):创建一个长度为x，且元素全为1的ndarray</span></div><div class=\"line\">c = np.ones(<span class=\"number\">2</span>,dtype = np.int)</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.ones(x，y):创建一个长度为x行y列，且元素全为1的ndarray</span></div><div class=\"line\">d = np.ones((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</div><div class=\"line\">[[<span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</div><div class=\"line\"> [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</div><div class=\"line\"> [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.zeros(x,y):创建一个x行y列且元素全为0的ndarray</span></div><div class=\"line\">e = np.zeros((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</div><div class=\"line\">[[<span class=\"number\">0.</span>, <span class=\"number\">0.</span>],</div><div class=\"line\"> [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>],</div><div class=\"line\"> [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.empty(x,y):创建一个x行y列且未初始化的ndarray(随机数填充数据)</span></div><div class=\"line\">f = np.empty((<span class=\"number\">1</span>,<span class=\"number\">2</span>), dtype =  int)</div><div class=\"line\">[[<span class=\"number\">4607182418800017408</span>, <span class=\"number\">4607182418800017408</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用 np.arange 生成连续元素的ndarray</span></div><div class=\"line\">g = np.arange(<span class=\"number\">6</span>) <span class=\"comment\">#从0到6，默认间隔(步长)为1</span></div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"></div><div class=\"line\">h = np.arange(<span class=\"number\">0</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>) <span class=\"comment\">#从0到6，间隔为2，不包括6</span></div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 使用 np.linspace(start, stop, num, endpoint, retstep, dtype) 生成ndarray,num:生成ndarray的元素个数</span></div><div class=\"line\">a = np.linspace(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, num  = <span class=\"number\">10</span>)</div><div class=\"line\">[<span class=\"number\">1.</span>,<span class=\"number\">1.11111111</span>,<span class=\"number\">1.22222222</span>,<span class=\"number\">1.33333333</span>,<span class=\"number\">1.44444444</span>,<span class=\"number\">1.55555556</span>,<span class=\"number\">1.66666667</span>,<span class=\"number\">1.77777778</span>,<span class=\"number\">1.88888889</span>,<span class=\"number\">2.</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.logspace(start, stop, num, endpoint, base, dtype) ： 返回一个 ndarray 对象，其实就是linespace生成的元素值对应的base作为底数的幂</span></div><div class=\"line\">y = np.logspace(<span class=\"number\">1.0</span>,  <span class=\"number\">2.0</span>, num =  <span class=\"number\">10</span>)</div><div class=\"line\">[ <span class=\"number\">10.</span>,<span class=\"number\">12.91549665</span>,<span class=\"number\">16.68100537</span>,<span class=\"number\">21.5443469</span>,<span class=\"number\">27.82559402</span>,<span class=\"number\">35.93813664</span>,<span class=\"number\">46.41588834</span>,<span class=\"number\">59.94842503</span>,<span class=\"number\">77.42636827</span>,<span class=\"number\">100.</span>]</div></pre></td></tr></table></figure>\n<p>我们来看一下上面生成的两个ndarray所画出的函数是不是10的幂函数图像：</p>\n<p><img src=\"/src/imgs/1805/0506_numpy_logspace.png\" alt=\"0506_numpy_logspace\"></p>\n<p>对应代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</div><div class=\"line\">plt.xlabel(<span class=\"string\">'linspace'</span>)</div><div class=\"line\">plt.ylabel(<span class=\"string\">'logspace'</span>)</div><div class=\"line\">plt.plot(a,b,<span class=\"string\">'b-'</span>,label=<span class=\"string\">'logspace'</span>)</div><div class=\"line\">plt.legend()</div><div class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\">plt.plot(a,np.power(<span class=\"number\">10</span>,a),<span class=\"string\">'r-'</span>,label=<span class=\"string\">'10^a'</span>)</div><div class=\"line\">plt.legend()</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># np.fromiter(iterable, dtype, count = -1) : 从任何可迭代对象构建一个ndarray对象</span></div><div class=\"line\">list = range(<span class=\"number\">5</span>)</div><div class=\"line\">it = iter(list)</div><div class=\"line\"><span class=\"comment\"># 使用迭代器创建 ndarray</span></div><div class=\"line\">x = np.fromiter(it, dtype = int)</div><div class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.frombuffer():此函数将缓冲区解释为一维ndarray。</span></div><div class=\"line\">但是参数是String类型的会报错误，原因如下：</div><div class=\"line\">https://stackoverflow.com/questions/<span class=\"number\">43362986</span>/numpy-frombuffer-attributeerror-str-object-has-no-attribute-buffer</div></pre></td></tr></table></figure>\n<h4 id=\"二、ndarray的属性\"><a href=\"#二、ndarray的属性\" class=\"headerlink\" title=\"二、ndarray的属性\"></a>二、ndarray的属性</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># array.size ndarray元素个数</span></div><div class=\"line\">a.size</div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.dtype ndarray元素的类型</span></div><div class=\"line\">a.dtype</div><div class=\"line\">dtype(<span class=\"string\">'int64'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.itemsize ndarray每个元素所占字节大小</span></div><div class=\"line\">a.itemsize</div><div class=\"line\"><span class=\"number\">8</span> <span class=\"comment\"># int64类型大小为8字节</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.ndim ndarray纬度</span></div><div class=\"line\">a.nidm</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">b.ndim</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.shape ：ndarray各个维度的长度</span></div><div class=\"line\">a.shape</div><div class=\"line\">(<span class=\"number\">4</span>,)</div><div class=\"line\">b.shape</div><div class=\"line\">(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"三、ndarray操作\"><a href=\"#三、ndarray操作\" class=\"headerlink\" title=\"三、ndarray操作\"></a>三、ndarray操作</h4><h5 id=\"单个ndarray操作\"><a href=\"#单个ndarray操作\" class=\"headerlink\" title=\"单个ndarray操作\"></a>单个ndarray操作</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># array.sum()：求ndarray所有元素的和值。也可以加上axis参数，求各行或者各列的元素和值</span></div><div class=\"line\"><span class=\"comment\"># array.min()：求ndarray所有元素中的最小值。也可以加上axis参数，求各行或者各列的元素最小值</span></div><div class=\"line\"><span class=\"comment\"># array.max()：求ndarray所有元素中的最大值。也可以加上axis参数，求各行或者各列的元素最大值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.shape = x,y : 通过改变ndarray的shape值，可以改变ndarray的行数和列数.（总数必须一致）</span></div><div class=\"line\">b.shape = <span class=\"number\">4</span>,<span class=\"number\">3</span></div><div class=\"line\">[[ <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>],</div><div class=\"line\"> [ <span class=\"number\">4</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>],</div><div class=\"line\"> [ <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">7</span>],</div><div class=\"line\"> [ <span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.reshape(x,y) 的作用和指定shape值的效果一样，但是会返回一个新的ndarray，并且这个ndarray和原ndarray共享内存，无论修改哪一个ndarray都会引起另外一个ndarray的变化</span></div><div class=\"line\">b.reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.resize(x,y) 用于原地设置形状,也就是修改的是原ndarray。而reshape和shape都是修改之后返回一个新ndarray</span></div><div class=\"line\">b.resize(<span class=\"number\">2</span>,<span class=\"number\">6</span>)</div><div class=\"line\">[[ <span class=\"number\">1</span>, <span class=\"number\">-1</span>,  <span class=\"number\">4</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">9</span>],</div><div class=\"line\"> [ <span class=\"number\">2</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>, <span class=\"number\">10</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.ravel() 将ndarray展开，创建视图,视图和原ndarray共享内存，无论修改哪一个ndarray都会引起另外一个ndarray的变化</span></div><div class=\"line\">i = b.ravel()</div><div class=\"line\">[ <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.flatten() 将ndarray展开，创建副本,副本修改不影响原ndarray变化</span></div><div class=\"line\">j = b.flatten()</div><div class=\"line\">[ <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.transpose() 用于转置矩阵</span></div><div class=\"line\">k = b.transpose()</div><div class=\"line\">[[ <span class=\"number\">1</span>,  <span class=\"number\">4</span>,  <span class=\"number\">7</span>],</div><div class=\"line\"> [ <span class=\"number\">2</span>,  <span class=\"number\">5</span>,  <span class=\"number\">8</span>],</div><div class=\"line\"> [<span class=\"number\">-1</span>,  <span class=\"number\">6</span>,  <span class=\"number\">9</span>],</div><div class=\"line\"> [ <span class=\"number\">4</span>,  <span class=\"number\">7</span>, <span class=\"number\">10</span>]]</div></pre></td></tr></table></figure>\n<h5 id=\"多个ndarray操作\"><a href=\"#多个ndarray操作\" class=\"headerlink\" title=\"多个ndarray操作\"></a>多个ndarray操作</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># np.vstack(a1,a2) : 纵向（vertical）合并两个ndarray</span></div><div class=\"line\">a1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">a2 = np.array([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div><div class=\"line\">np.vstack((a1,a2))</div><div class=\"line\">[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</div><div class=\"line\"> [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.hstack(a1,a2) : 横向（horizontal）合并两个ndarray</span></div><div class=\"line\">a1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">a2 = np.array([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div><div class=\"line\">np.hstack((a1,a2))</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.stach((a1,a2),axis = 1) : axis可以设置堆叠的维度,默认是0，效果和vstack相同，如果设置为1，则是vstack的转置矩阵。</span></div><div class=\"line\">a1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">a2 = np.array([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div><div class=\"line\">np.stack((a1,a2),axis = <span class=\"number\">1</span>)</div><div class=\"line\">[[<span class=\"number\">1</span>, <span class=\"number\">4</span>],</div><div class=\"line\"> [<span class=\"number\">2</span>, <span class=\"number\">5</span>],</div><div class=\"line\"> [<span class=\"number\">3</span>, <span class=\"number\">6</span>]]</div></pre></td></tr></table></figure>\n<h5 id=\"ndarray分割\"><a href=\"#ndarray分割\" class=\"headerlink\" title=\"ndarray分割\"></a>ndarray分割</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># np.vsplit(a,num) : 纵向分割</span></div><div class=\"line\">a= np.array([[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</div><div class=\"line\">            [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>],</div><div class=\"line\">            [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]])</div><div class=\"line\">np.vsplit(a,<span class=\"number\">3</span>)</div><div class=\"line\">[array([[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]]), array([[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]), array([[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]])]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.hsplit(a,num) : 横向分割</span></div><div class=\"line\">a= np.array([[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</div><div class=\"line\">            [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>],</div><div class=\"line\">            [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]])</div><div class=\"line\">np.hsplit(a,<span class=\"number\">3</span>)</div><div class=\"line\">[array([[<span class=\"number\">0</span>],[<span class=\"number\">3</span>],[<span class=\"number\">6</span>]]), array([[<span class=\"number\">1</span>],[<span class=\"number\">4</span>],[<span class=\"number\">7</span>]]), array([[<span class=\"number\">2</span>],[<span class=\"number\">5</span>],[<span class=\"number\">8</span>]])]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 也可使用np.split(a, 3, axis=1) 指定axis作为分割方向</span></div></pre></td></tr></table></figure>\n<h4 id=\"四、矩阵运算\"><a href=\"#四、矩阵运算\" class=\"headerlink\" title=\"四、矩阵运算\"></a>四、矩阵运算</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># ndarray相乘</span></div><div class=\"line\"><span class=\"comment\"># *操作符：每个位置的元素对应相乘.术语广播</span></div><div class=\"line\">a = np.array([[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</div><div class=\"line\">b = np.array([[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">a * b</div><div class=\"line\">[[ <span class=\"number\">6</span>, <span class=\"number\">12</span>],</div><div class=\"line\"> [<span class=\"number\">15</span>, <span class=\"number\">24</span>]]</div><div class=\"line\"></div><div class=\"line\">a = np.array([[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</div><div class=\"line\">b = np.array([[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">a+b</div><div class=\"line\">[[ <span class=\"number\">5</span>,  <span class=\"number\">7</span>],</div><div class=\"line\"> [ <span class=\"number\">8</span>, <span class=\"number\">10</span>]]</div><div class=\"line\"></div><div class=\"line\">a = np.array([[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</div><div class=\"line\">b = np.array([[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">a-b</div><div class=\"line\">[[<span class=\"number\">-1</span>, <span class=\"number\">-1</span>],</div><div class=\"line\"> [<span class=\"number\">-2</span>, <span class=\"number\">-2</span>]]</div><div class=\"line\"></div><div class=\"line\">a = np.array([[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</div><div class=\"line\">b = np.array([[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">a&gt;b</div><div class=\"line\">[[<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>],</div><div class=\"line\"> [<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># dot操作符：按照矩阵乘法规则相乘</span></div><div class=\"line\">a.dot(b) <span class=\"comment\"># 或者np.dot(a,b)</span></div><div class=\"line\">[[<span class=\"number\">21</span>, <span class=\"number\">26</span>],</div><div class=\"line\"> [<span class=\"number\">29</span>, <span class=\"number\">36</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用 linalg 模块求逆矩阵。</span></div><div class=\"line\"><span class=\"keyword\">import</span> numpy.linalg <span class=\"keyword\">as</span> nla</div><div class=\"line\">x = np.array([[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>]])</div><div class=\"line\">y = nla.inv(x)</div><div class=\"line\">[[ <span class=\"number\">2.</span>, <span class=\"number\">-1.</span>],</div><div class=\"line\"> [<span class=\"number\">-1.</span>,  <span class=\"number\">1.</span>]]</div></pre></td></tr></table></figure>\n<p>linalg 还有其他多种功能。比如：trace:对角线元素之和， det:计算矩阵行列式，等。</p>\n<h4 id=\"五、ndarray数组的基本索引和切片\"><a href=\"#五、ndarray数组的基本索引和切片\" class=\"headerlink\" title=\"五、ndarray数组的基本索引和切片\"></a>五、ndarray数组的基本索引和切片</h4><h5 id=\"ndarray的基本索引\"><a href=\"#ndarray的基本索引\" class=\"headerlink\" title=\"ndarray的基本索引\"></a>ndarray的基本索引</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">x[<span class=\"number\">0</span>]    <span class=\"comment\"># [1, 2]</span></div><div class=\"line\">x[<span class=\"number\">0</span>][<span class=\"number\">1</span>] <span class=\"comment\"># 2 ,普通python数组的索引</span></div><div class=\"line\">x[<span class=\"number\">0</span>,<span class=\"number\">1</span>]  <span class=\"comment\"># 2 ,同x[0][1],ndarray数组的索引</span></div></pre></td></tr></table></figure>\n<h5 id=\"ndarray的切片\"><a href=\"#ndarray的切片\" class=\"headerlink\" title=\"ndarray的切片\"></a>ndarray的切片</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</div><div class=\"line\">x[<span class=\"number\">1</span>:<span class=\"number\">3</span>]  <span class=\"comment\"># [2, 3], 左闭右开的区间</span></div><div class=\"line\">x[:<span class=\"number\">3</span>]   <span class=\"comment\"># [1,2,3], 左边默认为 0，仍然是左闭右开</span></div><div class=\"line\">x[<span class=\"number\">1</span>:]   <span class=\"comment\"># [2,3,4,5], 右边默认为数组的长度，仍然是左闭右开</span></div><div class=\"line\"></div><div class=\"line\">x = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">x[:<span class=\"number\">2</span>]        <span class=\"comment\"># [[1, 2],[3, 4]],</span></div><div class=\"line\">x[:<span class=\"number\">2</span>,:<span class=\"number\">1</span>]     <span class=\"comment\"># [[1],[3]]</span></div><div class=\"line\">x[:<span class=\"number\">2</span>,:<span class=\"number\">1</span>] = <span class=\"number\">0</span> <span class=\"comment\"># 用标量赋值,x=[[0, 2],[0, 4],[5, 6]]</span></div></pre></td></tr></table></figure>\n<h4 id=\"六、其他用法\"><a href=\"#六、其他用法\" class=\"headerlink\" title=\"六、其他用法\"></a>六、其他用法</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 使用 where 进行 ndarray 的条件应用</span></div><div class=\"line\">cond = np.array([<span class=\"keyword\">True</span>,<span class=\"keyword\">False</span>,<span class=\"keyword\">True</span>,<span class=\"keyword\">False</span>])</div><div class=\"line\">x = np.where(cond,<span class=\"number\">-2</span>,<span class=\"number\">2</span>)</div><div class=\"line\">[<span class=\"number\">-2</span>,  <span class=\"number\">2</span>, <span class=\"number\">-2</span>,  <span class=\"number\">2</span>]</div><div class=\"line\"></div><div class=\"line\">cond = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</div><div class=\"line\">x = np.where(cond&gt;<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">2</span>)</div><div class=\"line\">[ <span class=\"number\">2</span>,  <span class=\"number\">2</span>, <span class=\"number\">-2</span>, <span class=\"number\">-2</span>]</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、创建ndarray\"><a href=\"#一、创建ndarray\" class=\"headerlink\" title=\"一、创建ndarray\"></a>一、创建ndarray</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\">a = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</div><div class=\"line\">b = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.ones(x):创建一个长度为x，且元素全为1的ndarray</span></div><div class=\"line\">c = np.ones(<span class=\"number\">2</span>,dtype = np.int)</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.ones(x，y):创建一个长度为x行y列，且元素全为1的ndarray</span></div><div class=\"line\">d = np.ones((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</div><div class=\"line\">[[<span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</div><div class=\"line\"> [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</div><div class=\"line\"> [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.zeros(x,y):创建一个x行y列且元素全为0的ndarray</span></div><div class=\"line\">e = np.zeros((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</div><div class=\"line\">[[<span class=\"number\">0.</span>, <span class=\"number\">0.</span>],</div><div class=\"line\"> [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>],</div><div class=\"line\"> [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.empty(x,y):创建一个x行y列且未初始化的ndarray(随机数填充数据)</span></div><div class=\"line\">f = np.empty((<span class=\"number\">1</span>,<span class=\"number\">2</span>), dtype =  int)</div><div class=\"line\">[[<span class=\"number\">4607182418800017408</span>, <span class=\"number\">4607182418800017408</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用 np.arange 生成连续元素的ndarray</span></div><div class=\"line\">g = np.arange(<span class=\"number\">6</span>) <span class=\"comment\">#从0到6，默认间隔(步长)为1</span></div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"></div><div class=\"line\">h = np.arange(<span class=\"number\">0</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>) <span class=\"comment\">#从0到6，间隔为2，不包括6</span></div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 使用 np.linspace(start, stop, num, endpoint, retstep, dtype) 生成ndarray,num:生成ndarray的元素个数</span></div><div class=\"line\">a = np.linspace(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, num  = <span class=\"number\">10</span>)</div><div class=\"line\">[<span class=\"number\">1.</span>,<span class=\"number\">1.11111111</span>,<span class=\"number\">1.22222222</span>,<span class=\"number\">1.33333333</span>,<span class=\"number\">1.44444444</span>,<span class=\"number\">1.55555556</span>,<span class=\"number\">1.66666667</span>,<span class=\"number\">1.77777778</span>,<span class=\"number\">1.88888889</span>,<span class=\"number\">2.</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.logspace(start, stop, num, endpoint, base, dtype) ： 返回一个 ndarray 对象，其实就是linespace生成的元素值对应的base作为底数的幂</span></div><div class=\"line\">y = np.logspace(<span class=\"number\">1.0</span>,  <span class=\"number\">2.0</span>, num =  <span class=\"number\">10</span>)</div><div class=\"line\">[ <span class=\"number\">10.</span>,<span class=\"number\">12.91549665</span>,<span class=\"number\">16.68100537</span>,<span class=\"number\">21.5443469</span>,<span class=\"number\">27.82559402</span>,<span class=\"number\">35.93813664</span>,<span class=\"number\">46.41588834</span>,<span class=\"number\">59.94842503</span>,<span class=\"number\">77.42636827</span>,<span class=\"number\">100.</span>]</div></pre></td></tr></table></figure>\n<p>我们来看一下上面生成的两个ndarray所画出的函数是不是10的幂函数图像：</p>\n<p><img src=\"/src/imgs/1805/0506_numpy_logspace.png\" alt=\"0506_numpy_logspace\"></p>\n<p>对应代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</div><div class=\"line\">plt.xlabel(<span class=\"string\">'linspace'</span>)</div><div class=\"line\">plt.ylabel(<span class=\"string\">'logspace'</span>)</div><div class=\"line\">plt.plot(a,b,<span class=\"string\">'b-'</span>,label=<span class=\"string\">'logspace'</span>)</div><div class=\"line\">plt.legend()</div><div class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\">plt.plot(a,np.power(<span class=\"number\">10</span>,a),<span class=\"string\">'r-'</span>,label=<span class=\"string\">'10^a'</span>)</div><div class=\"line\">plt.legend()</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># np.fromiter(iterable, dtype, count = -1) : 从任何可迭代对象构建一个ndarray对象</span></div><div class=\"line\">list = range(<span class=\"number\">5</span>)</div><div class=\"line\">it = iter(list)</div><div class=\"line\"><span class=\"comment\"># 使用迭代器创建 ndarray</span></div><div class=\"line\">x = np.fromiter(it, dtype = int)</div><div class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.frombuffer():此函数将缓冲区解释为一维ndarray。</span></div><div class=\"line\">但是参数是String类型的会报错误，原因如下：</div><div class=\"line\">https://stackoverflow.com/questions/<span class=\"number\">43362986</span>/numpy-frombuffer-attributeerror-str-object-has-no-attribute-buffer</div></pre></td></tr></table></figure>\n<h4 id=\"二、ndarray的属性\"><a href=\"#二、ndarray的属性\" class=\"headerlink\" title=\"二、ndarray的属性\"></a>二、ndarray的属性</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># array.size ndarray元素个数</span></div><div class=\"line\">a.size</div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.dtype ndarray元素的类型</span></div><div class=\"line\">a.dtype</div><div class=\"line\">dtype(<span class=\"string\">'int64'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.itemsize ndarray每个元素所占字节大小</span></div><div class=\"line\">a.itemsize</div><div class=\"line\"><span class=\"number\">8</span> <span class=\"comment\"># int64类型大小为8字节</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.ndim ndarray纬度</span></div><div class=\"line\">a.nidm</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">b.ndim</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.shape ：ndarray各个维度的长度</span></div><div class=\"line\">a.shape</div><div class=\"line\">(<span class=\"number\">4</span>,)</div><div class=\"line\">b.shape</div><div class=\"line\">(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"三、ndarray操作\"><a href=\"#三、ndarray操作\" class=\"headerlink\" title=\"三、ndarray操作\"></a>三、ndarray操作</h4><h5 id=\"单个ndarray操作\"><a href=\"#单个ndarray操作\" class=\"headerlink\" title=\"单个ndarray操作\"></a>单个ndarray操作</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># array.sum()：求ndarray所有元素的和值。也可以加上axis参数，求各行或者各列的元素和值</span></div><div class=\"line\"><span class=\"comment\"># array.min()：求ndarray所有元素中的最小值。也可以加上axis参数，求各行或者各列的元素最小值</span></div><div class=\"line\"><span class=\"comment\"># array.max()：求ndarray所有元素中的最大值。也可以加上axis参数，求各行或者各列的元素最大值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.shape = x,y : 通过改变ndarray的shape值，可以改变ndarray的行数和列数.（总数必须一致）</span></div><div class=\"line\">b.shape = <span class=\"number\">4</span>,<span class=\"number\">3</span></div><div class=\"line\">[[ <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>],</div><div class=\"line\"> [ <span class=\"number\">4</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>],</div><div class=\"line\"> [ <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">7</span>],</div><div class=\"line\"> [ <span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.reshape(x,y) 的作用和指定shape值的效果一样，但是会返回一个新的ndarray，并且这个ndarray和原ndarray共享内存，无论修改哪一个ndarray都会引起另外一个ndarray的变化</span></div><div class=\"line\">b.reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.resize(x,y) 用于原地设置形状,也就是修改的是原ndarray。而reshape和shape都是修改之后返回一个新ndarray</span></div><div class=\"line\">b.resize(<span class=\"number\">2</span>,<span class=\"number\">6</span>)</div><div class=\"line\">[[ <span class=\"number\">1</span>, <span class=\"number\">-1</span>,  <span class=\"number\">4</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">9</span>],</div><div class=\"line\"> [ <span class=\"number\">2</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>, <span class=\"number\">10</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.ravel() 将ndarray展开，创建视图,视图和原ndarray共享内存，无论修改哪一个ndarray都会引起另外一个ndarray的变化</span></div><div class=\"line\">i = b.ravel()</div><div class=\"line\">[ <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.flatten() 将ndarray展开，创建副本,副本修改不影响原ndarray变化</span></div><div class=\"line\">j = b.flatten()</div><div class=\"line\">[ <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># array.transpose() 用于转置矩阵</span></div><div class=\"line\">k = b.transpose()</div><div class=\"line\">[[ <span class=\"number\">1</span>,  <span class=\"number\">4</span>,  <span class=\"number\">7</span>],</div><div class=\"line\"> [ <span class=\"number\">2</span>,  <span class=\"number\">5</span>,  <span class=\"number\">8</span>],</div><div class=\"line\"> [<span class=\"number\">-1</span>,  <span class=\"number\">6</span>,  <span class=\"number\">9</span>],</div><div class=\"line\"> [ <span class=\"number\">4</span>,  <span class=\"number\">7</span>, <span class=\"number\">10</span>]]</div></pre></td></tr></table></figure>\n<h5 id=\"多个ndarray操作\"><a href=\"#多个ndarray操作\" class=\"headerlink\" title=\"多个ndarray操作\"></a>多个ndarray操作</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># np.vstack(a1,a2) : 纵向（vertical）合并两个ndarray</span></div><div class=\"line\">a1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">a2 = np.array([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div><div class=\"line\">np.vstack((a1,a2))</div><div class=\"line\">[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</div><div class=\"line\"> [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.hstack(a1,a2) : 横向（horizontal）合并两个ndarray</span></div><div class=\"line\">a1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">a2 = np.array([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div><div class=\"line\">np.hstack((a1,a2))</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.stach((a1,a2),axis = 1) : axis可以设置堆叠的维度,默认是0，效果和vstack相同，如果设置为1，则是vstack的转置矩阵。</span></div><div class=\"line\">a1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">a2 = np.array([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div><div class=\"line\">np.stack((a1,a2),axis = <span class=\"number\">1</span>)</div><div class=\"line\">[[<span class=\"number\">1</span>, <span class=\"number\">4</span>],</div><div class=\"line\"> [<span class=\"number\">2</span>, <span class=\"number\">5</span>],</div><div class=\"line\"> [<span class=\"number\">3</span>, <span class=\"number\">6</span>]]</div></pre></td></tr></table></figure>\n<h5 id=\"ndarray分割\"><a href=\"#ndarray分割\" class=\"headerlink\" title=\"ndarray分割\"></a>ndarray分割</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># np.vsplit(a,num) : 纵向分割</span></div><div class=\"line\">a= np.array([[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</div><div class=\"line\">            [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>],</div><div class=\"line\">            [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]])</div><div class=\"line\">np.vsplit(a,<span class=\"number\">3</span>)</div><div class=\"line\">[array([[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]]), array([[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]), array([[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]])]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># np.hsplit(a,num) : 横向分割</span></div><div class=\"line\">a= np.array([[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</div><div class=\"line\">            [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>],</div><div class=\"line\">            [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]])</div><div class=\"line\">np.hsplit(a,<span class=\"number\">3</span>)</div><div class=\"line\">[array([[<span class=\"number\">0</span>],[<span class=\"number\">3</span>],[<span class=\"number\">6</span>]]), array([[<span class=\"number\">1</span>],[<span class=\"number\">4</span>],[<span class=\"number\">7</span>]]), array([[<span class=\"number\">2</span>],[<span class=\"number\">5</span>],[<span class=\"number\">8</span>]])]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 也可使用np.split(a, 3, axis=1) 指定axis作为分割方向</span></div></pre></td></tr></table></figure>\n<h4 id=\"四、矩阵运算\"><a href=\"#四、矩阵运算\" class=\"headerlink\" title=\"四、矩阵运算\"></a>四、矩阵运算</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># ndarray相乘</span></div><div class=\"line\"><span class=\"comment\"># *操作符：每个位置的元素对应相乘.术语广播</span></div><div class=\"line\">a = np.array([[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</div><div class=\"line\">b = np.array([[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">a * b</div><div class=\"line\">[[ <span class=\"number\">6</span>, <span class=\"number\">12</span>],</div><div class=\"line\"> [<span class=\"number\">15</span>, <span class=\"number\">24</span>]]</div><div class=\"line\"></div><div class=\"line\">a = np.array([[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</div><div class=\"line\">b = np.array([[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">a+b</div><div class=\"line\">[[ <span class=\"number\">5</span>,  <span class=\"number\">7</span>],</div><div class=\"line\"> [ <span class=\"number\">8</span>, <span class=\"number\">10</span>]]</div><div class=\"line\"></div><div class=\"line\">a = np.array([[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</div><div class=\"line\">b = np.array([[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">a-b</div><div class=\"line\">[[<span class=\"number\">-1</span>, <span class=\"number\">-1</span>],</div><div class=\"line\"> [<span class=\"number\">-2</span>, <span class=\"number\">-2</span>]]</div><div class=\"line\"></div><div class=\"line\">a = np.array([[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</div><div class=\"line\">b = np.array([[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">a&gt;b</div><div class=\"line\">[[<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>],</div><div class=\"line\"> [<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># dot操作符：按照矩阵乘法规则相乘</span></div><div class=\"line\">a.dot(b) <span class=\"comment\"># 或者np.dot(a,b)</span></div><div class=\"line\">[[<span class=\"number\">21</span>, <span class=\"number\">26</span>],</div><div class=\"line\"> [<span class=\"number\">29</span>, <span class=\"number\">36</span>]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用 linalg 模块求逆矩阵。</span></div><div class=\"line\"><span class=\"keyword\">import</span> numpy.linalg <span class=\"keyword\">as</span> nla</div><div class=\"line\">x = np.array([[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>]])</div><div class=\"line\">y = nla.inv(x)</div><div class=\"line\">[[ <span class=\"number\">2.</span>, <span class=\"number\">-1.</span>],</div><div class=\"line\"> [<span class=\"number\">-1.</span>,  <span class=\"number\">1.</span>]]</div></pre></td></tr></table></figure>\n<p>linalg 还有其他多种功能。比如：trace:对角线元素之和， det:计算矩阵行列式，等。</p>\n<h4 id=\"五、ndarray数组的基本索引和切片\"><a href=\"#五、ndarray数组的基本索引和切片\" class=\"headerlink\" title=\"五、ndarray数组的基本索引和切片\"></a>五、ndarray数组的基本索引和切片</h4><h5 id=\"ndarray的基本索引\"><a href=\"#ndarray的基本索引\" class=\"headerlink\" title=\"ndarray的基本索引\"></a>ndarray的基本索引</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">x[<span class=\"number\">0</span>]    <span class=\"comment\"># [1, 2]</span></div><div class=\"line\">x[<span class=\"number\">0</span>][<span class=\"number\">1</span>] <span class=\"comment\"># 2 ,普通python数组的索引</span></div><div class=\"line\">x[<span class=\"number\">0</span>,<span class=\"number\">1</span>]  <span class=\"comment\"># 2 ,同x[0][1],ndarray数组的索引</span></div></pre></td></tr></table></figure>\n<h5 id=\"ndarray的切片\"><a href=\"#ndarray的切片\" class=\"headerlink\" title=\"ndarray的切片\"></a>ndarray的切片</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</div><div class=\"line\">x[<span class=\"number\">1</span>:<span class=\"number\">3</span>]  <span class=\"comment\"># [2, 3], 左闭右开的区间</span></div><div class=\"line\">x[:<span class=\"number\">3</span>]   <span class=\"comment\"># [1,2,3], 左边默认为 0，仍然是左闭右开</span></div><div class=\"line\">x[<span class=\"number\">1</span>:]   <span class=\"comment\"># [2,3,4,5], 右边默认为数组的长度，仍然是左闭右开</span></div><div class=\"line\"></div><div class=\"line\">x = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</div><div class=\"line\">x[:<span class=\"number\">2</span>]        <span class=\"comment\"># [[1, 2],[3, 4]],</span></div><div class=\"line\">x[:<span class=\"number\">2</span>,:<span class=\"number\">1</span>]     <span class=\"comment\"># [[1],[3]]</span></div><div class=\"line\">x[:<span class=\"number\">2</span>,:<span class=\"number\">1</span>] = <span class=\"number\">0</span> <span class=\"comment\"># 用标量赋值,x=[[0, 2],[0, 4],[5, 6]]</span></div></pre></td></tr></table></figure>\n<h4 id=\"六、其他用法\"><a href=\"#六、其他用法\" class=\"headerlink\" title=\"六、其他用法\"></a>六、其他用法</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 使用 where 进行 ndarray 的条件应用</span></div><div class=\"line\">cond = np.array([<span class=\"keyword\">True</span>,<span class=\"keyword\">False</span>,<span class=\"keyword\">True</span>,<span class=\"keyword\">False</span>])</div><div class=\"line\">x = np.where(cond,<span class=\"number\">-2</span>,<span class=\"number\">2</span>)</div><div class=\"line\">[<span class=\"number\">-2</span>,  <span class=\"number\">2</span>, <span class=\"number\">-2</span>,  <span class=\"number\">2</span>]</div><div class=\"line\"></div><div class=\"line\">cond = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</div><div class=\"line\">x = np.where(cond&gt;<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">2</span>)</div><div class=\"line\">[ <span class=\"number\">2</span>,  <span class=\"number\">2</span>, <span class=\"number\">-2</span>, <span class=\"number\">-2</span>]</div></pre></td></tr></table></figure>\n<hr>\n<p>THE END.</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgywsb910000uro5ktui3ahi","category_id":"cjgywsb970002uro5mhbtbdhc","_id":"cjgywsb9f000curo55t9pggvk"},{"post_id":"cjgywsb9c000auro576zsmeis","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9k000juro5a78n5aq0"},{"post_id":"cjgywsb950001uro5ypire5j0","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9m000ouro5p2su4jis"},{"post_id":"cjgywsb9e000buro59plr2fnf","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9o000ruro5sielmllj"},{"post_id":"cjgywsb9i000guro5rcc6udd4","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9q000wuro5m2trzkce"},{"post_id":"cjgywsb990004uro55il3ccvj","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9r000zuro5zrben7n8"},{"post_id":"cjgywsb9j000iuro5f8b41ty4","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9t0014uro5nzzjew8m"},{"post_id":"cjgywsb9a0005uro5fou54fig","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9u0017uro5kbxyk2n8"},{"post_id":"cjgywsb9p000vuro5i1i3knjx","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9v001buro5yvauwyho"},{"post_id":"cjgywsb9b0006uro5fcxrz7hl","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9w001euro5ufmrcdlu"},{"post_id":"cjgywsb9q000yuro5hf5x4qu8","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsb9y001iuro5zgg5o5om"},{"post_id":"cjgywsb9m000nuro5x6innf6c","category_id":"cjgywsb9r0010uro5qnuv1n8f","_id":"cjgywsb9z001luro5gvwc7b4v"},{"post_id":"cjgywsb9n000quro5wnhpfbb6","category_id":"cjgywsb9u0018uro5khwg2dn4","_id":"cjgywsba1001nuro57wvqe17v"},{"post_id":"cjgywsb9w001duro5jmsqdpag","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsba3001suro5h2h4dvpx"},{"post_id":"cjgywsb9s0013uro5pczlajye","category_id":"cjgywsb9x001furo54e8moxy8","_id":"cjgywsba5001vuro5bk87wr10"},{"post_id":"cjgywsba0001muro55e370np5","category_id":"cjgywsb9r0010uro5qnuv1n8f","_id":"cjgywsba6001yuro5gafaymdz"},{"post_id":"cjgywsba3001ruro5brwe19ro","category_id":"cjgywsb9r0010uro5qnuv1n8f","_id":"cjgywsba80020uro5gl9e7dyj"},{"post_id":"cjgywsb9t0016uro5ulurwz4o","category_id":"cjgywsb9x001furo54e8moxy8","_id":"cjgywsbaa0024uro5ys76lju3"},{"post_id":"cjgywsba4001turo5v3ma9w4l","category_id":"cjgywsb9r0010uro5qnuv1n8f","_id":"cjgywsbab0027uro54yz8oatd"},{"post_id":"cjgywsba6001xuro5xuhih16x","category_id":"cjgywsb9b0007uro5a2tm3y2t","_id":"cjgywsbac002buro5aaglq1l2"},{"post_id":"cjgywsb9v001auro5ut7f53y5","category_id":"cjgywsba5001uuro5gtw8ukqn","_id":"cjgywsbad002duro5z90izfh6"},{"post_id":"cjgywsba7001zuro5nayz7wwf","category_id":"cjgywsb9r0010uro5qnuv1n8f","_id":"cjgywsbad002furo5j8lxp0nx"},{"post_id":"cjgywsba90023uro59se3pft0","category_id":"cjgywsb9r0010uro5qnuv1n8f","_id":"cjgywsbae002iuro5v5scmpk0"},{"post_id":"cjgywsb9x001huro5x26blzax","category_id":"cjgywsba90021uro5fxtld1to","_id":"cjgywsbae002juro5g6uexrw7"},{"post_id":"cjgywsbaa0026uro5fly1bhoo","category_id":"cjgywsb9r0010uro5qnuv1n8f","_id":"cjgywsbae002muro5153xgbw9"},{"post_id":"cjgywsb9y001kuro5r5jb2iio","category_id":"cjgywsba5001uuro5gtw8ukqn","_id":"cjgywsbae002nuro5gbymguol"},{"post_id":"cjgywsbb80031uro5uajfa846","category_id":"cjgywsb9r0010uro5qnuv1n8f","_id":"cjgywsbbg0036uro5cr7i590l"},{"post_id":"cjgywsbbc0033uro5935wlq3m","category_id":"cjgywsb9r0010uro5qnuv1n8f","_id":"cjgywsbbg0037uro5x2ue6ul9"}],"PostTag":[{"post_id":"cjgywsb910000uro5ktui3ahi","tag_id":"cjgywsb980003uro5j139g788","_id":"cjgywsb9c0009uro53pcmu9va"},{"post_id":"cjgywsb9c000auro576zsmeis","tag_id":"cjgywsb9b0008uro5lnyjr16i","_id":"cjgywsb9h000furo5exampb69"},{"post_id":"cjgywsb950001uro5ypire5j0","tag_id":"cjgywsb9b0008uro5lnyjr16i","_id":"cjgywsb9j000huro56fq6pue7"},{"post_id":"cjgywsb9e000buro59plr2fnf","tag_id":"cjgywsb9b0008uro5lnyjr16i","_id":"cjgywsb9l000muro50treatq1"},{"post_id":"cjgywsb9i000guro5rcc6udd4","tag_id":"cjgywsb9b0008uro5lnyjr16i","_id":"cjgywsb9n000puro5gv2d5wva"},{"post_id":"cjgywsb990004uro55il3ccvj","tag_id":"cjgywsb9b0008uro5lnyjr16i","_id":"cjgywsb9p000uuro5qo5bsue7"},{"post_id":"cjgywsb9j000iuro5f8b41ty4","tag_id":"cjgywsb9b0008uro5lnyjr16i","_id":"cjgywsb9q000xuro586wsnlbc"},{"post_id":"cjgywsb9a0005uro5fou54fig","tag_id":"cjgywsb9b0008uro5lnyjr16i","_id":"cjgywsb9s0012uro5ll95caf3"},{"post_id":"cjgywsb9b0006uro5fcxrz7hl","tag_id":"cjgywsb9b0008uro5lnyjr16i","_id":"cjgywsb9t0015uro5yfv3lj58"},{"post_id":"cjgywsb9m000nuro5x6innf6c","tag_id":"cjgywsb9r0011uro54rvg9izv","_id":"cjgywsb9w001curo5agq9jpud"},{"post_id":"cjgywsb9p000vuro5i1i3knjx","tag_id":"cjgywsb9u0019uro5zww93wo4","_id":"cjgywsb9y001juro50v86sihl"},{"post_id":"cjgywsb9q000yuro5hf5x4qu8","tag_id":"cjgywsb9x001guro5lantnquh","_id":"cjgywsba3001quro5ydste07h"},{"post_id":"cjgywsb9s0013uro5pczlajye","tag_id":"cjgywsba1001puro5itj0l1yk","_id":"cjgywsbaa0025uro5acdlx19m"},{"post_id":"cjgywsb9s0013uro5pczlajye","tag_id":"cjgywsba5001wuro5p1njv7va","_id":"cjgywsbab0028uro5ac9nerv7"},{"post_id":"cjgywsba90023uro59se3pft0","tag_id":"cjgywsb9r0011uro54rvg9izv","_id":"cjgywsbac002curo5r2uziqtk"},{"post_id":"cjgywsb9t0016uro5ulurwz4o","tag_id":"cjgywsba90022uro5oc0jbw8c","_id":"cjgywsbad002euro58sgkp073"},{"post_id":"cjgywsb9v001auro5ut7f53y5","tag_id":"cjgywsbac002auro5impvdun4","_id":"cjgywsbad002huro5virvfkcj"},{"post_id":"cjgywsb9w001duro5jmsqdpag","tag_id":"cjgywsb9x001guro5lantnquh","_id":"cjgywsbae002luro55izdofs9"},{"post_id":"cjgywsb9x001huro5x26blzax","tag_id":"cjgywsbae002kuro5ru3s3i9v","_id":"cjgywsbaf002puro58787q1ci"},{"post_id":"cjgywsb9y001kuro5r5jb2iio","tag_id":"cjgywsbae002ouro5fb3dubub","_id":"cjgywsbaf002ruro5vstqftxl"},{"post_id":"cjgywsba0001muro55e370np5","tag_id":"cjgywsbaf002quro5fdvnl96j","_id":"cjgywsbaf002turo5mqoeovxp"},{"post_id":"cjgywsba4001turo5v3ma9w4l","tag_id":"cjgywsbaf002suro5auf9z1dz","_id":"cjgywsbag002vuro5dkcnrxr6"},{"post_id":"cjgywsba6001xuro5xuhih16x","tag_id":"cjgywsbag002uuro5914al81s","_id":"cjgywsbag002xuro51rpfhxgb"},{"post_id":"cjgywsba7001zuro5nayz7wwf","tag_id":"cjgywsbag002wuro585v7mvke","_id":"cjgywsbag002zuro50p22zia1"},{"post_id":"cjgywsbaa0026uro5fly1bhoo","tag_id":"cjgywsbag002yuro5qs0pm2na","_id":"cjgywsbah0030uro5912h8mxf"},{"post_id":"cjgywsbb80031uro5uajfa846","tag_id":"cjgywsbbf0035uro5p1ncyim1","_id":"cjgywsbbh0039uro5o69v1s6r"},{"post_id":"cjgywsbbc0033uro5935wlq3m","tag_id":"cjgywsbbg0038uro5ptogjgca","_id":"cjgywsbbi003auro53dv56nhq"}],"Tag":[{"name":"TOOLS","_id":"cjgywsb980003uro5j139g788"},{"name":"LeetCode","_id":"cjgywsb9b0008uro5lnyjr16i"},{"name":"机器学习","_id":"cjgywsb9r0011uro54rvg9izv"},{"name":"字符串匹配","_id":"cjgywsb9u0019uro5zww93wo4"},{"name":"DP","_id":"cjgywsb9x001guro5lantnquh"},{"name":"拉格朗日定理","_id":"cjgywsba1001puro5itj0l1yk"},{"name":"泰勒公式","_id":"cjgywsba5001wuro5p1njv7va"},{"name":"罗尔定理","_id":"cjgywsba90022uro5oc0jbw8c"},{"name":"线性代数","_id":"cjgywsbac002auro5impvdun4"},{"name":"定积分的精确定义","_id":"cjgywsbae002kuro5ru3s3i9v"},{"name":"公式","_id":"cjgywsbae002ouro5fb3dubub"},{"name":"感知机","_id":"cjgywsbaf002quro5fdvnl96j"},{"name":"NLTK","_id":"cjgywsbaf002suro5auf9z1dz"},{"name":"二叉树","_id":"cjgywsbag002uuro5914al81s"},{"name":"Bayes","_id":"cjgywsbag002wuro585v7mvke"},{"name":"KNN","_id":"cjgywsbag002yuro5qs0pm2na"},{"name":"Matplotlib","_id":"cjgywsbbf0035uro5p1ncyim1"},{"name":"Numpy","_id":"cjgywsbbg0038uro5ptogjgca"}]}}